#!/usr/bin/env bash

# Pre-commit hook for Idling.app - Docusaurus Migration
# Comprehensive quality assurance and documentation validation

set -e

# ============================================================================
# INFINITE LOOP PREVENTION
# ============================================================================

# Check if we're in a post-commit auto-commit context
if [ -f ".git/post-commit-in-progress" ]; then
    echo "🔄 Skipping pre-commit hook - post-commit auto-commit in progress"
    exit 0
fi

echo "🧙‍♂️ Performing pre-commit quality assurance checks..."

# ============================================================================
# CONFIGURATION
# ============================================================================

TEMP_DIR="$(mktemp -d)"
trap "rm -rf '$TEMP_DIR'" EXIT

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Statistics tracking
total_files=0
documented_files=0
missing_files_count=0

# ============================================================================
# UTILITY FUNCTIONS
# ============================================================================

print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# ============================================================================
# DOCUSAURUS CONFIGURATION CHECK
# ============================================================================

print_status "🏗️ Checking Docusaurus configuration..."

# Check if Docusaurus is properly configured
if [ ! -f "docusaurus.config.js" ]; then
    print_error "Docusaurus configuration file not found"
    exit 1
fi

print_success "Docusaurus configuration found"

# ============================================================================
# DOCUMENTATION COVERAGE ANALYSIS
# ============================================================================

print_status "📊 Analyzing documentation coverage..."

# Run Python documentation coverage script (ignore exit code - we just want the data)
python3 scripts/check-docs-coverage.py --format json --output "$TEMP_DIR/docs_coverage.json" >/dev/null 2>&1 || true
print_success "Documentation coverage analysis completed"

# Parse JSON results
if [ -f "$TEMP_DIR/docs_coverage.json" ]; then
    coverage_percentage=$(python3 -c "
import json
with open('$TEMP_DIR/docs_coverage.json', 'r') as f:
    data = json.load(f)
    print(f'{data[\"coverage_percentage\"]:.1f}')
" 2>/dev/null || echo "0.0")
    
    total_files=$(python3 -c "
import json
with open('$TEMP_DIR/docs_coverage.json', 'r') as f:
    data = json.load(f)
    print(data['total_code_files'])
" 2>/dev/null || echo "0")
    
    documented_files=$(python3 -c "
import json
with open('$TEMP_DIR/docs_coverage.json', 'r') as f:
    data = json.load(f)
    print(data['adequately_documented'])
" 2>/dev/null || echo "0")
    
    missing_files_count=$(python3 -c "
import json
with open('$TEMP_DIR/docs_coverage.json', 'r') as f:
    data = json.load(f)
    print(data['missing_documentation'])
" 2>/dev/null || echo "0")
else
    print_error "Documentation coverage JSON file not generated"
    exit 1
fi

# ============================================================================
# DOCUMENTATION COVERAGE REPORTING
# ============================================================================

print_status "📋 Documentation coverage report..."

# Report coverage (informational only - no enforcement)
print_status "Documentation coverage: $coverage_percentage% (${documented_files}/${total_files} files)"

if [ "$missing_files_count" -gt 0 ]; then
    print_warning "$missing_files_count files are missing documentation"
else
    print_success "All files have adequate documentation"
fi

# ============================================================================
# BADGE GENERATION FOR DOCUSAURUS
# ============================================================================

print_status "🏆 Generating documentation badges for Docusaurus..."

# Ensure static directories exist
mkdir -p static/img/badges
mkdir -p static/coverage

# Determine badge color based on coverage
if [ $(echo "$coverage_percentage >= 90" | bc) -eq 1 ]; then
    badge_color="brightgreen"
elif [ $(echo "$coverage_percentage >= 80" | bc) -eq 1 ]; then
    badge_color="yellow"
elif [ $(echo "$coverage_percentage >= 70" | bc) -eq 1 ]; then
    badge_color="orange"
else
    badge_color="red"
fi

# Generate documentation coverage badge URL
badge_url="https://img.shields.io/badge/Documentation%20Coverage-${coverage_percentage}%25-${badge_color}?style=for-the-badge&logo=gitbook&logoColor=white"

# Create badge markdown for inclusion in Docusaurus
cat > static/coverage/documentation-badge.md << EOF
<!-- Documentation Coverage Badge - Auto-generated by pre-commit hook -->
[![Documentation Coverage](${badge_url})](./documentation-coverage-report.html)

**Coverage:** ${coverage_percentage}% (${documented_files}/${total_files} files)  
**Last Updated:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
EOF

# ============================================================================
# COMPREHENSIVE DOCUMENTATION COVERAGE REPORT
# ============================================================================

print_status "📊 Generating comprehensive documentation coverage report..."

# Generate HTML coverage report for Docusaurus
if python3 scripts/check-docs-coverage.py --format html --output static/coverage/documentation-coverage-report.html >/dev/null 2>&1; then
    print_success "HTML documentation coverage report generated"
else
    print_warning "Could not generate HTML coverage report"
fi

# Generate JSON coverage report for CI/CD
if python3 scripts/check-docs-coverage.py --format json --output static/coverage/documentation-coverage-report.json >/dev/null 2>&1; then
    print_success "JSON documentation coverage report generated"
else
    print_warning "Could not generate JSON coverage report"
fi

# Generate CSV coverage report for analysis
if python3 scripts/check-docs-coverage.py --format csv --output static/coverage/documentation-coverage-report.csv >/dev/null 2>&1; then
    print_success "CSV documentation coverage report generated"
else
    print_warning "Could not generate CSV coverage report"
fi

# Update Docusaurus static assets
print_status "🔄 Updating Docusaurus static assets..."

# Create coverage index page for Docusaurus
cat > static/coverage/index.html << EOF
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Documentation Coverage Report</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            max-width: 1200px;
            margin: 0 auto;
            padding: 2rem;
            line-height: 1.6;
        }
        .badge {
            display: inline-block;
            margin: 1rem 0;
        }
        .stats {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1rem;
            margin: 2rem 0;
        }
        .stat-card {
            background: #f8f9fa;
            padding: 1.5rem;
            border-radius: 8px;
            text-align: center;
        }
        .stat-value {
            font-size: 2rem;
            font-weight: bold;
            color: #2e7d32;
        }
        .stat-label {
            color: #666;
            font-size: 0.9rem;
        }
    </style>
</head>
<body>
    <h1>📚 Documentation Coverage Report</h1>
    
    <div class="badge">
        <img src="${badge_url}" alt="Documentation Coverage Badge">
    </div>
    
    <div class="stats">
        <div class="stat-card">
            <div class="stat-value">${coverage_percentage}%</div>
            <div class="stat-label">Coverage</div>
        </div>
        <div class="stat-card">
            <div class="stat-value">${documented_files}</div>
            <div class="stat-label">Documented Files</div>
        </div>
        <div class="stat-card">
            <div class="stat-value">${total_files}</div>
            <div class="stat-label">Total Files</div>
        </div>
        <div class="stat-card">
            <div class="stat-value">${missing_files_count}</div>
            <div class="stat-label">Missing Docs</div>
        </div>
    </div>
    
    <h2>📊 Detailed Reports</h2>
    <ul>
        <li><a href="./documentation-coverage-report.html">📋 Detailed HTML Report</a></li>
        <li><a href="./documentation-coverage-report.json">📄 JSON Data</a></li>
        <li><a href="./documentation-coverage-report.csv">📊 CSV Export</a></li>
    </ul>
    
    <hr>
    <p><strong>Generated:</strong> $(date -u +"%Y-%m-%d %H:%M:%S UTC")</p>
    <p><strong>Build:</strong> Pre-commit hook</p>
</body>
</html>
EOF

# ============================================================================
# UPDATE BADGES IN KEY LOCATIONS
# ============================================================================

print_status "🎯 Updating documentation badges in key locations..."

# Update root README.md if it exists
if [ -f "README.md" ]; then
    # Create a backup
    cp README.md README.md.bak
    
    # Use Python for safe, precise badge replacement (only update existing badges)
    BADGE_URL="$badge_url" python3 -c "
import re
import sys
import os

# Read the current README
with open('README.md', 'r') as f:
    content = f.read()

# The new badge markdown (get badge_url from environment)
badge_url = os.environ.get('BADGE_URL', '')
if not badge_url:
    print('ERROR: No badge URL provided')
    sys.exit(1)

new_badge = f'[![Documentation Coverage]({badge_url})](https://underwood-inc.github.io/idling.app__UI/)'

# Pattern to match the existing Documentation Coverage badge (very specific)
doc_badge_pattern = r'\[!\[Documentation Coverage\]\([^)]*\)\]\([^)]*\)'

# Only update if the badge already exists
if re.search(doc_badge_pattern, content):
    # Replace the existing badge
    content = re.sub(doc_badge_pattern, new_badge, content)
    print('Updated existing Documentation Coverage badge')
    
    # Write the updated content
    with open('README.md', 'w') as f:
        f.write(content)
else:
    print('No existing Documentation Coverage badge found to update')
"
    
    # Check if the Python script succeeded
    if [ $? -eq 0 ]; then
        print_success "Successfully updated documentation badge in README.md"
        rm README.md.bak
    else
        print_error "Failed to update documentation badge, restoring backup"
        mv README.md.bak README.md
    fi
fi

# Note: Jekyll-related badge updates removed as project no longer uses Jekyll

# ============================================================================
# FINAL VALIDATION
# ============================================================================

print_status "✅ Running final validation checks..."

# Check that coverage assets were generated
if [ -f "static/coverage/index.html" ]; then
    print_success "Coverage assets successfully generated in static/coverage/"
else
    print_warning "Coverage assets may not be included in final documentation"
fi

# ============================================================================
# COMMIT SUCCESS
# ============================================================================

print_success "🎉 All pre-commit checks passed!"
print_success "📊 Documentation coverage: $coverage_percentage% (${documented_files}/${total_files} files)"
print_success "⚙️ Docusaurus configuration: Valid"
print_success "🏆 Coverage reports generated in static/coverage/"

echo ""
echo "📚 Documentation Coverage Summary:"
echo "  • Total files analyzed: $total_files"
echo "  • Documented files: $documented_files"
echo "  • Missing documentation: $missing_files_count"
echo "  • Coverage percentage: $coverage_percentage%"
echo ""
echo "🔗 View coverage report: ./static/coverage/index.html"
echo "🌐 After deployment: https://underwood-inc.github.io/idling.app__UI/coverage/"
echo "🏗️ Documentation will be built automatically during CI/CD"
echo ""
echo "✅ Ready to commit!"
