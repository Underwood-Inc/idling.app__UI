#!/bin/bash
# Comprehensive pre-commit hook for documentation and coverage
echo "üöÄ Running comprehensive pre-commit checks..."

# Source common environment setup
. "$(dirname "$0")/_/setup-env.sh"

# Ensure we're in the correct directory
cd "$(dirname "$0")/.."

# Check if this is a merge commit (skip heavy processing for merges)
if git rev-parse -q --verify MERGE_HEAD >/dev/null; then
  echo "üìù Merge commit detected - skipping documentation coverage checks"
  exit 0
fi

# Check if we have any staged changes to source files
STAGED_SOURCE_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(ts|tsx|js|jsx)$' | grep '^src/' || true)

if [ -z "$STAGED_SOURCE_FILES" ]; then
  echo "üìù No source files staged - skipping documentation coverage checks"
  exit 0
fi

echo "üìä Found staged source files - running documentation coverage checks..."

# Create temporary directory for reports
TEMP_DIR=$(mktemp -d)
trap "rm -rf $TEMP_DIR" EXIT

# 1. Build Jekyll documentation locally (if bundle is available)
echo "üèóÔ∏è Checking Jekyll documentation build..."
cd DOCS
if command -v bundle >/dev/null 2>&1; then
  if bundle exec jekyll build --destination "$TEMP_DIR/docs_build" >/dev/null 2>&1; then
    echo "‚úÖ Jekyll documentation built successfully"
  else
    echo "‚ö†Ô∏è Jekyll documentation build failed (non-blocking)"
    echo "üîß Run 'cd DOCS && bundle exec jekyll build' to see detailed errors"
    echo "üöÄ Continuing with documentation coverage checks..."
  fi
else
  echo "‚ö†Ô∏è Bundle not available - skipping Jekyll build check"
  echo "üí° Install Ruby and Bundle to enable Jekyll documentation validation"
fi
cd ..

# 2. Generate documentation coverage report
echo "üìö Generating documentation coverage report..."

total_files=0
documented_files=0
missing_files_count=0

# Use the Python documentation coverage script for accurate results
echo "üìä Running Python documentation coverage analysis..."

# Run the Python script and capture its output
python3 scripts/check-docs-coverage.py --format json > "$TEMP_DIR/coverage_report.json" 2>/dev/null

if [ -f "$TEMP_DIR/coverage_report.json" ]; then
  # Parse the JSON output
  total_files=$(python3 -c "import json; data=json.load(open('$TEMP_DIR/coverage_report.json')); print(data['total_files'])" 2>/dev/null || echo "0")
  documented_files=$(python3 -c "import json; data=json.load(open('$TEMP_DIR/coverage_report.json')); print(data['documented_files'])" 2>/dev/null || echo "0")
  missing_files_count=$(python3 -c "import json; data=json.load(open('$TEMP_DIR/coverage_report.json')); print(data['missing_docs'])" 2>/dev/null || echo "0")
  DOC_COVERAGE=$(python3 -c "import json; data=json.load(open('$TEMP_DIR/coverage_report.json')); print(int(data['coverage_percentage']))" 2>/dev/null || echo "0")
else
  # Fallback to simplified bash logic if Python script fails
  echo "‚ö†Ô∏è Python script failed, using fallback logic..."
  
  # Check all TypeScript/JavaScript files in src/
  find src -name "*.ts" -o -name "*.tsx" -o -name "*.js" -o -name "*.jsx" | grep -v -E '\.(test|spec)\.' | sort > "$TEMP_DIR/source_files.txt"

  while IFS= read -r file; do
    # Skip test files, build files, and certain directories
    case "$file" in
      */__tests__/*|*/test/*|*/.next/*|*/node_modules/*|*.test.*|*.spec.*|*/build/*|*/dist/*)
        continue
        ;;
    esac
    
    total_files=$((total_files + 1))
    
    # Check for co-located README.md first
    file_dir=$(dirname "$file")
    readme_path="$file_dir/README.md"
    doc_found=false
    
    if [ -f "$readme_path" ] && ! grep -q "Documentation Needed.*This file was automatically generated" "$readme_path" 2>/dev/null; then
      # Check if README has meaningful content (more than just a header)
      content_lines=$(grep -v '^#' "$readme_path" | grep -v '^$' | wc -l)
      if [ "$content_lines" -gt 3 ]; then
        documented_files=$((documented_files + 1))
        doc_found=true
      fi
    fi
    
    # If no co-located README, check for centralized docs (mainly for API routes)
    if [ "$doc_found" = false ]; then
      base_name=$(basename "$file" | sed 's/\.[^.]*$//')
      base_name_lower=$(echo "$base_name" | tr '[:upper:]' '[:lower:]')
      
      # Check for API documentation (centralized)
      if echo "$file" | grep -q "src/app/api.*route\.ts"; then
        api_path=$(echo "$file" | sed 's|src/app/api/||' | sed 's|/route\.ts||')
        if [ -f "src/app/api/$api_path/README.md" ] && ! grep -q "Documentation Needed.*This file was automatically generated" "src/app/api/$api_path/README.md" 2>/dev/null; then
          documented_files=$((documented_files + 1))
          doc_found=true
        fi
      fi
    fi
    
    if [ "$doc_found" = false ]; then
      missing_files_count=$((missing_files_count + 1))
      echo "Missing: $file" >> "$TEMP_DIR/missing_files.txt"
    fi
  done < "$TEMP_DIR/source_files.txt"
  
  # Calculate coverage
  if [ $total_files -eq 0 ]; then
    DOC_COVERAGE=100
  else
    DOC_COVERAGE=$((documented_files * 100 / total_files))
  fi
fi

# Calculate coverage
if [ $total_files -eq 0 ]; then
  DOC_COVERAGE=100
else
  DOC_COVERAGE=$((documented_files * 100 / total_files))
fi

echo "üìä Documentation Coverage: ${DOC_COVERAGE}% (${documented_files}/${total_files} files)"

# 3. Update documentation coverage badges
echo "üé® Updating documentation coverage badges..."

# Determine badge color
if [ $DOC_COVERAGE -ge 90 ]; then
  DOC_COLOR="brightgreen"
elif [ $DOC_COVERAGE -ge 75 ]; then
  DOC_COLOR="green"
elif [ $DOC_COVERAGE -ge 60 ]; then
  DOC_COLOR="yellow"
elif [ $DOC_COVERAGE -ge 40 ]; then
  DOC_COLOR="orange"
else
  DOC_COLOR="red"
fi

# Generate badge URLs
DOC_BADGE_URL="https://img.shields.io/badge/Documentation%20Coverage-${DOC_COVERAGE}%25-${DOC_COLOR}?style=flat&logo=gitbook&logoColor=white"

# Update README.md badge
if [ -f "README.md" ]; then
  # Look for existing documentation coverage badge and replace it
  if grep -q "Documentation%20Coverage" README.md; then
    # Create a temporary file with the corrected badge
    TEMP_README=$(mktemp)
    # Simple approach: replace only the percentage and color parts that actually change
    sed "s/Documentation%20Coverage-[0-9]*%25-[a-z]*/Documentation%20Coverage-${DOC_COVERAGE}%25-${DOC_COLOR}/g" README.md > "$TEMP_README"
    mv "$TEMP_README" README.md
    echo "‚úÖ Updated documentation badge in README.md"
  else
    echo "‚ö†Ô∏è No existing documentation badge found in README.md"
  fi
fi

# Update Jekyll header badge
if [ -f "DOCS/_includes/header.html" ]; then
  # Look for existing documentation coverage badge and replace it
  if grep -q "Documentation%20Coverage" DOCS/_includes/header.html; then
    # Create a temporary file with the corrected badge
    TEMP_HEADER=$(mktemp)
    # Simple approach: replace only the percentage and color parts that actually change
    sed "s/Documentation%20Coverage-[0-9]*%25-[a-z]*/Documentation%20Coverage-${DOC_COVERAGE}%25-${DOC_COLOR}/g" DOCS/_includes/header.html > "$TEMP_HEADER"
    mv "$TEMP_HEADER" DOCS/_includes/header.html
    echo "‚úÖ Updated documentation badge in Jekyll header"
  else
    echo "‚ö†Ô∏è No existing documentation badge found in Jekyll header"
  fi
fi

# Update Jekyll documentation badge include
JEKYLL_BADGE_DIR="DOCS/_includes"
mkdir -p "$JEKYLL_BADGE_DIR"

cat > "$JEKYLL_BADGE_DIR/documentation-coverage-badge.html" << 'EOF'
<!-- Documentation Coverage Badge - Auto-generated by pre-commit hook -->
<a href="{{ site.baseurl }}/testing/docker-e2e-setup" title="Documentation Coverage">
  <img src="DOC_BADGE_URL_PLACEHOLDER" alt="Documentation Coverage DOC_COVERAGE_PLACEHOLDER%" />
</a>
EOF

# Replace placeholders
sed -i "s|DOC_BADGE_URL_PLACEHOLDER|${DOC_BADGE_URL}|g" "$JEKYLL_BADGE_DIR/documentation-coverage-badge.html"
sed -i "s|DOC_COVERAGE_PLACEHOLDER|${DOC_COVERAGE}|g" "$JEKYLL_BADGE_DIR/documentation-coverage-badge.html"

echo "‚úÖ Updated Jekyll documentation badge include"

# Update centralized badge file
BADGE_DIR="DOCS/badges"
mkdir -p "$BADGE_DIR"

cat > "$BADGE_DIR/documentation-coverage.md" << 'EOF'
---
layout: default
title: Documentation Coverage Badge
description: Auto-generated documentation coverage badge
---

# Documentation Coverage Badge

![Documentation Coverage](DOC_BADGE_URL_PLACEHOLDER)

**Current Coverage:** DOC_COVERAGE_PLACEHOLDER% (DOCUMENTED_FILES_PLACEHOLDER/TOTAL_FILES_PLACEHOLDER files)

*Last updated: DATE_PLACEHOLDER*

## Badge URL

```
DOC_BADGE_URL_PLACEHOLDER
```

## Usage in Markdown

```markdown
![Documentation Coverage](DOC_BADGE_URL_PLACEHOLDER)
```

## Usage in HTML

```html
<img src="DOC_BADGE_URL_PLACEHOLDER" alt="Documentation Coverage DOC_COVERAGE_PLACEHOLDER%" />
```

---
*This file is automatically updated by the pre-commit hook*
EOF

# Replace placeholders
sed -i "s|DOC_BADGE_URL_PLACEHOLDER|${DOC_BADGE_URL}|g" "$BADGE_DIR/documentation-coverage.md"
sed -i "s|DOC_COVERAGE_PLACEHOLDER|${DOC_COVERAGE}|g" "$BADGE_DIR/documentation-coverage.md"
sed -i "s|DOCUMENTED_FILES_PLACEHOLDER|${documented_files}|g" "$BADGE_DIR/documentation-coverage.md"
sed -i "s|TOTAL_FILES_PLACEHOLDER|${total_files}|g" "$BADGE_DIR/documentation-coverage.md"
sed -i "s|DATE_PLACEHOLDER|$(date)|g" "$BADGE_DIR/documentation-coverage.md"

echo "‚úÖ Updated centralized documentation badge file"

# 4. Check if coverage meets minimum threshold
MIN_COVERAGE=75
if [ $DOC_COVERAGE -lt $MIN_COVERAGE ]; then
  echo "‚ö†Ô∏è Warning: Documentation coverage (${DOC_COVERAGE}%) is below minimum threshold (${MIN_COVERAGE}%)"
  echo "üìù Missing documentation for ${missing_files_count} files:"
  if [ -f "$TEMP_DIR/missing_files.txt" ]; then
    head -10 "$TEMP_DIR/missing_files.txt" | sed 's/^Missing: /   - /'
    if [ $missing_files_count -gt 10 ]; then
      echo "   ... and $((missing_files_count - 10)) more files"
    fi
  fi
  echo ""
  echo "üí° Consider creating documentation files in the DOCS/ directory"
  echo "   Example: For src/components/Button.tsx ‚Üí create DOCS/components/button.md"
  echo ""
  echo "üöÄ Proceeding with commit (coverage check is informational)"
fi

# 5. Stage updated badge files
BADGE_FILES_UPDATED=false

if [ -f "README.md" ] && git diff --quiet README.md; then
  : # No changes to README.md
elif [ -f "README.md" ]; then
  git add README.md
  BADGE_FILES_UPDATED=true
  echo "üìù Staged updated README.md"
fi

if [ -f "DOCS/_includes/header.html" ] && git diff --quiet DOCS/_includes/header.html; then
  : # No changes to header.html
elif [ -f "DOCS/_includes/header.html" ]; then
  git add DOCS/_includes/header.html
  BADGE_FILES_UPDATED=true
  echo "üìù Staged updated Jekyll header"
fi

if [ -f "$JEKYLL_BADGE_DIR/documentation-coverage-badge.html" ]; then
  git add "$JEKYLL_BADGE_DIR/documentation-coverage-badge.html"
  BADGE_FILES_UPDATED=true
  echo "üìù Staged updated Jekyll badge include"
fi

if [ -f "$BADGE_DIR/documentation-coverage.md" ]; then
  git add "$BADGE_DIR/documentation-coverage.md"
  BADGE_FILES_UPDATED=true
  echo "üìù Staged updated centralized badge file"
fi

if [ "$BADGE_FILES_UPDATED" = true ]; then
  echo "‚úÖ Documentation badges updated and staged for commit"
else
  echo "üìù No badge files needed updating"
fi

# 6. Final summary
echo ""
echo "üéØ Pre-commit Summary:"
echo "  üìã Jekyll documentation: $(command -v bundle >/dev/null 2>&1 && echo "Checked" || echo "Skipped (bundle not available)")"
echo "  üìä Documentation coverage: ${DOC_COVERAGE}%"
echo "  üé® Badges updated: $([ "$BADGE_FILES_UPDATED" = true ] && echo "Yes" || echo "No changes needed")"
echo "  üìù Files documented: ${documented_files}/${total_files}"

if [ $missing_files_count -gt 0 ]; then
  echo "  ‚ö†Ô∏è  Missing docs: ${missing_files_count} files"
else
  echo "  ‚úÖ All files documented!"
fi

echo ""
echo "üöÄ Pre-commit checks completed successfully!"
exit 0
