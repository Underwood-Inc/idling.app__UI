---
description: comprehensive CSS best practices for 2025 - accessibility, performance, maintainability
alwaysApply: false
---

# CSS Best Practices for 2025 üé®

## Core Principles

### 1. Never Use !important

NEVER use `!important` in CSS. It indicates CSS specificity is lacking and/or issues in markup.
Use proper CSS specificity and well-structured selectors instead.

```css
/* ‚ùå BAD */
.button {
  color: blue !important;
}

/* ‚úÖ GOOD */
.navigation .button {
  color: blue;
}
```

### 2. Use Logical Properties

Always use logical properties for better internationalization and writing mode support:

```css
/* ‚ùå BAD - Physical properties */
margin-left: 1rem;
margin-right: 1rem;
padding-top: 2rem;
padding-bottom: 2rem;

/* ‚úÖ GOOD - Logical properties */
margin-inline: 1rem;
padding-block: 2rem;
```

**Logical Properties Reference:**

- `margin-inline-start` / `margin-inline-end` instead of `margin-left` / `margin-right`
- `margin-block-start` / `margin-block-end` instead of `margin-top` / `margin-bottom`
- `padding-inline` / `padding-block` for shorthand
- `border-inline-start` instead of `border-left`
- `inset-inline-start` instead of `left`

### 3. Flow-Friendly Spacing (Margin Collapsing Avoidance)

Implement consistent spacing patterns that avoid margin collapsing issues:

```css
/* ‚úÖ GOOD - Single direction margin (top-only) */
.flow > * + * {
  margin-block-start: 1rem;
}

/* ‚úÖ GOOD - Lobotomized owl selector for consistent spacing */
.content > * + * {
  margin-block-start: var(--space-md);
}

/* ‚úÖ GOOD - Using gap property where appropriate */
.stack {
  display: flex;
  flex-direction: column;
  gap: 1rem; /* No margin collapsing issues */
}

/* ‚ùå BAD - Margin on both directions causes collapsing */
.content p {
  margin-block-start: 1rem;
  margin-block-end: 1rem; /* Can collapse with adjacent elements */
}

/* ‚ùå BAD - Inconsistent spacing directions */
.heading {
  margin-block-end: 2rem;
}
.paragraph {
  margin-block-start: 1rem;
}
```

**Flow-Friendly Spacing Principles:**

- Use margin in only ONE direction (prefer `margin-block-start` or `margin-block-end`)
- Use the "lobotomized owl" selector (`* + *`) for consistent adjacent spacing
- Prefer `gap` property in flexbox/grid layouts over margins
- Create spacing utility classes for consistency
- Use CSS custom properties for spacing scale

```css
/* ‚úÖ GOOD - Spacing scale with custom properties */
:root {
  --space-xs: 0.5rem;
  --space-sm: 0.75rem;
  --space-md: 1rem;
  --space-lg: 1.5rem;
  --space-xl: 2rem;
  --space-2xl: 3rem;
}

/* ‚úÖ GOOD - Flow utility class */
.flow {
  --flow-space: var(--space-md);
}

.flow > * + * {
  margin-block-start: var(--flow-space);
}

/* ‚úÖ GOOD - Variant spacing */
.flow-lg {
  --flow-space: var(--space-lg);
}

.flow-sm {
  --flow-space: var(--space-sm);
}
```

## WCAG Accessibility Guidelines

### 1. Color Contrast

Ensure WCAG AA compliance (4.5:1 ratio for normal text, 3:1 for large text):

```css
/* ‚úÖ GOOD - High contrast */
.text-primary {
  color: oklch(0.55 0.22 264); /* Blue with sufficient contrast on white */
  background-color: oklch(1 0 0); /* Pure white */
}

/* ‚ùå BAD - Low contrast */
.text-light {
  color: oklch(0.91 0.01 286); /* Light gray on white - insufficient contrast */
  background-color: oklch(1 0 0); /* Pure white */
}
```

### 2. Focus Management

Always provide visible focus indicators:

```css
/* ‚úÖ GOOD - Custom focus styles */
.button:focus-visible {
  outline: 2px solid oklch(0.55 0.22 264);
  outline-offset: 2px;
  border-radius: 4px;
}

/* ‚ùå BAD - Removing focus outline */
.button:focus {
  outline: none;
}
```

### 3. Reduced Motion

Respect user preferences for reduced motion:

```css
/* ‚úÖ GOOD - Respect motion preferences */
@media (prefers-reduced-motion: reduce) {
  * {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
  }
}
```

## Responsive Design

### 1. Mobile-First Approach

Always design mobile-first with progressive enhancement:

```css
/* ‚úÖ GOOD - Mobile first */
.container {
  padding-inline: 1rem;
  font-size: 1rem;
}

@media (min-width: 768px) {
  .container {
    padding-inline: 2rem;
    font-size: 1.125rem;
  }
}
```

### 2. Container Queries

Use container queries for true component-based responsive design:

```css
/* ‚úÖ GOOD - Container queries */
.card-container {
  container-type: inline-size;
}

@container (min-width: 400px) {
  .card {
    display: flex;
    gap: 1rem;
  }
}
```

### 3. Fluid Typography

Use clamp() for fluid, responsive typography:

```css
/* ‚úÖ GOOD - Fluid typography */
.heading {
  font-size: clamp(1.5rem, 4vw, 3rem);
  line-height: 1.2;
}
```

## Modern CSS Features

### 1. CSS Grid and Flexbox

Use modern layout methods appropriately:

```css
/* ‚úÖ GOOD - CSS Grid for 2D layouts */
.grid-layout {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
  gap: 1rem;
}

/* ‚úÖ GOOD - Flexbox for 1D layouts */
.flex-layout {
  display: flex;
  gap: 1rem;
  align-items: center;
}
```

### 2. CSS Custom Properties

Use CSS custom properties for maintainable theming:

```css
/* ‚úÖ GOOD - CSS custom properties */
:root {
  --color-primary: oklch(0.55 0.22 264);
  --color-text: oklch(0.15 0.01 286);
  --spacing-base: 1rem;
  --border-radius: 0.5rem;
}

.button {
  background-color: var(--color-primary);
  color: var(--color-text);
  padding: var(--spacing-base);
  border-radius: var(--border-radius);
}
```

### 3. Cascade Layers

Use cascade layers for better CSS organization:

```css
/* ‚úÖ GOOD - Cascade layers */
@layer reset, base, components, utilities;

@layer base {
  html {
    font-family: system-ui, sans-serif;
  }
}

@layer components {
  .button {
    /* component styles */
  }
}
```

## Performance Considerations

### 1. Efficient Selectors

Write efficient CSS selectors:

```css
/* ‚úÖ GOOD - Efficient selectors */
.navigation-item {
  color: blue;
}

/* ‚ùå BAD - Inefficient selectors */
div > ul > li > a {
  color: blue;
}
```

### 2. Minimize Reflows

Avoid properties that cause layout recalculation:

```css
/* ‚úÖ GOOD - Compositor-only properties */
.animated-element {
  transform: translateX(100px);
  opacity: 0.5;
}

/* ‚ùå BAD - Layout-triggering properties */
.animated-element {
  left: 100px;
  width: 50%;
}
```

### 3. Critical CSS

Inline critical CSS for above-the-fold content:

```css
/* ‚úÖ GOOD - Critical CSS inlined */
/* Above-the-fold styles go in <head> */
.header,
.hero {
  /* critical styles */
}
```

## Design System & Variables

### 1. No Magic Numbers or Strings

NEVER use hardcoded values in CSS. Modern web applications must maintain a properly defined CSS variable ecosystem:

```css
/* ‚ùå BAD - Magic numbers and strings everywhere */
.button {
  font-size: 14px;
  padding: 8px 16px;
  border-radius: 4px;
  background-color: oklch(0.61 0.22 264);
  font-family: 'Inter', sans-serif;
  box-shadow: 0 4px 6px -1px oklch(0 0 0 / 0.1);
}

.card {
  padding: 24px;
  border-radius: 8px;
  background-color: oklch(1 0 0);
  box-shadow: 0 10px 15px -3px oklch(0 0 0 / 0.1);
}

/* ‚úÖ GOOD - Systematic design tokens */
:root {
  /* Colors */
  --color-primary-50: oklch(0.97 0.01 264);
  --color-primary-500: oklch(0.61 0.22 264);
  --color-primary-600: oklch(0.55 0.22 264);
  --color-gray-50: oklch(0.98 0 286);
  --color-gray-900: oklch(0.15 0.01 286);
  --color-white: oklch(1 0 0);

  /* Typography */
  --font-family-sans: 'Inter', system-ui, sans-serif;
  --font-size-sm: 0.875rem;
  --font-size-base: 1rem;
  --font-size-lg: 1.125rem;
  --font-weight-medium: 500;
  --font-weight-semibold: 600;

  /* Spacing */
  --space-1: 0.25rem;
  --space-2: 0.5rem;
  --space-3: 0.75rem;
  --space-4: 1rem;
  --space-6: 1.5rem;
  --space-8: 2rem;

  /* Border radius */
  --radius-sm: 0.25rem;
  --radius-md: 0.5rem;
  --radius-lg: 0.75rem;

  /* Shadows */
  --shadow-sm: 0 1px 2px 0 oklch(0 0 0 / 0.05);
  --shadow-md: 0 4px 6px -1px oklch(0 0 0 / 0.1);
  --shadow-lg: 0 10px 15px -3px oklch(0 0 0 / 0.1);
}

.button {
  font-size: var(--font-size-sm);
  padding: var(--space-2) var(--space-4);
  border-radius: var(--radius-md);
  background-color: var(--color-primary-500);
  font-family: var(--font-family-sans);
  box-shadow: var(--shadow-md);
}

.card {
  padding: var(--space-6);
  border-radius: var(--radius-lg);
  background-color: var(--color-white);
  box-shadow: var(--shadow-lg);
}
```

### 2. Comprehensive Design Token System

Establish a complete design token system covering all design aspects:

```css
/* ‚úÖ GOOD - Complete design token system */
:root {
  /* Color Palette - Semantic naming */
  --color-primary: var(--color-blue-500);
  --color-primary-hover: var(--color-blue-600);
  --color-secondary: var(--color-gray-500);
  --color-success: var(--color-green-500);
  --color-warning: var(--color-yellow-500);
  --color-error: var(--color-red-500);

  /* Surface colors */
  --color-background: var(--color-white);
  --color-surface: var(--color-gray-50);
  --color-surface-hover: var(--color-gray-100);

  /* Text colors */
  --color-text-primary: var(--color-gray-900);
  --color-text-secondary: var(--color-gray-600);
  --color-text-muted: var(--color-gray-500);

  /* Typography scale */
  --font-size-xs: 0.75rem;
  --font-size-sm: 0.875rem;
  --font-size-base: 1rem;
  --font-size-lg: 1.125rem;
  --font-size-xl: 1.25rem;
  --font-size-2xl: 1.5rem;
  --font-size-3xl: 1.875rem;
  --font-size-4xl: 2.25rem;

  /* Line heights */
  --line-height-tight: 1.25;
  --line-height-normal: 1.5;
  --line-height-loose: 1.75;

  /* Spacing scale (based on 0.25rem = 4px) */
  --space-px: 1px;
  --space-0: 0;
  --space-1: 0.25rem;
  --space-2: 0.5rem;
  --space-3: 0.75rem;
  --space-4: 1rem;
  --space-5: 1.25rem;
  --space-6: 1.5rem;
  --space-8: 2rem;
  --space-10: 2.5rem;
  --space-12: 3rem;
  --space-16: 4rem;
  --space-20: 5rem;
  --space-24: 6rem;

  /* Border widths */
  --border-width-0: 0;
  --border-width-1: 1px;
  --border-width-2: 2px;
  --border-width-4: 4px;

  /* Border radius */
  --radius-none: 0;
  --radius-sm: 0.25rem;
  --radius-md: 0.5rem;
  --radius-lg: 0.75rem;
  --radius-xl: 1rem;
  --radius-2xl: 1.5rem;
  --radius-full: 9999px;

  /* Z-index scale */
  --z-index-dropdown: 10;
  --z-index-modal: 50;
  --z-index-tooltip: 100;
  --z-index-notification: 200;

  /* Transition durations */
  --duration-fast: 150ms;
  --duration-normal: 250ms;
  --duration-slow: 350ms;

  /* Easing functions */
  --ease-in: cubic-bezier(0.4, 0, 1, 1);
  --ease-out: cubic-bezier(0, 0, 0.2, 1);
  --ease-in-out: cubic-bezier(0.4, 0, 0.2, 1);
}
```

### 3. Contextual Design Tokens

Use contextual tokens for component-specific values:

```css
/* ‚úÖ GOOD - Component-specific tokens */
.button {
  /* Button-specific tokens */
  --button-padding-x: var(--space-4);
  --button-padding-y: var(--space-2);
  --button-font-size: var(--font-size-sm);
  --button-border-radius: var(--radius-md);
  --button-transition: all var(--duration-fast) var(--ease-out);

  /* Implementation */
  padding: var(--button-padding-y) var(--button-padding-x);
  font-size: var(--button-font-size);
  border-radius: var(--button-border-radius);
  transition: var(--button-transition);
}

.button--large {
  --button-padding-x: var(--space-6);
  --button-padding-y: var(--space-3);
  --button-font-size: var(--font-size-base);
}
```

### 4. Dark Mode & Theme Variables

Structure variables for proper theme switching:

```css
/* ‚úÖ GOOD - Theme-aware variables */
:root {
  --color-scheme: light;

  /* Light theme */
  --color-background: var(--color-white);
  --color-text: var(--color-gray-900);
  --color-surface: var(--color-gray-50);
}

@media (prefers-color-scheme: dark) {
  :root {
    --color-scheme: dark;

    /* Dark theme overrides */
    --color-background: var(--color-gray-900);
    --color-text: var(--color-gray-50);
    --color-surface: var(--color-gray-800);
  }
}

[data-theme='dark'] {
  --color-scheme: dark;
  --color-background: var(--color-gray-900);
  --color-text: var(--color-gray-50);
  --color-surface: var(--color-gray-800);
}
```

**Design Token Best Practices:**

- Group related tokens logically (colors, spacing, typography)
- Use semantic naming that describes purpose, not appearance
- Maintain a consistent naming convention throughout
- Document token usage and relationships
- Version control your design tokens
- Use build tools to generate tokens from a single source of truth

## Maintainability

### 1. Consistent Naming

Use consistent naming conventions (BEM, CUBE CSS, etc.):

```css
/* ‚úÖ GOOD - BEM methodology */
.card {
}
.card__header {
}
.card__body {
}
.card--featured {
}
```

### 2. Semantic HTML

Always use semantic HTML as the foundation:

```css
/* ‚úÖ GOOD - Semantic selectors */
.article-header {
}
.navigation-list {
}
.main-content {
}

/* ‚ùå BAD - Non-semantic selectors */
.div-1 {
}
.span-blue {
}
```

### 3. Documentation

Document complex CSS with comments:

```css
/* ‚úÖ GOOD - Well documented */
/**
 * Card component with flexible layout
 * Supports both horizontal and vertical orientations
 * @see components/card.html for markup example
 */
.card {
  display: flex;
  flex-direction: column;
  gap: var(--spacing-base);
}
```

## Color and Theming

### 1. Color Functions

Use modern color functions for better color manipulation:

```css
/* ‚úÖ GOOD - Modern color functions */
.button {
  background-color: oklch(60% 0.15 250);
  border-color: oklch(from var(--color-primary) calc(l - 0.1) c h);
}
```

### 2. Dark Mode Support

Implement proper dark mode support:

```css
/* ‚úÖ GOOD - Dark mode support */
:root {
  color-scheme: light dark;
}

@media (prefers-color-scheme: dark) {
  :root {
    --color-background: oklch(0.15 0.01 286);
    --color-text: oklch(0.98 0 286);
  }
}
```

Remember, young apprentice: CSS is not just about making things look pretty‚Äîit's about creating inclusive, performant, and maintainable experiences for all users! üåü‚ú®
