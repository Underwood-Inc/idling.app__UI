services:
  postgres:
    image: postgres:latest
    container_name: postgres
    env_file:
      - ./.env.local
    ports:
      - '5432:5432'
    volumes:
      - ./docker-postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    user: postgres
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 10s
      timeout: 5s
      retries: 5

  nextjs:
    build: .
    container_name: nextjs
    working_dir: /app
    volumes:
      - .:/app
      - /app/node_modules
    ports:
      - '0.0.0.0:3000:3000'
    env_file:
      - ./.env.local
    environment:
      # Ensure Correct Hostname: In Docker Compose, services should communicate using their service names.
      # For example, if your PostgreSQL service is named postgres, the connection string should use postgres
      # as the hostname.
      # By defining this here, we override the value defined in ./.env.local
      POSTGRES_HOST: postgres
      IS_DOCKERIZED: true
      SHELL: /usr/bin/zsh # Ensure zsh is used
    healthcheck:
      test: |
        nextjs_health=$$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000/api/test/health 2>/dev/null || echo "000")
        if [ "$$nextjs_health" = "200" ]; then
          echo "✅ Next.js service healthy"
          exit 0
        else
          echo "❌ Next.js service health check failed ($$nextjs_health)"
          exit 1
        fi
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 60s
    depends_on:
      postgres:
        condition: service_healthy

  docs:
    build:
      context: .
      dockerfile: Dockerfile.docs
    container_name: idlingapp__ui-docs
    volumes:
      - ./jekyll:/app/jekyll
      - docs_vendor:/app/jekyll/vendor # Cache Jekyll bundle
    ports:
      - '0.0.0.0:4000:4000'
    environment:
      - JEKYLL_ENV=development
      - PAGES_REPO_NWO=Underwood-Inc/idling.app__UI
    healthcheck:
      test: |
        jekyll_health=$$(curl -s -o /dev/null -w "%{http_code}" http://localhost:4000/ 2>/dev/null || echo "000")
        if [ "$$jekyll_health" = "200" ]; then
          echo "✅ Jekyll docs service healthy"
          exit 0
        else
          echo "❌ Jekyll docs service health check failed ($$jekyll_health)"
          exit 1
        fi
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 60s

volumes:
  docs_vendor:
