// =============================================================================
// Mermaid Modal Variables & Mixins
// =============================================================================
// Component-specific variables and reusable mixins for mermaid modal system

// -----------------------------------------------------------------------------
// Component-Specific Variables
// -----------------------------------------------------------------------------

// Component-specific variables only (using global variables from _variables.scss)
$color-danger: #dc3545;
$color-danger-dark: darken($color-danger, 10%);

// Background colors with transparency (component-specific compositions)
$bg-modal-overlay: rgba(0, 0, 0, 0.2);
$bg-modal-content: rgba(40, 40, 40, 0.35);
$bg-modal-header: rgba(60, 60, 60, 0.3);
$bg-button-default: rgba(74, 74, 74, 0.3);
$bg-button-danger: rgba($color-danger, 0.9);

// Component-specific blur effects
$blur-heavy: 30px;
$blur-medium: 15px;
$blur-light: 8px;

// Component-specific breakpoints
$breakpoint-tablet: 768px;
$breakpoint-mobile: 480px;

// Component-specific animation timing
$transition-fast: 0.15s;
$transition-normal: 0.2s;
$transition-slow: 0.3s;

// -----------------------------------------------------------------------------
// Reusable Mixins
// -----------------------------------------------------------------------------

// Glass morphism effect mixin
@mixin glass-effect($background: $bg-modal-content, $blur: $blur-heavy, $border: var(--glass-border-light)) {
  background: $background;
  backdrop-filter: blur($blur);
  -webkit-backdrop-filter: blur($blur);
  border: 1px solid $border;
  box-shadow: 
    inset 0 1px 0 var(--glass-overlay-light),
    inset 0 -1px 0 var(--glass-overlay-light),
    0 0 0 1px var(--glass-overlay-light);
}

// Button base styles mixin
@mixin button-base {
  border: none;
  cursor: pointer;
  font-weight: 500;
  transition: all $transition-normal ease;
  border-radius: var(--radius-md);
  display: inline-flex;
  align-items: center;
  justify-content: center;
  gap: var(--spacing-xs);
  text-decoration: none;
  user-select: none;
  
  &:focus {
    outline: 2px solid var(--brand-primary);
    outline-offset: 2px;
  }
  
  &:disabled {
    opacity: 0.5;
    cursor: not-allowed;
    transform: none !important;
  }
}

// Hover lift effect
@mixin hover-lift($shadow-color: var(--brand-primary)) {
  &:hover:not(:disabled) {
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba($shadow-color, 0.3);
  }
  
  &:active:not(:disabled) {
    transform: translateY(0);
  }
}

// Custom scrollbar mixin
@mixin custom-scrollbar($thumb-color: var(--brand-primary), $track-color: var(--glass-border-light)) {
  &::-webkit-scrollbar {
    width: var(--spacing-sm);
    height: var(--spacing-sm);
  }
  
  &::-webkit-scrollbar-track {
    background: $track-color;
    border-radius: var(--radius-sm);
  }
  
  &::-webkit-scrollbar-thumb {
    background: rgba($thumb-color, 0.6);
    border-radius: var(--radius-sm);
    
    &:hover {
      background: rgba($thumb-color, 0.8);
    }
  }
}

// Responsive breakpoint mixin
@mixin respond-to($breakpoint) {
  @if $breakpoint == tablet {
    @media (max-width: $breakpoint-tablet) { @content; }
  }
  @if $breakpoint == mobile {
    @media (max-width: $breakpoint-mobile) { @content; }
  }
} 