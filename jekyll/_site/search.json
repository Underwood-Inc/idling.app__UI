
[
  
  
  
  
  
  
  
  
  
  
  
  
  
  
    {
      "title": "API Routes Architecture",
      "content": "🌐 API Routes ArchitectureThis diagram shows the complete API architecture for Idling.app, including all REST endpoints, middleware layers, authentication, and data flow patterns.🏗️ API Architecture Overviewflowchart TB    subgraph \"🌐 Client Layer\"        C1[🖥️ Web Browser]        C2[📱 Mobile App]        C3[🔧 Admin Dashboard]        C4[🤖 External APIs]    end    subgraph \"🛡️ Security Layer\"        S1[🔥 Rate Limiting]        S2[🔑 Authentication]        S3[🎭 Authorization]        S4[🛡️ Input Validation]        S5[📝 Audit Logging]    end    subgraph \"🚀 API Gateway (Next.js)\"        G1[📍 Route Handler]        G2[🔄 Middleware Chain]        G3[📊 Request Processing]        G4[🎯 Response Formatting]    end    subgraph \"🏢 Business Logic Layer\"        B1[👤 User Service]        B2[🎮 Session Service]        B3[😊 Emoji Service]        B4[📊 Analytics Service]        B5[🔔 Notification Service]    end    subgraph \"🗄️ Data Layer\"        D1[🐘 PostgreSQL]        D2[⚡ Redis Cache]        D3[📁 File Storage]        D4[📈 Analytics DB]    end    C1 --&gt; S1    C2 --&gt; S1    C3 --&gt; S1    C4 --&gt; S1    S1 --&gt; S2    S2 --&gt; S3    S3 --&gt; S4    S4 --&gt; S5    S5 --&gt; G1    G1 --&gt; G2    G2 --&gt; G3    G3 --&gt; G4    G4 --&gt; B1    G4 --&gt; B2    G4 --&gt; B3    G4 --&gt; B4    G4 --&gt; B5    B1 --&gt; D1    B2 --&gt; D1    B3 --&gt; D1    B4 --&gt; D4    B5 --&gt; D1    B1 --&gt; D2    B2 --&gt; D2    B3 --&gt; D2    style C1 fill:#e3f2fd    style S1 fill:#fff3e0    style G1 fill:#c8e6c9    style B1 fill:#f3e5f5    style D1 fill:#e8f5e8🗺️ API Route Structuregraph TB    subgraph \"🌐 /api Root\"        API[\"/api\"]    end    subgraph \"🔑 Authentication Routes\"        AUTH[\"/api/auth/*\"]        AUTH1[\"/api/auth/signin\"]        AUTH2[\"/api/auth/signout\"]        AUTH3[\"/api/auth/callback\"]        AUTH4[\"/api/auth/session\"]    end    subgraph \"👤 User Management\"        USER[\"/api/users\"]        USER1[\"/api/users/profile\"]        USER2[\"/api/users/preferences\"]        USER3[\"/a...",
      "url": "/diagrams/api-routes-architecture.mermaid.html",
      "date": "2024-01-01",
      "category": "General",
      "tags": [],
      "excerpt": "Complete API routes and endpoints architecture showing all REST endpoints, middleware, and data flow",
      "type": "page",
      "section": "General"
    },
  
    {
      "title": "Authentication & Authorization Flow",
      "content": "🔐 Authentication &amp; Authorization FlowThis diagram shows the complete authentication and authorization system for Idling.app, including OAuth integration, session management, and security boundaries.🌊 OAuth Authentication FlowsequenceDiagram    participant User as 👤 User    participant Browser as 🌐 Browser    participant App as 🚀 Next.js App    participant AuthJS as 🔑 Auth.js    participant Provider as 🎮 OAuth Provider&lt;br/&gt;(Twitch/Google)    participant DB as 🗄️ Database    participant Session as 🍪 Session Store    User-&gt;&gt;Browser: Click \"Sign In\"    Browser-&gt;&gt;App: GET /auth/signin    App-&gt;&gt;AuthJS: Initialize OAuth flow    AuthJS-&gt;&gt;Provider: Redirect to OAuth consent    Note over Provider: User grants permissions    Provider-&gt;&gt;AuthJS: Redirect with auth code    AuthJS-&gt;&gt;Provider: Exchange code for tokens    Provider-&gt;&gt;AuthJS: Return access/refresh tokens    AuthJS-&gt;&gt;DB: Check/Create user record    DB-&gt;&gt;AuthJS: User data    AuthJS-&gt;&gt;Session: Create session    Session-&gt;&gt;AuthJS: Session token    AuthJS-&gt;&gt;Browser: Set session cookie    Browser-&gt;&gt;User: Redirect to dashboard🛡️ Session Management Flowflowchart TD    A[🌐 User Request] --&gt; B{🍪 Session Cookie?}    B --&gt;|No| C[🔓 Anonymous Access]    B --&gt;|Yes| D[🔍 Validate Session]    D --&gt; E{📅 Session Valid?}    E --&gt;|No| F[🗑️ Clear Cookie]    E --&gt;|Yes| G[📊 Update Last Activity]    F --&gt; C    G --&gt; H[🔑 Load User Data]    H --&gt; I[✅ Authenticated Request]    C --&gt; J{🚫 Protected Route?}    J --&gt;|Yes| K[🔄 Redirect to Login]    J --&gt;|No| L[📄 Serve Public Content]    I --&gt; M[🎯 Route to Handler]    style A fill:#e1f5fe    style I fill:#c8e6c9    style C fill:#fff3e0    style K fill:#ffcdd2🔒 Authorization &amp; Role-Based Accessflowchart LR    subgraph \"🎭 User Roles\"        A[👤 Anonymous]        B[🆔 Authenticated]        C[👑 Admin]        D[🔧 Moderator]    end    subgraph \"📋 Permissions\"        E[👀 View Pub...",
      "url": "/diagrams/authentication-flow.mermaid.html",
      "date": "2024-01-01",
      "category": "General",
      "tags": [],
      "excerpt": "Complete authentication flow including OAuth providers, session management, and role-based access control",
      "type": "page",
      "section": "General"
    },
  
    {
      "title": "Component Hierarchy & Architecture",
      "content": "⚛️ Component Hierarchy &amp; ArchitectureThis diagram shows the complete React component architecture for Idling.app, including component relationships, props flow, state management, and architectural patterns.🏗️ Application Component Treeflowchart TD    subgraph \"🚀 App Root\"        A[🌟 App Component]        A --&gt; B[🔄 Providers Wrapper]        A --&gt; C[🛡️ Auth Provider]        A --&gt; D[🎨 Theme Provider]        A --&gt; E[📊 Analytics Provider]    end    subgraph \"🗂️ Layout Components\"        B --&gt; F[📐 RootLayout]        F --&gt; G[🧭 Navigation]        F --&gt; H[🏠 Main Content]        F --&gt; I[🦶 Footer]        G --&gt; J[🔗 NavLink]        G --&gt; K[👤 UserMenu]        G --&gt; L[🔔 NotificationBell]    end    subgraph \"📄 Page Components\"        H --&gt; M[🏠 HomePage]        H --&gt; N[📊 DashboardPage]        H --&gt; O[🎮 SessionPage]        H --&gt; P[⚙️ SettingsPage]        H --&gt; Q[🛠️ AdminPage]        M --&gt; R[🎯 HeroSection]        M --&gt; S[✨ FeatureSection]        M --&gt; T[📈 StatsSection]    end    subgraph \"🎮 Session Components\"        N --&gt; U[📊 SessionDashboard]        O --&gt; V[🎯 SessionCreator]        O --&gt; W[🎮 ActiveSession]        O --&gt; X[📈 SessionStats]        U --&gt; Y[📋 SessionList]        U --&gt; Z[➕ QuickStart]        V --&gt; AA[⚙️ SessionConfig]        V --&gt; BB[😊 EmojiSelector]        V --&gt; CC[⏰ TimerConfig]        W --&gt; DD[🎛️ SessionControls]        W --&gt; EE[📊 LiveStats]        W --&gt; FF[🎨 VisualFeedback]    end    subgraph \"😊 Emoji System\"        BB --&gt; GG[🗂️ EmojiCategories]        BB --&gt; HH[🔍 EmojiSearch]        BB --&gt; II[⭐ EmojiFavorites]        GG --&gt; JJ[📋 CategoryList]        GG --&gt; KK[😊 EmojiGrid]        HH --&gt; LL[🔎 SearchInput]        HH --&gt; MM[📊 SearchResults]        II --&gt; NN[❤️ FavoritesList]        II --&gt; OO[⭐ FavoriteButton]    end    style A fill:#e3f2fd    style F fill:#c8e6c9    style U fill:#fff3e0    style BB fill:#f3e5f5🔄 Props Flow &amp; State Managementse...",
      "url": "/diagrams/component-hierarchy-architecture.mermaid.html",
      "date": "2024-01-01",
      "category": "General",
      "tags": [],
      "excerpt": "Complete React component hierarchy showing component relationships, props flow, and architectural patterns",
      "type": "page",
      "section": "General"
    },
  
    {
      "title": "Data Flow Architecture",
      "content": "🌊 Data Flow ArchitectureThis diagram shows the comprehensive data flow patterns in Idling.app, illustrating how data moves through the application layers from user interactions to database storage and back.🔄 Complete Application Data Flowflowchart TD    subgraph \"👤 User Layer\"        U1[🖥️ Desktop Browser]        U2[📱 Mobile Browser]        U3[🔄 PWA Client]    end    subgraph \"🌐 Frontend Layer\"        F1[⚛️ React Components]        F2[🎣 Custom Hooks]        F3[🔄 State Management]        F4[📡 API Client]    end    subgraph \"🔗 API Layer\"        A1[🌐 Next.js API Routes]        A2[🛡️ Middleware Chain]        A3[🔑 Authentication]        A4[📊 Request Validation]    end    subgraph \"🏢 Business Logic\"        B1[👤 User Service]        B2[🎮 Session Service]        B3[😊 Emoji Service]        B4[🔔 Notification Service]    end    subgraph \"💾 Data Layer\"        D1[🐘 PostgreSQL]        D2[⚡ Redis Cache]        D3[📁 File Storage]        D4[📊 Analytics Store]    end    U1 --&gt; F1    U2 --&gt; F1    U3 --&gt; F1    F1 --&gt; F2    F2 --&gt; F3    F3 --&gt; F4    F4 --&gt; A1    A1 --&gt; A2    A2 --&gt; A3    A3 --&gt; A4    A4 --&gt; B1    A4 --&gt; B2    A4 --&gt; B3    A4 --&gt; B4    B1 --&gt; D1    B2 --&gt; D1    B3 --&gt; D1    B4 --&gt; D1    B1 --&gt; D2    B2 --&gt; D2    B3 --&gt; D2    B3 --&gt; D3    B4 --&gt; D4    D1 --&gt; B1    D2 --&gt; B1    D3 --&gt; B3    D4 --&gt; B4    B1 --&gt; A4    B2 --&gt; A4    B3 --&gt; A4    B4 --&gt; A4    A4 --&gt; F4    F4 --&gt; F3    F3 --&gt; F2    F2 --&gt; F1    style U1 fill:#e3f2fd    style F1 fill:#c8e6c9    style A1 fill:#fff3e0    style B1 fill:#f3e5f5    style D1 fill:#ffcdd2🎮 Session Management Data FlowsequenceDiagram    participant User as 👤 User    participant UI as 🖥️ Frontend    participant API as 🌐 API Route    participant Auth as 🔑 Auth Service    participant Session as 🎮 Session Service    participant DB as 🗄️ Database    participant Cache as ⚡ Redis    User-&gt;&gt;UI: Start Session    UI-&gt;&gt;API: POST /...",
      "url": "/diagrams/data-flow-architecture.mermaid.html",
      "date": "2024-01-01",
      "category": "General",
      "tags": [],
      "excerpt": "Comprehensive data flow diagrams showing how data moves through the application layers, from user interactions to database storage",
      "type": "page",
      "section": "General"
    },
  
    {
      "title": "Database Schema ERD",
      "content": "🗄️ Database Schema Entity Relationship DiagramThis diagram shows the complete database schema for Idling.app, including all tables, relationships, foreign keys, and constraints derived from the migration scripts.erDiagram    %% Core User Management    users {        uuid id PK \"Primary Key\"        string email UK \"Unique email address\"        string username UK \"Unique username\"        string display_name \"Display name for UI\"        string avatar_url \"Profile picture URL\"        string bio \"User biography\"        timestamp email_verified_at \"Email verification timestamp\"        timestamp created_at \"Account creation time\"        timestamp updated_at \"Last profile update\"        boolean is_active \"Account status\"        string provider \"OAuth provider (twitch, google, etc)\"        string provider_id \"External provider user ID\"        json metadata \"Additional user metadata\"    }    %% Authentication &amp; Sessions    user_sessions {        uuid id PK \"Session identifier\"        uuid user_id FK \"References users.id\"        string session_token UK \"Unique session token\"        string access_token \"OAuth access token\"        string refresh_token \"OAuth refresh token\"        timestamp expires_at \"Session expiration\"        timestamp created_at \"Session start time\"        timestamp last_activity \"Last user activity\"        string ip_address \"Client IP address\"        string user_agent \"Client user agent\"        json session_data \"Additional session data\"    }    %% Emoji Categories System    emoji_categories {        int id PK \"Category identifier\"        string name UK \"Category name (e.g., 'smileys', 'animals')\"        string display_name \"Human-readable category name\"        string description \"Category description\"        string icon \"Category icon/emoji\"        int sort_order \"Display order\"        boolean is_active \"Category status\"        timestamp created_at \"Creation timestamp\"        timestamp updated_at \"Last update timestamp\"    }    %% Emoji Data    emoji...",
      "url": "/diagrams/database-schema-erd.mermaid.html",
      "date": "2024-01-01",
      "category": "General",
      "tags": [],
      "excerpt": "Complete Entity Relationship Diagram showing all database tables, relationships, and constraints",
      "type": "page",
      "section": "General"
    },
  
    {
      "title": "Deployment & Infrastructure Architecture",
      "content": "🚀 Deployment &amp; Infrastructure ArchitectureThis diagram shows the actual deployment and infrastructure architecture for Idling.app based on the existing CI/CD configuration, GitHub Actions workflows, and deployment patterns.🔄 CI/CD Pipeline Architectureflowchart LR    subgraph \"📂 Source Control\"        S1[📝 Git Repository]        S2[🌿 Feature Branches]        S3[🔄 Pull Requests]        S4[🎯 Main Branch]    end    subgraph \"🏗️ GitHub Actions Workflow\"        W1[🔍 Quality Assurance]        W2[🧪 Test Suite]        W3[📊 Documentation Coverage]        W4[🎭 Playwright E2E]        W5[🔒 Security Checks]    end    subgraph \"📦 Build Process\"        B1[📋 Dependency Installation]        B2[🔧 TypeScript Compilation]        B3[📦 Next.js Build]        B4[🎨 Asset Optimization]        B5[🗄️ Database Migrations]    end    subgraph \"🚀 Deployment Targets\"        D1[🌐 Production Environment]        D2[🧪 Staging Environment]        D3[👨‍💻 Development Environment]        D4[📱 Preview Deployments]    end    S1 --&gt; S2    S2 --&gt; S3    S3 --&gt; W1    S4 --&gt; W1    W1 --&gt; W2    W1 --&gt; W3    W1 --&gt; W4    W1 --&gt; W5    W2 --&gt; B1    W3 --&gt; B2    W4 --&gt; B3    W5 --&gt; B4    B4 --&gt; B5    B5 --&gt; D1    B5 --&gt; D2    B5 --&gt; D3    B5 --&gt; D4    style S1 fill:#e3f2fd    style W1 fill:#c8e6c9    style B1 fill:#fff3e0    style D1 fill:#f3e5f5🧪 Testing Pipeline Structureflowchart TD    subgraph \"🔍 Code Quality Checks\"        Q1[📝 ESLint Analysis]        Q2[🎨 Prettier Formatting]        Q3[📊 TypeScript Validation]        Q4[🔒 Security Scanning]    end    subgraph \"🧪 Test Execution\"        T1[⚡ Unit Tests (Jest)]        T2[🔗 Integration Tests]        T3[🎭 E2E Tests (Playwright)]        T4[📸 Visual Regression Tests]    end    subgraph \"📊 Coverage Analysis\"        C1[📈 Code Coverage]        C2[📚 Documentation Coverage]        C3[🎯 Test Coverage Reports]        C4[📋 Quality Gates]    end    subgraph \"🚀 Deployment Readiness\"        R1[✅ All Tests Pass]        R2[📊...",
      "url": "/diagrams/deployment-infrastructure-cicd.mermaid.html",
      "date": "2024-01-01",
      "category": "General",
      "tags": [],
      "excerpt": "CI/CD pipeline, deployment infrastructure, and operational architecture based on actual configuration",
      "type": "page",
      "section": "General"
    },
  
    {
      "title": "Documentation Coverage System",
      "content": "📚 Documentation Coverage SystemOur automated documentation coverage system ensures comprehensive documentation across all source code files using industry-standard practices and multi-format reporting.🎯 System OverviewThe documentation coverage system operates across three main Git events, analyzing all source files and generating detailed reports with downloadable artifacts.graph TD    A[Git Event] --&gt; B{Event Type}    B --&gt;|Local Commit| C[Pre-commit Hook]    B --&gt;|PR Creation/Update| D[GitHub Actions - PR]    B --&gt;|Push to Master| E[GitHub Actions - Master]    C --&gt; C1[Run check-docs-coverage.py]    C1 --&gt; C2[Analyze ALL Source Files]    C2 --&gt; C3[Update README.md Badge]    C3 --&gt; C4[Create Jekyll Badge Files]    C4 --&gt; C5[Generate Artifacts]    D --&gt; D1[documentation-coverage Job]    D1 --&gt; D2[Analyze ALL Source Files]    D2 --&gt; D3[Generate Reports]    D3 --&gt; D4[Upload Artifacts]    D4 --&gt; D5[Comment on PR]    D5 --&gt; D6[Update PR Description]    E --&gt; E1[docs.yml Workflow]    E1 --&gt; E2[Build Jekyll Site]    E2 --&gt; E3[Deploy to GitHub Pages]    E3 --&gt; E4[Update Live Badge URLs]    style C fill:#e1f5fe    style D fill:#f3e5f5    style E fill:#e8f5e8🔍 Files AnalyzedOur system comprehensively analyzes all source files across the codebase:graph LR    A[Source Files] --&gt; B[Components]    A --&gt; C[Pages &amp; Layouts]    A --&gt; D[API Routes]    A --&gt; E[Services &amp; Utils]    A --&gt; F[Hooks &amp; Types]    A --&gt; G[Root Level]    B --&gt; B1[\"src/components/**/*.tsx&lt;br/&gt;src/app/**/components/**/*.tsx&lt;br/&gt;src/lib/components/**/*.tsx\"]    C --&gt; C1[\"src/app/**/page.tsx&lt;br/&gt;src/app/**/layout.tsx&lt;br/&gt;src/app/**/loading.tsx&lt;br/&gt;src/app/**/error.tsx\"]    D --&gt; D1[\"src/app/api/**/route.ts\"]    E --&gt; E1[\"src/lib/services/**/*.ts&lt;br/&gt;src/lib/utils/**/*.ts&lt;br/&gt;src/app/**/services/**/*.ts\"]    F --&gt; F1[\"src/lib/hooks/**/*.ts&lt;br/&gt;src/lib/types/**/*....",
      "url": "/documentation-coverage/",
      "date": "2024-01-01",
      "category": "General",
      "tags": [],
      "excerpt": "Comprehensive guide to our automated documentation coverage analysis system",
      "type": "page",
      "section": "General"
    },
  
    {
      "title": "Error Handling & Recovery Patterns",
      "content": "🚨 Error Handling &amp; Recovery PatternsThis diagram shows the comprehensive error handling and recovery patterns in Idling.app, including error propagation, recovery strategies, and resilience patterns based on the actual implementation.🔄 Error Classification &amp; Handling Flowflowchart TD    subgraph \"⚠️ Error Sources\"        E1[🌐 Network Errors]        E2[🔑 Authentication Errors]        E3[📝 Validation Errors]        E4[🗄️ Database Errors]        E5[🏢 Business Logic Errors]        E6[🎨 UI/Component Errors]        E7[🔧 Configuration Errors]        E8[🚀 Deployment Errors]    end    subgraph \"🎯 Error Classification\"        C1{🔍 Error Type?}        C2[🚨 Critical]        C3[⚠️ Warning]        C4[📝 Info]        C5[🐛 Debug]    end    subgraph \"📊 Error Processing\"        P1[📝 Error Logging]        P2[📊 Error Analytics]        P3[🔔 Alert Generation]        P4[📋 Error Reporting]    end    subgraph \"🛠️ Recovery Actions\"        R1[🔄 Automatic Retry]        R2[🔄 Fallback Strategy]        R3[👤 User Notification]        R4[🛠️ Manual Recovery]        R5[🚨 Emergency Response]    end    E1 --&gt; C1    E2 --&gt; C1    E3 --&gt; C1    E4 --&gt; C1    E5 --&gt; C1    E6 --&gt; C1    E7 --&gt; C1    E8 --&gt; C1    C1 --&gt;|Severity: High| C2    C1 --&gt;|Severity: Medium| C3    C1 --&gt;|Severity: Low| C4    C1 --&gt;|Severity: Trace| C5    C2 --&gt; P1    C3 --&gt; P1    C4 --&gt; P1    C5 --&gt; P1    P1 --&gt; P2    P2 --&gt; P3    P3 --&gt; P4    C2 --&gt; R5    C3 --&gt; R1    C3 --&gt; R2    C4 --&gt; R3    C5 --&gt; R4    R1 --&gt; P2    R2 --&gt; P2    R3 --&gt; P2    R4 --&gt; P2    R5 --&gt; P2    style E1 fill:#ffcdd2    style C2 fill:#ff9800    style P1 fill:#e3f2fd    style R1 fill:#c8e6c9🔄 Retry Logic &amp; Circuit Breaker PatternstateDiagram-v2    [*] --&gt; Closed    state \"🟢 Circuit Closed\" as Closed {        [*] --&gt; Normal        Normal --&gt; Retry : Failure        Retry --&gt; Normal : Success        Retry --&gt; FailureCount : Failure        FailureCount...",
      "url": "/diagrams/error-handling-recovery-patterns.mermaid.html",
      "date": "2024-01-01",
      "category": "General",
      "tags": [],
      "excerpt": "Comprehensive error handling and exception flow diagrams showing error propagation, recovery patterns, and resilience strategies",
      "type": "page",
      "section": "General"
    },
  
    {
      "title": "Architecture Diagrams",
      "content": "📊 Architecture DiagramsWelcome to the comprehensive visual documentation of Idling.app’s architecture. These interactive Mermaid diagrams provide detailed insights into system design, data flow, and implementation patterns.🏗️ System Architecture🏛️ System Architecture OverviewComplete full-stack architecture showing all layers from user interface to database storage, including technology stack and component relationships.🗄️ Database Schema ERDComprehensive entity relationship diagram showing all 12 database tables, relationships, constraints, and data flow patterns.🏢 Service Architecture &amp; Business LogicService layer architecture showing business logic patterns, service interactions, and implementation structure.🔐 Security &amp; Authentication🔑 Authentication &amp; Authorization FlowOAuth flows, session management, security boundaries, threat modeling, and role-based access control patterns.🚨 Error Handling &amp; Recovery PatternsComprehensive error handling strategies, recovery patterns, circuit breakers, and resilience mechanisms.🌐 API &amp; Data Flow🌐 API Routes ArchitectureComplete API structure, middleware chains, request/response flows, security matrix, and performance optimization.🌊 Data Flow ArchitectureData movement patterns through application layers, caching strategies, real-time synchronization, and performance optimization.🎨 User Experience &amp; Components👤 User Journey &amp; UX FlowsUser experience analysis including navigation flows, responsive design patterns, and interaction workflows.⚛️ Component Hierarchy &amp; ArchitectureReact component structure, props flow, state management, architectural patterns, and performance optimization.🚀 Infrastructure &amp; Operations🚀 Deployment &amp; InfrastructureCI/CD pipeline, deployment infrastructure, testing strategies, and operational architecture patterns.🎯 How to Use These DiagramsInteractive Features  Clickable Elements: Many diagram elements are interactive and provide additional context  Zoom &amp...",
      "url": "/diagrams/",
      "date": "2024-01-01",
      "category": "General",
      "tags": [],
      "excerpt": "Comprehensive visual documentation of Idling.app architecture using Mermaid diagrams",
      "type": "page",
      "section": "General"
    },
  
    {
      "title": "Idling.app Documentation",
      "content": "🎯 Idling.app DocumentationWelcome to the comprehensive documentation for Idling.app - your complete resource for development, deployment, and community contribution! 🚀📚 Documentation Sections🚀 DocumentationComplete project documentation including getting started guides, API reference, architecture details, and deployment procedures.  🔧 Getting Started - Installation, quick start, and Docker setup  🔌 API Reference - Complete API documentation with interactive tools  🏗️ Architecture - System design, security, and performance  🚀 Deployment - Production setup and release processes🛠️ DevelopmentDevelopment tools, resources, and component documentation for contributors and maintainers.  🧩 Components - UI components and design system  🗄️ Database - Schema management and optimization  📚 Libraries - Shared utilities and services  🧪 Testing - Unit, E2E, and CI/CD strategies  🔧 Tools - Development environment and debugging👥 CommunityProject community resources, contribution guidelines, and communication channels.  🤝 Contributing - How to contribute to the project  📝 Standards - Development and documentation standards  💬 Communication - Discord, GitHub, and project updates  📊 Project Info - Reports, roadmap, and news📊 Documentation Statistics    Total Documentation Files: 115+ markdown files  Co-located Documentation: 88 files in src/ directory  Documentation Coverage: 21% of directories documented  Search Index: Real-time search across all content🎯 Quick Navigation      🚀 Get Started    New to the project? Start here!    Begin Setup          🔌 API Docs    Explore our comprehensive API    View API          🧩 Components    UI components and design system    Browse Components          🤝 Contribute    Join our development community    Start Contributing  🔧 Development StatusThis documentation uses a co-located approach where documentation lives next to the code it describes. This ensures:  ✅ Always Up-to-Date - Docs are updated with code changes  ✅ Easy to Find - Documentation ...",
      "url": "/",
      "date": "2024-01-01",
      "category": "General",
      "tags": [],
      "excerpt": "Complete documentation for the Idling.app project - development guides, API reference, architecture, and community resources",
      "type": "page",
      "section": "General"
    },
  
    {
      "title": "Service Architecture & Business Logic Patterns",
      "content": "# 🏢 Service Architecture & Business Logic PatternsThis diagram shows the actual service layer architecture for Idling.app based on the codebase implementation, including service patterns, business logic organization, and data access layers.## 🏗️ **Service Layer Architecture**```mermaidflowchart TB    subgraph \"🌐 API Layer (Next.js Route Handlers)\"        A1[📍 /api/auth/*]        A2[📍 /api/users/*]        A3[📍 /api/sessions/*]        A4[📍 /api/emojis/*]        A5[📍 /api/admin/*]    end    subgraph \"🏢 Business Service Layer\"        S1[🔑 AuthService]        S2[👤 UserService]        S3[🎮 SessionService]        S4[😊 EmojiService]        S5[📊 AnalyticsService]        S6[🔔 NotificationService]    end    subgraph \"🗄️ Data Access Layer\"        D1[🐘 DatabaseService]        D2[⚡ CacheService]        D3[📁 FileStorageService]        D4[🔍 SearchService]    end    subgraph \"🔧 Utility Services\"        U1[📧 EmailService]        U2[📝 LoggingService]        U3[🔒 EncryptionService]        U4[⏰ SchedulerService]    end    A1 --> S1    A2 --> S2    A3 --> S3    A4 --> S4    A5 --> S5    A5 --> S6    S1 --> D1    S2 --> D1    S3 --> D1    S4 --> D1    S5 --> D1    S6 --> D1    S1 --> D2    S2 --> D2    S3 --> D2    S4 --> D2    S4 --> D3    S4 --> D4    S1 --> U1    S2 --> U2    S3 --> U3    S5 --> U4    style A1 fill:#e3f2fd    style S1 fill:#c8e6c9    style D1 fill:#fff3e0    style U1 fill:#f3e5f5```## 🎯 **Service Implementation Patterns**```mermaidclassDiagram    class BaseService {        >        +logger: Logger        +config: ServiceConfig        +handleError(error: Error): void        +validateInput(data: any): boolean        +formatResponse(data: any): ServiceResponse    }    class AuthService {        +signIn(provider: string): Promise~AuthResult~        +signOut(sessionId: string): Promise~void~        +validateSession(token: string): Promise~Session~        +refreshToken(refreshToken: string): Promise~TokenPair~        +getUser(sessionId: string): Promise~User~    }    clas...",
      "url": "/diagrams/service-architecture-patterns.mermaid.html",
      "date": "2024-01-01",
      "category": "General",
      "tags": [],
      "excerpt": "Service layer architecture showing business logic patterns, service interactions, and implementation structure based on actual codebase",
      "type": "page",
      "section": "General"
    },
  
    {
      "title": "System Architecture Overview",
      "content": "# 🏛️ System Architecture OverviewThis diagram shows the complete system architecture of Idling.app, including all layers from user interface to database storage.```mermaidgraph TB    %% External Layer    subgraph \"🌐 External Layer\"        Users[👥 Users]        CDN[🌍 CDN/Cloudflare]        OAuth[🔐 OAuth ProvidersTwitch, Google]    end    %% Presentation Layer    subgraph \"🎨 Presentation Layer\"        Browser[🌐 Browser]        PWA[📱 PWA Features]        SW[⚙️ Service Worker]    end    %% Application Layer    subgraph \"🚀 Application Layer - Next.js 14\"        subgraph \"Client Side\"            React[⚛️ React Components]            Hooks[🎣 Custom Hooks]            Context[🔄 Context Providers]            State[📊 State ManagementJotai + Zustand]        end        subgraph \"Server Side\"            SSR[🖥️ SSR/SSG]            API[🔌 API Routes]            Middleware[🛡️ Middleware]            Actions[⚡ Server Actions]        end    end    %% Business Logic Layer    subgraph \"🧠 Business Logic Layer\"        Auth[🔐 AuthenticationNextAuth.js]        Permissions[👮 PermissionsRBAC System]        Services[🔧 Business Services]        Utils[🛠️ Utilities]    end    %% Data Access Layer    subgraph \"💾 Data Access Layer\"        ORM[🗃️ SQL QueriesDirect PostgreSQL]        Cache[⚡ Redis Cache]        Files[📁 File Storage]        Sessions[🎫 Session Store]    end    %% Infrastructure Layer    subgraph \"🏗️ Infrastructure Layer\"        DB[(🐘 PostgreSQLPrimary Database)]        Redis[(🔴 RedisCache & Sessions)]        Storage[💽 File SystemImages & Assets]        Logs[📝 Logging System]    end    %% External Services    subgraph \"🌍 External Services\"        Analytics[📊 Analytics]        Monitoring[📈 Monitoring]        Email[📧 Email Service]    end    %% Connections    Users --> Browser    Users --> PWA    Browser --> CDN    CDN --> React    React --> Hooks    React --> Context    Context --> State    Hooks --> API    Browser --> SW    SW --> Cache    API --> Auth    API --> Middleware    API --> ...",
      "url": "/diagrams/system-architecture-overview.mermaid.html",
      "date": "2024-01-01",
      "category": "General",
      "tags": [],
      "excerpt": "Complete system architecture showing all layers and component relationships",
      "type": "page",
      "section": "General"
    },
  
    {
      "title": "User Journey & UX Flows",
      "content": "# 🎯 User Journey & UX FlowsThis document provides comprehensive user experience flow diagrams for Idling.app, covering all user interactions, navigation paths, and experience optimization strategies.## 🌟 **Primary User Journey - New User Onboarding**```mermaidjourney    title New User Onboarding Journey    section Discovery      Visit Landing Page           : 5: User      Read About Features         : 4: User      View Demo/Screenshots       : 4: User      Click Sign Up              : 3: User    section Authentication      Choose OAuth Provider       : 4: User      Grant Permissions          : 3: User      Complete Profile Setup     : 4: User      Verify Email (Optional)    : 3: User    section First Experience      Welcome Tutorial           : 5: User      Create First Session       : 5: User      Explore Dashboard         : 4: User      Customize Settings        : 4: User    section Engagement      Use Emoji Features        : 5: User      Share Session Results     : 4: User      Invite Friends           : 3: User      Become Regular User      : 5: User```## 🔄 **Core User Flow - Idle Session Management**```mermaidflowchart TD    A[🏠 Dashboard] --> B{📊 Active Session?}    B -->|No| C[➕ Create New Session]    B -->|Yes| D[📋 View Active Session]    C --> E[⚙️ Configure Session]    E --> F[🏷️ Name Session]    F --> G[⏰ Set Duration]    G --> H[😊 Choose Emoji Theme]    H --> I[🚀 Start Session]    I --> J[🎮 Session Active]    J --> K{🎯 User Action?}    K -->|⏸️ Pause| L[⏸️ Session Paused]    K -->|▶️ Continue| J    K -->|⏹️ Stop| M[⏹️ Session Ended]    K -->|📊 View Stats| N[📈 Real-time Stats]    L --> O{🔄 Resume?}    O -->|Yes| J    O -->|No| M    N --> J    M --> P[🎉 Session Summary]    P --> Q[💾 Save Results]    Q --> R[📤 Share Options]    R --> S[🔄 Create Another?]    S -->|Yes| C    S -->|No| A    D --> T[📊 Session Controls]    T --> U{🎛️ Action?}    U -->|⏸️ Pause| L    U -->|⏹️ Stop| M    U -->|📊 Stats| N    U -->|⚙️ Settings| V[⚙️ Modify Session]    V --> J    ...",
      "url": "/diagrams/user-journey-ux-flows.mermaid.html",
      "date": "2024-01-01",
      "category": "General",
      "tags": [],
      "excerpt": "Comprehensive user journey and UX flow diagrams showing all user interactions, navigation paths, and experience optimization",
      "type": "page",
      "section": "General"
    }
  
  
  
  
  ,
  {
    "title": "Getting Started Guide",
    "content": "Complete setup and installation guide for the Idling.app project including Docker setup, quick start instructions, and development environment configuration. Learn how to get up and running quickly with our comprehensive onboarding documentation.",
    "url": "/docs/getting-started/",
    "date": "2024-01-01",
    "category": "Documentation",
    "tags": ["getting-started", "setup", "installation", "docker"],
    "excerpt": "Complete setup and installation guide for the Idling.app project",
    "type": "page",
    "section": "Getting Started"
  },
  {
    "title": "API Documentation",
    "content": "Complete API reference including admin endpoints, authentication, database operations, and interactive Swagger documentation. Explore all available endpoints with detailed request and response examples.",
    "url": "/docs/api/",
    "date": "2024-01-01",
    "category": "API",
    "tags": ["api", "endpoints", "swagger", "authentication", "admin"],
    "excerpt": "Complete API documentation with interactive tools and examples",
    "type": "api",
    "section": "Documentation"
  },
  {
    "title": "Component Library",
    "content": "UI components and design system documentation including rich input system, filter bar, floating toolbar, and component library with React hooks and utilities. Complete guide to our design system and component architecture.",
    "url": "/dev/components/",
    "date": "2024-01-01",
    "category": "Components",
    "tags": ["components", "ui", "design-system", "react", "hooks"],
    "excerpt": "Complete component documentation and design system guide",
    "type": "component",
    "section": "Development"
  },
  {
    "title": "Architecture Overview",
    "content": "System architecture documentation including security patterns, performance optimization, database design, and deployment strategies. Learn about our system design principles and implementation patterns.",
    "url": "/docs/architecture/",
    "date": "2024-01-01",
    "category": "Documentation",
    "tags": ["architecture", "security", "performance", "system-design", "database"],
    "excerpt": "System design and architecture documentation with patterns and strategies",
    "type": "page",
    "section": "Architecture"
  },
  {
    "title": "Contributing Guide",
    "content": "How to contribute to the project including setup instructions, coding standards, git workflow, and community guidelines. Join our development community and learn how to make meaningful contributions.",
    "url": "/community/contributing/",
    "date": "2024-01-01",
    "category": "Community",
    "tags": ["contributing", "development", "guidelines", "setup", "community"],
    "excerpt": "Complete guide for project contributors with setup and guidelines",
    "type": "page",
    "section": "Contributing"
  },
  {
    "title": "Library Documentation",
    "content": "Shared utilities and services including authentication, caching, logging, parsers, and React hooks for the application. Complete reference for all shared libraries and utility functions.",
    "url": "/dev/libraries/",
    "date": "2024-01-01",
    "category": "Libraries",
    "tags": ["libraries", "utilities", "services", "hooks", "authentication"],
    "excerpt": "Shared utilities and services documentation with examples",
    "type": "page",
    "section": "Development"
  },
  {
    "title": "Testing Guide",
    "content": "Testing strategies and QA documentation including unit testing, end-to-end testing with Playwright, and CI/CD pipeline configuration. Learn how to write effective tests for the application.",
    "url": "/dev/testing/",
    "date": "2024-01-01",
    "category": "Development",
    "tags": ["testing", "unit-tests", "e2e", "playwright", "ci-cd"],
    "excerpt": "Complete testing guide with unit, integration, and E2E testing strategies",
    "type": "page",
    "section": "Testing"
  },
  {
    "title": "Deployment Guide",
    "content": "Production deployment procedures including server setup, environment configuration, release processes, and monitoring. Complete guide to deploying the application to production environments.",
    "url": "/docs/deployment/",
    "date": "2024-01-01",
    "category": "Documentation",
    "tags": ["deployment", "production", "server", "release", "monitoring"],
    "excerpt": "Production deployment procedures and release management",
    "type": "page",
    "section": "Deployment"
  },
  {
    "title": "Database Documentation",
    "content": "Database and data management documentation including migrations, performance optimization, and data seeding. Learn about our database architecture and management strategies.",
    "url": "/dev/database/",
    "date": "2024-01-01",
    "category": "Development",
    "tags": ["database", "migrations", "performance", "data-management"],
    "excerpt": "Database architecture and management documentation",
    "type": "page",
    "section": "Development"
  },
  {
    "title": "Development Tools",
    "content": "Development environment and tools documentation including environment setup, performance optimization tools, and debugging guides. Complete reference for development tooling.",
    "url": "/dev/tools/",
    "date": "2024-01-01",
    "category": "Development",
    "tags": ["tools", "environment", "performance", "debugging", "development"],
    "excerpt": "Development tools and environment configuration guide",
    "type": "page",
    "section": "Development"
  }
] 