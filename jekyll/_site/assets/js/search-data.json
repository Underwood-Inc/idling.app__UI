[{
      "title": "API Routes Architecture",
      "content": "🌐 API Routes ArchitectureThis diagram shows the complete API architecture for Idling.app, including all REST endpoints, middleware layers, authentication, and data flow patterns.🏗️ API Architecture Overviewflowchart TB    subgraph \"🌐 Client Layer\"        C1[🖥️ Web Browser]        C2[📱 Mobile App]        C3[🔧 Admin Dashboard]        C4[🤖 External APIs]    end    subgraph \"🛡️ Security Layer\"        S1[🔥 Rate Limiting]        S2[🔑 Authentication]        S3[🎭 Authorization]        S4[🛡️ Input Validation]        S5[📝 Audit Logging]    end    subgraph \"🚀 API Gateway (Next.js)\"        G1[📍 Route Handler]        G2[🔄 Middleware Chain]        G3[📊 Request Processing]        G4[🎯 Response Formatting]    end    subgraph \"🏢 Business Logic Layer\"        B1[👤 User Service]        B2[🎮 Session Service]        B3[😊 Emoji Service]        B4[📊 Analytics Service]        B5[🔔 Notification Service]    end    subgraph \"🗄️ Data Layer\"        D1[🐘 PostgreSQL]        D2[⚡ Redis Cache]        D3[📁 File Storage]        D4[📈 Analytics DB]    end    C1 --&gt; S1    C2 --&gt; S1    C3 --&gt; S1    C4 --&gt; S1    S1 --&gt; S2    S2 --&gt; S3    S3 --&gt; S4    S4 --&gt; S5    S5 --&gt; G1    G1 --&gt; G2    G2 --&gt; G3    G3 --&gt; G4    G4 --&gt; B1    G4 --&gt; B2    G4 --&gt; B3    G4 --&gt; B4    G4 --&gt; B5    B1 --&gt; D1    B2 --&gt; D1    B3 --&gt; D1    B4 --&gt; D4    B5 --&gt; D1    B1 --&gt; D2    B2 --&gt; D2    B3 --&gt; D2    style C1 fill:#e3f2fd    style S1 fill:#fff3e0    style G1 fill:#c8e6c9    style B1 fill:#f3e5f5    style D1 fill:#e8f5e8🗺️ API Route Structuregraph TB    subgraph \"🌐 /api Root\"        API[\"/api\"]    end    subgraph \"🔑 Authentication Routes\"        AUTH[\"/api/auth/*\"]        AUTH1[\"/api/auth/signin\"]        AUTH2[\"/api/auth/signout\"]        AUTH3[\"/api/auth/callback\"]        AUTH4[\"/api/auth/session\"]    end    subgraph \"👤 User Management\"        USER[\"/api/users\"]        USER1[\"/api/users/profile\"]        USER2[\"/api/users/preferences\"]        USER3[\"/api/users/[id]\"]        USER4[\"/api/users/[id]/sessions\"]        USER5[\"/api/users/[id]/activities\"]    end    subgraph \"🎮 Session Management\"        SESS[\"/api/sessions\"]        SESS1[\"/api/sessions/create\"]        SESS2[\"/api/sessions/[id]\"]        SESS3[\"/api/sessions/[id]/pause\"]        SESS4[\"/api/sessions/[id]/resume\"]        SESS5[\"/api/sessions/[id]/stop\"]        SESS6[\"/api/sessions/active\"]    end    subgraph \"😊 Emoji System\"        EMOJI[\"/api/emojis\"]        EMOJI1[\"/api/emojis/categories\"]        EMOJI2[\"/api/emojis/search\"]        EMOJI3[\"/api/emojis/favorites\"]        EMOJI4[\"/api/emojis/popular\"]        EMOJI5[\"/api/emojis/custom\"]    end    subgraph \"📊 Analytics &amp; Reporting\"        ANALYTICS[\"/api/analytics\"]        ANALYTICS1[\"/api/analytics/dashboard\"]        ANALYTICS2[\"/api/analytics/usage\"]        ANALYTICS3[\"/api/analytics/reports\"]        ANALYTICS4[\"/api/analytics/export\"]    end    subgraph \"🔔 Notifications\"        NOTIF[\"/api/notifications\"]        NOTIF1[\"/api/notifications/list\"]        NOTIF2[\"/api/notifications/[id]/read\"]        NOTIF3[\"/api/notifications/mark-all-read\"]        NOTIF4[\"/api/notifications/settings\"]    end    subgraph \"🛠️ Admin Routes\"        ADMIN[\"/api/admin\"]        ADMIN1[\"/api/admin/users\"]        ADMIN2[\"/api/admin/system\"]        ADMIN3[\"/api/admin/analytics\"]        ADMIN4[\"/api/admin/settings\"]    end    API --&gt; AUTH    API --&gt; USER    API --&gt; SESS    API --&gt; EMOJI    API --&gt; ANALYTICS    API --&gt; NOTIF    API --&gt; ADMIN    AUTH --&gt; AUTH1    AUTH --&gt; AUTH2    AUTH --&gt; AUTH3    AUTH --&gt; AUTH4    USER --&gt; USER1    USER --&gt; USER2    USER --&gt; USER3    USER --&gt; USER4    USER --&gt; USER5    SESS --&gt; SESS1    SESS --&gt; SESS2    SESS --&gt; SESS3    SESS --&gt; SESS4    SESS --&gt; SESS5    SESS --&gt; SESS6    EMOJI --&gt; EMOJI1    EMOJI --&gt; EMOJI2    EMOJI --&gt; EMOJI3    EMOJI --&gt; EMOJI4    EMOJI --&gt; EMOJI5    ANALYTICS --&gt; ANALYTICS1    ANALYTICS --&gt; ANALYTICS2    ANALYTICS --&gt; ANALYTICS3    ANALYTICS --&gt; ANALYTICS4    NOTIF --&gt; NOTIF1    NOTIF --&gt; NOTIF2    NOTIF --&gt; NOTIF3    NOTIF --&gt; NOTIF4    ADMIN --&gt; ADMIN1    ADMIN --&gt; ADMIN2    ADMIN --&gt; ADMIN3    ADMIN --&gt; ADMIN4🔄 Request/Response FlowsequenceDiagram    participant Client as 🖥️ Client    participant Middleware as 🛡️ Middleware    participant Handler as 🎯 Route Handler    participant Service as 🏢 Business Service    participant Cache as ⚡ Redis    participant DB as 🗄️ Database    Client-&gt;&gt;Middleware: HTTP Request    Note over Middleware: Security Checks    Middleware-&gt;&gt;Middleware: Rate Limiting    Middleware-&gt;&gt;Middleware: Authentication    Middleware-&gt;&gt;Middleware: Authorization    Middleware-&gt;&gt;Middleware: Input Validation    Middleware-&gt;&gt;Handler: Validated Request    Handler-&gt;&gt;Service: Business Logic Call    Service-&gt;&gt;Cache: Check Cache    alt Cache Hit        Cache-&gt;&gt;Service: Cached Data    else Cache Miss        Service-&gt;&gt;DB: Database Query        DB-&gt;&gt;Service: Query Result        Service-&gt;&gt;Cache: Store in Cache    end    Service-&gt;&gt;Handler: Processed Data    Handler-&gt;&gt;Client: JSON Response    Note over Handler: Response Processing    Handler-&gt;&gt;Handler: Format Response    Handler-&gt;&gt;Handler: Add Headers    Handler-&gt;&gt;Handler: Log Request🛡️ Middleware Chainflowchart LR    A[📥 Incoming Request] --&gt; B[🔥 Rate Limiter]    B --&gt; C[🔍 CORS Handler]    C --&gt; D[🔑 Auth Validator]    D --&gt; E[🎭 Permission Check]    E --&gt; F[🛡️ Input Sanitizer]    F --&gt; G[📝 Request Logger]    G --&gt; H[🎯 Route Handler]    H --&gt; I[📊 Response Formatter]    I --&gt; J[🔒 Security Headers]    J --&gt; K[📈 Metrics Collector]    K --&gt; L[📤 Response Sent]    style A fill:#e3f2fd    style B fill:#fff3e0    style C fill:#fff3e0    style D fill:#ffebee    style E fill:#ffebee    style F fill:#e8f5e8    style G fill:#f3e5f5    style H fill:#c8e6c9    style I fill:#e1f5fe    style J fill:#fff3e0    style K fill:#f3e5f5    style L fill:#c8e6c9📊 API Response PatternsclassDiagram    class APIResponse {        +boolean success        +string message        +any data        +object meta        +array errors        +number timestamp    }    class SuccessResponse {        +success: true        +data: T        +meta: PaginationMeta        +message: string    }    class ErrorResponse {        +success: false        +errors: ErrorDetail[]        +message: string        +code: string    }    class PaginationMeta {        +number page        +number limit        +number total        +number totalPages        +boolean hasNext        +boolean hasPrev    }    class ErrorDetail {        +string field        +string message        +string code        +any value    }    APIResponse &lt;|-- SuccessResponse    APIResponse &lt;|-- ErrorResponse    SuccessResponse --&gt; PaginationMeta    ErrorResponse --&gt; ErrorDetail🔐 Authentication &amp; Authorization Matrixgraph TB    subgraph \"🔑 Authentication Levels\"        A1[🔓 Public]        A2[🔒 Authenticated]        A3[🔐 Admin Only]        A4[🛡️ System Only]    end    subgraph \"📍 Route Categories\"        R1[🏠 Public Routes]        R2[👤 User Routes]        R3[🎮 Session Routes]        R4[😊 Emoji Routes]        R5[📊 Analytics Routes]        R6[🔔 Notification Routes]        R7[🛠️ Admin Routes]    end    subgraph \"🎭 HTTP Methods\"        M1[GET - Read]        M2[POST - Create]        M3[PUT - Update]        M4[DELETE - Remove]        M5[PATCH - Modify]    end    A1 --&gt; R1    A1 --&gt; R4    A2 --&gt; R2    A2 --&gt; R3    A2 --&gt; R4    A2 --&gt; R6    A3 --&gt; R5    A3 --&gt; R7    A4 --&gt; R7    R1 --&gt; M1    R2 --&gt; M1    R2 --&gt; M2    R2 --&gt; M3    R2 --&gt; M5    R3 --&gt; M1    R3 --&gt; M2    R3 --&gt; M3    R3 --&gt; M4    R4 --&gt; M1    R4 --&gt; M2    R4 --&gt; M4    R5 --&gt; M1    R6 --&gt; M1    R6 --&gt; M3    R7 --&gt; M1    R7 --&gt; M2    R7 --&gt; M3    R7 --&gt; M4    R7 --&gt; M5    style A1 fill:#c8e6c9    style A2 fill:#fff3e0    style A3 fill:#ffcdd2    style A4 fill:#f3e5f5⚡ Performance &amp; Caching Strategyflowchart TB    subgraph \"🚀 Performance Layers\"        P1[🌍 CDN Edge Cache]        P2[🔄 API Gateway Cache]        P3[⚡ Redis Application Cache]        P4[🗄️ Database Query Cache]    end    subgraph \"📊 Cache Strategies\"        S1[🕐 Time-based Expiry]        S2[🔄 Cache Invalidation]        S3[📈 Cache Warming]        S4[🎯 Selective Caching]    end    subgraph \"🎯 Cached Data Types\"        D1[👤 User Profiles]        D2[😊 Emoji Categories]        D3[📊 Analytics Data]        D4[⚙️ System Settings]        D5[🔔 Notification Templates]    end    P1 --&gt; S1    P2 --&gt; S2    P3 --&gt; S3    P4 --&gt; S4    S1 --&gt; D1    S2 --&gt; D2    S3 --&gt; D3    S4 --&gt; D4    S1 --&gt; D5    style P1 fill:#e3f2fd    style P2 fill:#c8e6c9    style P3 fill:#fff3e0    style P4 fill:#f3e5f5🔍 API Architecture AnalysisRoute Organization  RESTful Design: Consistent REST patterns across all endpoints  Hierarchical Structure: Logical grouping by feature domain  Version Management: API versioning strategy for backward compatibility  Documentation: OpenAPI/Swagger documentation for all endpointsSecurity Implementation  Authentication: JWT-based authentication with refresh tokens  Authorization: Role-based access control (RBAC)  Rate Limiting: Configurable rate limits per endpoint and user  Input Validation: Comprehensive request validation and sanitizationPerformance Optimization  Caching Strategy: Multi-layer caching with Redis and CDN  Database Optimization: Query optimization and connection pooling  Response Compression: Gzip compression for all responses  Pagination: Efficient pagination for large datasetsError Handling  Consistent Format: Standardized error response format  Error Codes: Meaningful HTTP status codes and custom error codes  Logging: Comprehensive error logging and monitoring  Graceful Degradation: Fallback mechanisms for service failuresMonitoring &amp; Observability  Request Metrics: Response time, throughput, and error rates  Health Checks: Endpoint health monitoring  Audit Logging: Complete audit trail for all API operations  Performance Monitoring: Real-time performance metrics and alertingThis API architecture provides a scalable, secure, and maintainable foundation for the Idling.app platform with comprehensive feature coverage and enterprise-grade reliability.",
      "url": "/diagrams/api-routes-architecture.mermaid.html"
    },{
      "title": "Authentication & Authorization Flow",
      "content": "🔐 Authentication &amp; Authorization FlowThis diagram shows the complete authentication and authorization system for Idling.app, including OAuth integration, session management, and security boundaries.🌊 OAuth Authentication FlowsequenceDiagram    participant User as 👤 User    participant Browser as 🌐 Browser    participant App as 🚀 Next.js App    participant AuthJS as 🔑 Auth.js    participant Provider as 🎮 OAuth Provider&lt;br/&gt;(Twitch/Google)    participant DB as 🗄️ Database    participant Session as 🍪 Session Store    User-&gt;&gt;Browser: Click \"Sign In\"    Browser-&gt;&gt;App: GET /auth/signin    App-&gt;&gt;AuthJS: Initialize OAuth flow    AuthJS-&gt;&gt;Provider: Redirect to OAuth consent    Note over Provider: User grants permissions    Provider-&gt;&gt;AuthJS: Redirect with auth code    AuthJS-&gt;&gt;Provider: Exchange code for tokens    Provider-&gt;&gt;AuthJS: Return access/refresh tokens    AuthJS-&gt;&gt;DB: Check/Create user record    DB-&gt;&gt;AuthJS: User data    AuthJS-&gt;&gt;Session: Create session    Session-&gt;&gt;AuthJS: Session token    AuthJS-&gt;&gt;Browser: Set session cookie    Browser-&gt;&gt;User: Redirect to dashboard🛡️ Session Management Flowflowchart TD    A[🌐 User Request] --&gt; B{🍪 Session Cookie?}    B --&gt;|No| C[🔓 Anonymous Access]    B --&gt;|Yes| D[🔍 Validate Session]    D --&gt; E{📅 Session Valid?}    E --&gt;|No| F[🗑️ Clear Cookie]    E --&gt;|Yes| G[📊 Update Last Activity]    F --&gt; C    G --&gt; H[🔑 Load User Data]    H --&gt; I[✅ Authenticated Request]    C --&gt; J{🚫 Protected Route?}    J --&gt;|Yes| K[🔄 Redirect to Login]    J --&gt;|No| L[📄 Serve Public Content]    I --&gt; M[🎯 Route to Handler]    style A fill:#e1f5fe    style I fill:#c8e6c9    style C fill:#fff3e0    style K fill:#ffcdd2🔒 Authorization &amp; Role-Based Accessflowchart LR    subgraph \"🎭 User Roles\"        A[👤 Anonymous]        B[🆔 Authenticated]        C[👑 Admin]        D[🔧 Moderator]    end    subgraph \"📋 Permissions\"        E[👀 View Public]        F[📊 View Dashboard]        G[✏️ Edit Profile]        H[🎮 Create Sessions]        I[🛠️ Manage Users]        J[⚙️ System Settings]    end    subgraph \"🛡️ Protected Resources\"        K[🏠 Public Pages]        L[📊 Dashboard]        M[⚙️ Settings]        N[🔧 Admin Panel]        O[📈 Analytics]    end    A --&gt; E    A --&gt; K    B --&gt; E    B --&gt; F    B --&gt; G    B --&gt; H    B --&gt; L    B --&gt; M    C --&gt; E    C --&gt; F    C --&gt; G    C --&gt; H    C --&gt; I    C --&gt; J    C --&gt; L    C --&gt; M    C --&gt; N    C --&gt; O    D --&gt; E    D --&gt; F    D --&gt; G    D --&gt; H    D --&gt; I    D --&gt; L    D --&gt; M    style A fill:#ffcdd2    style B fill:#c8e6c9    style C fill:#ffd54f    style D fill:#ce93d8🔄 Token Refresh &amp; SecuritysequenceDiagram    participant App as 🚀 App    participant AuthJS as 🔑 Auth.js    participant Provider as 🎮 OAuth Provider    participant DB as 🗄️ Database    Note over App,DB: Token Refresh Flow    App-&gt;&gt;AuthJS: API Request with expired token    AuthJS-&gt;&gt;DB: Check refresh token    DB-&gt;&gt;AuthJS: Refresh token data    alt Refresh token valid        AuthJS-&gt;&gt;Provider: Request new access token        Provider-&gt;&gt;AuthJS: New access token        AuthJS-&gt;&gt;DB: Update stored tokens        AuthJS-&gt;&gt;App: Continue with new token    else Refresh token expired        AuthJS-&gt;&gt;DB: Clear user session        AuthJS-&gt;&gt;App: Redirect to login    end    Note over App,DB: Security Measures    rect rgb(255, 240, 240)        Note over App,DB: Token Rotation        AuthJS-&gt;&gt;Provider: Rotate refresh token        Provider-&gt;&gt;AuthJS: New refresh token        AuthJS-&gt;&gt;DB: Store new refresh token    end    rect rgb(240, 255, 240)        Note over App,DB: Session Security        AuthJS-&gt;&gt;DB: Log security event        AuthJS-&gt;&gt;App: Rate limit check        App-&gt;&gt;AuthJS: IP validation    end🚨 Security Boundaries &amp; Threat Modelflowchart TB    subgraph \"🌐 External Threats\"        T1[🦹 Malicious Actors]        T2[🤖 Automated Bots]        T3[🕷️ Web Scrapers]        T4[⚡ DDoS Attacks]    end    subgraph \"🛡️ Security Layer 1: Network\"        S1[🔥 Firewall]        S2[🌍 CDN/WAF]        S3[📊 Rate Limiting]        S4[🔒 HTTPS/TLS]    end    subgraph \"🛡️ Security Layer 2: Application\"        S5[🔑 Authentication]        S6[🎭 Authorization]        S7[🍪 Session Management]        S8[🔐 CSRF Protection]        S9[🛡️ Input Validation]    end    subgraph \"🛡️ Security Layer 3: Data\"        S10[🔒 Encryption at Rest]        S11[🔐 Encryption in Transit]        S12[🗄️ Database Security]        S13[📝 Audit Logging]    end    subgraph \"🎯 Protected Assets\"        A1[👤 User Data]        A2[🔑 Authentication Tokens]        A3[📊 Session Data]        A4[⚙️ System Configuration]    end    T1 --&gt; S1    T2 --&gt; S2    T3 --&gt; S3    T4 --&gt; S2    S1 --&gt; S5    S2 --&gt; S6    S3 --&gt; S7    S4 --&gt; S8    S5 --&gt; S10    S6 --&gt; S11    S7 --&gt; S12    S8 --&gt; S13    S9 --&gt; S13    S10 --&gt; A1    S11 --&gt; A2    S12 --&gt; A3    S13 --&gt; A4    style T1 fill:#ffcdd2    style T2 fill:#ffcdd2    style T3 fill:#ffcdd2    style T4 fill:#ffcdd2    style A1 fill:#c8e6c9    style A2 fill:#c8e6c9    style A3 fill:#c8e6c9    style A4 fill:#c8e6c9📊 Authentication State ManagementstateDiagram-v2    [*] --&gt; Anonymous    Anonymous --&gt; Authenticating: Login Initiated    Authenticating --&gt; Authenticated: Success    Authenticating --&gt; Anonymous: Failure    Authenticated --&gt; Refreshing: Token Expired    Refreshing --&gt; Authenticated: Refresh Success    Refreshing --&gt; Anonymous: Refresh Failed    Authenticated --&gt; Anonymous: Logout    Authenticated --&gt; Anonymous: Session Expired    note right of Anonymous        - No session cookie        - Public access only        - Redirect to login for protected routes    end note    note right of Authenticating        - OAuth flow in progress        - Loading state shown        - Temporary session data    end note    note right of Authenticated        - Valid session cookie        - User data loaded        - Full application access    end note    note right of Refreshing        - Background token refresh        - Maintain user experience        - Fallback to re-auth if needed    end note🔍 Security Analysis SummaryAuthentication Methods  OAuth 2.0: Secure third-party authentication with Twitch and Google  Session-based: Secure session management with HTTP-only cookies  Token Rotation: Automatic refresh token rotation for enhanced securityAuthorization Levels  Anonymous: Public content access only  Authenticated: Full application features  Moderator: User management capabilities  Admin: System configuration and analyticsSecurity Measures  HTTPS Enforcement: All communications encrypted  CSRF Protection: Cross-site request forgery prevention  Rate Limiting: Brute force attack prevention  Input Validation: SQL injection and XSS prevention  Audit Logging: Complete security event trackingSession Security  HTTP-only Cookies: Prevents XSS access to session tokens  Secure Flag: Cookies only sent over HTTPS  SameSite Protection: CSRF attack prevention  Session Expiration: Automatic cleanup of expired sessionsThreat Mitigation  DDoS Protection: CDN and rate limiting  Bot Detection: Automated threat detection  IP Validation: Suspicious activity monitoring  Audit Trail: Complete security event loggingThis authentication system provides enterprise-grade security while maintaining excellent user experience through seamless OAuth integration and robust session management.",
      "url": "/diagrams/authentication-flow.mermaid.html"
    },{
      "title": "Component Hierarchy & Architecture",
      "content": "⚛️ Component Hierarchy &amp; ArchitectureThis diagram shows the complete React component architecture for Idling.app, including component relationships, props flow, state management, and architectural patterns.🏗️ Application Component Treeflowchart TD    subgraph \"🚀 App Root\"        A[🌟 App Component]        A --&gt; B[🔄 Providers Wrapper]        A --&gt; C[🛡️ Auth Provider]        A --&gt; D[🎨 Theme Provider]        A --&gt; E[📊 Analytics Provider]    end    subgraph \"🗂️ Layout Components\"        B --&gt; F[📐 RootLayout]        F --&gt; G[🧭 Navigation]        F --&gt; H[🏠 Main Content]        F --&gt; I[🦶 Footer]        G --&gt; J[🔗 NavLink]        G --&gt; K[👤 UserMenu]        G --&gt; L[🔔 NotificationBell]    end    subgraph \"📄 Page Components\"        H --&gt; M[🏠 HomePage]        H --&gt; N[📊 DashboardPage]        H --&gt; O[🎮 SessionPage]        H --&gt; P[⚙️ SettingsPage]        H --&gt; Q[🛠️ AdminPage]        M --&gt; R[🎯 HeroSection]        M --&gt; S[✨ FeatureSection]        M --&gt; T[📈 StatsSection]    end    subgraph \"🎮 Session Components\"        N --&gt; U[📊 SessionDashboard]        O --&gt; V[🎯 SessionCreator]        O --&gt; W[🎮 ActiveSession]        O --&gt; X[📈 SessionStats]        U --&gt; Y[📋 SessionList]        U --&gt; Z[➕ QuickStart]        V --&gt; AA[⚙️ SessionConfig]        V --&gt; BB[😊 EmojiSelector]        V --&gt; CC[⏰ TimerConfig]        W --&gt; DD[🎛️ SessionControls]        W --&gt; EE[📊 LiveStats]        W --&gt; FF[🎨 VisualFeedback]    end    subgraph \"😊 Emoji System\"        BB --&gt; GG[🗂️ EmojiCategories]        BB --&gt; HH[🔍 EmojiSearch]        BB --&gt; II[⭐ EmojiFavorites]        GG --&gt; JJ[📋 CategoryList]        GG --&gt; KK[😊 EmojiGrid]        HH --&gt; LL[🔎 SearchInput]        HH --&gt; MM[📊 SearchResults]        II --&gt; NN[❤️ FavoritesList]        II --&gt; OO[⭐ FavoriteButton]    end    style A fill:#e3f2fd    style F fill:#c8e6c9    style U fill:#fff3e0    style BB fill:#f3e5f5🔄 Props Flow &amp; State ManagementsequenceDiagram    participant App as 🚀 App    participant Context as 🌐 Context    participant Dashboard as 📊 Dashboard    participant Session as 🎮 Session    participant Emoji as 😊 Emoji    participant UI as 🎨 UI Components    App-&gt;&gt;Context: Initialize Global State    Context-&gt;&gt;Context: User Auth State    Context-&gt;&gt;Context: Theme State    Context-&gt;&gt;Context: Session State    Dashboard-&gt;&gt;Context: Request User Data    Context-&gt;&gt;Dashboard: User Sessions    Dashboard-&gt;&gt;Session: Session Props    Session-&gt;&gt;Context: Update Session State    Context-&gt;&gt;Dashboard: Notify State Change    Dashboard-&gt;&gt;UI: Re-render Components    Session-&gt;&gt;Emoji: Open Emoji Selector    Emoji-&gt;&gt;Context: Selected Emoji    Context-&gt;&gt;Session: Update Session Emoji    UI-&gt;&gt;Context: User Interaction    Context-&gt;&gt;App: Global State Update    App-&gt;&gt;UI: Propagate Changes🧩 Component Architecture PatternsclassDiagram    class BaseComponent {        +props: ComponentProps        +state: ComponentState        +render(): JSX.Element        +componentDidMount()        +componentWillUnmount()    }    class ContainerComponent {        +fetchData()        +handleBusinessLogic()        +manageState()        +passPropsToPresentation()    }    class PresentationalComponent {        +displayData()        +handleUIEvents()        +renderVisualElements()        +noBusinessLogic()    }    class HookComponent {        +useState()        +useEffect()        +useContext()        +useCustomHooks()    }    class HigherOrderComponent {        +withAuth()        +withTheme()        +withAnalytics()        +withErrorBoundary()    }    BaseComponent &lt;|-- ContainerComponent    BaseComponent &lt;|-- PresentationalComponent    BaseComponent &lt;|-- HookComponent    ContainerComponent --&gt; PresentationalComponent    HigherOrderComponent --&gt; BaseComponent🎯 Component Responsibility Matrixgraph TB    subgraph \"🏗️ Structural Components\"        S1[🚀 App - Application Root]        S2[📐 Layout - Page Structure]        S3[🧭 Navigation - App Navigation]        S4[🛡️ ErrorBoundary - Error Handling]    end    subgraph \"📊 Data Components\"        D1[📈 Dashboard - Data Aggregation]        D2[📋 SessionList - Session Management]        D3[👤 UserProfile - User Data]        D4[📊 Analytics - Metrics Display]    end    subgraph \"🎮 Interactive Components\"        I1[🎯 SessionCreator - Session Setup]        I2[🎛️ SessionControls - Session Management]        I3[😊 EmojiSelector - Emoji Selection]        I4[⚙️ SettingsPanel - Configuration]    end    subgraph \"🎨 UI Components\"        U1[🔘 Button - User Actions]        U2[📝 Input - Data Entry]        U3[📋 Modal - Overlays]        U4[🔔 Notification - User Feedback]    end    subgraph \"🔌 Utility Components\"        T1[🔄 LoadingSpinner - Loading States]        T2[🚨 ErrorMessage - Error Display]        T3[📱 ResponsiveWrapper - Device Adaptation]        T4[🎨 ThemeProvider - Styling Context]    end    S1 --&gt; D1    S1 --&gt; I1    S2 --&gt; U1    S3 --&gt; U2    D1 --&gt; U3    D2 --&gt; U4    I1 --&gt; T1    I2 --&gt; T2    style S1 fill:#e3f2fd    style D1 fill:#c8e6c9    style I1 fill:#fff3e0    style U1 fill:#f3e5f5    style T1 fill:#ffcdd2🔗 Component Dependencies Graphgraph LR    subgraph \"📦 External Dependencies\"        E1[⚛️ React]        E2[🔄 Next.js]        E3[🎨 Tailwind CSS]        E4[📊 Chart.js]        E5[🔔 React Hot Toast]    end    subgraph \"🏠 Internal Components\"        I1[🚀 App]        I2[📊 Dashboard]        I3[🎮 Session]        I4[😊 Emoji]        I5[🎨 UI Library]    end    subgraph \"🔧 Custom Hooks\"        H1[🎯 useSession]        H2[👤 useAuth]        H3[🎨 useTheme]        H4[📊 useAnalytics]    end    subgraph \"🌐 Context Providers\"        C1[🔑 AuthContext]        C2[🎮 SessionContext]        C3[🎨 ThemeContext]        C4[📊 AnalyticsContext]    end    E1 --&gt; I1    E2 --&gt; I1    E3 --&gt; I5    E4 --&gt; I2    E5 --&gt; I5    I1 --&gt; I2    I1 --&gt; I3    I1 --&gt; I4    I1 --&gt; I5    I2 --&gt; H1    I2 --&gt; H2    I3 --&gt; H1    I3 --&gt; H3    I4 --&gt; H4    H1 --&gt; C2    H2 --&gt; C1    H3 --&gt; C3    H4 --&gt; C4    style E1 fill:#e3f2fd    style I1 fill:#c8e6c9    style H1 fill:#fff3e0    style C1 fill:#f3e5f5🎨 Styling Architectureflowchart TB    subgraph \"🎨 Design System\"        DS1[🎯 Design Tokens]        DS2[🎨 Color Palette]        DS3[📝 Typography Scale]        DS4[📏 Spacing System]        DS5[🔳 Component Variants]    end    subgraph \"🏗️ CSS Architecture\"        CSS1[🌊 Tailwind Base]        CSS2[🧩 Component Classes]        CSS3[🎛️ Utility Classes]        CSS4[📱 Responsive Breakpoints]        CSS5[🌙 Dark Mode Support]    end    subgraph \"⚛️ Component Styling\"        CS1[💅 Styled Components]        CS2[📦 CSS Modules]        CS3[🎨 Inline Styles]        CS4[🔄 Dynamic Styling]        CS5[🎭 Conditional Classes]    end    subgraph \"🎯 Theme Management\"        TM1[🌐 Theme Provider]        TM2[🔧 Theme Configuration]        TM3[🌙 Light/Dark Modes]        TM4[🎨 Custom Themes]        TM5[💾 Theme Persistence]    end    DS1 --&gt; CSS1    DS2 --&gt; CSS2    DS3 --&gt; CSS3    DS4 --&gt; CSS4    DS5 --&gt; CSS5    CSS1 --&gt; CS1    CSS2 --&gt; CS2    CSS3 --&gt; CS3    CSS4 --&gt; CS4    CSS5 --&gt; CS5    CS1 --&gt; TM1    CS2 --&gt; TM2    CS3 --&gt; TM3    CS4 --&gt; TM4    CS5 --&gt; TM5    style DS1 fill:#e3f2fd    style CSS1 fill:#c8e6c9    style CS1 fill:#fff3e0    style TM1 fill:#f3e5f5🔄 Component Lifecycle FlowstateDiagram-v2    [*] --&gt; Mounting    Mounting --&gt; Constructor    Constructor --&gt; ComponentDidMount    ComponentDidMount --&gt; Mounted    Mounted --&gt; Updating    Updating --&gt; ShouldComponentUpdate    ShouldComponentUpdate --&gt; ComponentDidUpdate    ComponentDidUpdate --&gt; Mounted    Mounted --&gt; Unmounting    Unmounting --&gt; ComponentWillUnmount    ComponentWillUnmount --&gt; [*]    Mounted --&gt; ErrorState    ErrorState --&gt; ComponentDidCatch    ComponentDidCatch --&gt; ErrorBoundary    ErrorBoundary --&gt; Mounted    note right of Constructor        Initial state setup        Bind event handlers        Initialize refs    end note    note right of ComponentDidMount        API calls        Event listeners        DOM manipulation    end note    note right of ComponentDidUpdate        Update DOM        Network requests        State synchronization    end note    note right of ComponentWillUnmount        Cleanup timers        Remove listeners        Cancel requests    end note🧪 Component Testing Strategyflowchart LR    subgraph \"🧪 Testing Levels\"        T1[🔬 Unit Tests]        T2[🔗 Integration Tests]        T3[🎭 E2E Tests]        T4[📸 Visual Tests]    end    subgraph \"🛠️ Testing Tools\"        TT1[⚛️ React Testing Library]        TT2[🃏 Jest]        TT3[🎭 Playwright]        TT4[📷 Storybook]    end    subgraph \"🎯 Test Scenarios\"        TS1[🔄 Component Rendering]        TS2[🎮 User Interactions]        TS3[📊 State Management]        TS4[🔌 Props Validation]        TS5[🚨 Error Handling]    end    subgraph \"📊 Coverage Metrics\"        CM1[📈 Line Coverage]        CM2[🌿 Branch Coverage]        CM3[🔧 Function Coverage]        CM4[📝 Statement Coverage]    end    T1 --&gt; TT1    T1 --&gt; TT2    T2 --&gt; TT1    T2 --&gt; TT2    T3 --&gt; TT3    T4 --&gt; TT4    TT1 --&gt; TS1    TT1 --&gt; TS2    TT2 --&gt; TS3    TT2 --&gt; TS4    TT3 --&gt; TS5    TS1 --&gt; CM1    TS2 --&gt; CM2    TS3 --&gt; CM3    TS4 --&gt; CM4    style T1 fill:#e3f2fd    style TT1 fill:#c8e6c9    style TS1 fill:#fff3e0    style CM1 fill:#f3e5f5📊 Performance Optimization Matrixgraph TB    subgraph \"⚡ Performance Strategies\"        P1[🧠 React.memo]        P2[🔄 useMemo]        P3[📞 useCallback]        P4[🔀 Code Splitting]        P5[📦 Bundle Optimization]    end    subgraph \"🎯 Optimization Targets\"        O1[🔄 Re-render Prevention]        O2[📊 Expensive Calculations]        O3[🎮 Event Handlers]        O4[📦 Bundle Size]        O5[⏰ Load Time]    end    subgraph \"📈 Monitoring Tools\"        M1[⚛️ React DevTools]        M2[🔍 Chrome DevTools]        M3[📊 Web Vitals]        M4[🎯 Lighthouse]        M5[📈 Performance API]    end    subgraph \"🎯 Performance Metrics\"        PM1[⏰ First Contentful Paint]        PM2[🎨 Largest Contentful Paint]        PM3[🔄 Cumulative Layout Shift]        PM4[⚡ First Input Delay]        PM5[🎮 Time to Interactive]    end    P1 --&gt; O1    P2 --&gt; O2    P3 --&gt; O3    P4 --&gt; O4    P5 --&gt; O5    O1 --&gt; M1    O2 --&gt; M2    O3 --&gt; M3    O4 --&gt; M4    O5 --&gt; M5    M1 --&gt; PM1    M2 --&gt; PM2    M3 --&gt; PM3    M4 --&gt; PM4    M5 --&gt; PM5    style P1 fill:#e3f2fd    style O1 fill:#c8e6c9    style M1 fill:#fff3e0    style PM1 fill:#f3e5f5🔍 Component Architecture AnalysisArchitectural Patterns  Container/Presentational: Clear separation of business logic and UI  Higher-Order Components: Cross-cutting concerns like authentication  Render Props: Flexible component composition patterns  Custom Hooks: Reusable stateful logic extractionState Management Strategy  Local State: Component-specific state with useState  Global State: Application-wide state with Context API  Server State: Remote data management with React Query  Form State: Specialized form handling with React Hook FormComponent Composition  Atomic Design: Building from atoms to organisms  Compound Components: Related components working together  Polymorphic Components: Flexible component APIs  Provider Pattern: Context-based dependency injectionPerformance Considerations  Memoization: Preventing unnecessary re-renders  Code Splitting: Lazy loading for better performance  Bundle Optimization: Tree shaking and dead code elimination  Virtual Scrolling: Efficient rendering of large listsTesting Strategy  Unit Testing: Individual component behavior  Integration Testing: Component interaction testing  Visual Testing: UI consistency verification  Accessibility Testing: WCAG compliance validationDevelopment Experience  TypeScript Integration: Type safety and better DX  Storybook Documentation: Component library documentation  Hot Reload: Fast development feedback loop  ESLint/Prettier: Code quality and consistencyThis component architecture provides a scalable, maintainable, and performant foundation for the Idling.app React application with comprehensive testing and optimization strategies.",
      "url": "/diagrams/component-hierarchy-architecture.mermaid.html"
    },{
      "title": "Data Flow Architecture",
      "content": "🌊 Data Flow ArchitectureThis diagram shows the comprehensive data flow patterns in Idling.app, illustrating how data moves through the application layers from user interactions to database storage and back.🔄 Complete Application Data Flowflowchart TD    subgraph \"👤 User Layer\"        U1[🖥️ Desktop Browser]        U2[📱 Mobile Browser]        U3[🔄 PWA Client]    end    subgraph \"🌐 Frontend Layer\"        F1[⚛️ React Components]        F2[🎣 Custom Hooks]        F3[🔄 State Management]        F4[📡 API Client]    end    subgraph \"🔗 API Layer\"        A1[🌐 Next.js API Routes]        A2[🛡️ Middleware Chain]        A3[🔑 Authentication]        A4[📊 Request Validation]    end    subgraph \"🏢 Business Logic\"        B1[👤 User Service]        B2[🎮 Session Service]        B3[😊 Emoji Service]        B4[🔔 Notification Service]    end    subgraph \"💾 Data Layer\"        D1[🐘 PostgreSQL]        D2[⚡ Redis Cache]        D3[📁 File Storage]        D4[📊 Analytics Store]    end    U1 --&gt; F1    U2 --&gt; F1    U3 --&gt; F1    F1 --&gt; F2    F2 --&gt; F3    F3 --&gt; F4    F4 --&gt; A1    A1 --&gt; A2    A2 --&gt; A3    A3 --&gt; A4    A4 --&gt; B1    A4 --&gt; B2    A4 --&gt; B3    A4 --&gt; B4    B1 --&gt; D1    B2 --&gt; D1    B3 --&gt; D1    B4 --&gt; D1    B1 --&gt; D2    B2 --&gt; D2    B3 --&gt; D2    B3 --&gt; D3    B4 --&gt; D4    D1 --&gt; B1    D2 --&gt; B1    D3 --&gt; B3    D4 --&gt; B4    B1 --&gt; A4    B2 --&gt; A4    B3 --&gt; A4    B4 --&gt; A4    A4 --&gt; F4    F4 --&gt; F3    F3 --&gt; F2    F2 --&gt; F1    style U1 fill:#e3f2fd    style F1 fill:#c8e6c9    style A1 fill:#fff3e0    style B1 fill:#f3e5f5    style D1 fill:#ffcdd2🎮 Session Management Data FlowsequenceDiagram    participant User as 👤 User    participant UI as 🖥️ Frontend    participant API as 🌐 API Route    participant Auth as 🔑 Auth Service    participant Session as 🎮 Session Service    participant DB as 🗄️ Database    participant Cache as ⚡ Redis    User-&gt;&gt;UI: Start Session    UI-&gt;&gt;API: POST /api/sessions/create    API-&gt;&gt;Auth: Validate Token    Auth-&gt;&gt;Cache: Check Session    Cache-&gt;&gt;Auth: Session Data    Auth-&gt;&gt;API: User Validated    API-&gt;&gt;Session: Create Session    Session-&gt;&gt;DB: INSERT session    DB-&gt;&gt;Session: Session ID    Session-&gt;&gt;Cache: Cache Session    Session-&gt;&gt;API: Session Created    API-&gt;&gt;UI: 201 Created    UI-&gt;&gt;User: Session Started    Note over User,Cache: Session Active Loop    loop Every 30 seconds        UI-&gt;&gt;API: POST /api/sessions/heartbeat        API-&gt;&gt;Session: Update Activity        Session-&gt;&gt;Cache: Update Timestamp        Cache-&gt;&gt;Session: Confirmed        Session-&gt;&gt;API: Heartbeat OK        API-&gt;&gt;UI: 200 OK    end    User-&gt;&gt;UI: End Session    UI-&gt;&gt;API: POST /api/sessions/end    API-&gt;&gt;Session: End Session    Session-&gt;&gt;DB: UPDATE session    Session-&gt;&gt;Cache: Clear Cache    Session-&gt;&gt;API: Session Ended    API-&gt;&gt;UI: 200 OK    UI-&gt;&gt;User: Session Ended😊 Emoji System Data Flowflowchart TB    subgraph \"🎯 User Interaction\"        U1[👤 User Selects Emoji]        U2[⭐ Add to Favorites]        U3[🔍 Search Emojis]        U4[📂 Browse Categories]    end    subgraph \"🖥️ Frontend Processing\"        F1[🎨 Emoji Picker Component]        F2[🔍 Search Hook]        F3[⭐ Favorites Hook]        F4[📂 Categories Hook]    end    subgraph \"📡 API Layer\"        A1[📍 /api/emojis/categories]        A2[📍 /api/emojis/search]        A3[📍 /api/emojis/favorites]        A4[📍 /api/emojis/usage]    end    subgraph \"🏢 Business Logic\"        B1[😊 Emoji Service]        B2[🔍 Search Service]        B3[⭐ Favorites Service]        B4[📊 Usage Analytics]    end    subgraph \"💾 Data Storage\"        D1[🗄️ emoji_categories]        D2[🗄️ emojis]        D3[🗄️ user_emoji_favorites]        D4[🗄️ emoji_usage_stats]        D5[⚡ Redis Cache]    end    U1 --&gt; F1    U2 --&gt; F3    U3 --&gt; F2    U4 --&gt; F4    F1 --&gt; A4    F2 --&gt; A2    F3 --&gt; A3    F4 --&gt; A1    A1 --&gt; B1    A2 --&gt; B2    A3 --&gt; B3    A4 --&gt; B4    B1 --&gt; D1    B1 --&gt; D2    B1 --&gt; D5    B2 --&gt; D2    B2 --&gt; D5    B3 --&gt; D3    B3 --&gt; D5    B4 --&gt; D4    D1 --&gt; B1    D2 --&gt; B1    D3 --&gt; B3    D4 --&gt; B4    D5 --&gt; B1    D5 --&gt; B2    D5 --&gt; B3    B1 --&gt; A1    B2 --&gt; A2    B3 --&gt; A3    B4 --&gt; A4    A1 --&gt; F4    A2 --&gt; F2    A3 --&gt; F3    A4 --&gt; F1    style U1 fill:#e3f2fd    style F1 fill:#c8e6c9    style A1 fill:#fff3e0    style B1 fill:#f3e5f5    style D1 fill:#ffcdd2🔑 Authentication Data Flowflowchart LR    subgraph \"🌐 OAuth Providers\"        O1[🎮 Twitch OAuth]        O2[🔍 Google OAuth]    end    subgraph \"🔐 Authentication Flow\"        A1[🚀 OAuth Redirect]        A2[🔑 Token Exchange]        A3[👤 User Profile Fetch]        A4[🎫 JWT Generation]    end    subgraph \"🏢 User Management\"        U1[👤 User Creation/Update]        U2[📋 Profile Validation]        U3[🔄 Session Creation]        U4[⚙️ Preferences Setup]    end    subgraph \"💾 Data Persistence\"        D1[🗄️ users table]        D2[🗄️ accounts table]        D3[🗄️ sessions table]        D4[🗄️ user_preferences]        D5[⚡ Redis Session Cache]    end    O1 --&gt; A1    O2 --&gt; A1    A1 --&gt; A2    A2 --&gt; A3    A3 --&gt; A4    A4 --&gt; U1    U1 --&gt; U2    U2 --&gt; U3    U3 --&gt; U4    U1 --&gt; D1    U1 --&gt; D2    U3 --&gt; D3    U4 --&gt; D4    U3 --&gt; D5    D1 --&gt; U1    D2 --&gt; U1    D3 --&gt; U3    D4 --&gt; U4    D5 --&gt; U3    style O1 fill:#e3f2fd    style A1 fill:#c8e6c9    style U1 fill:#fff3e0    style D1 fill:#f3e5f5📊 Real-time Data SynchronizationstateDiagram-v2    [*] --&gt; Idle    Idle --&gt; UserAction : User Interaction    UserAction --&gt; Validating : Validate Input    Validating --&gt; Processing : Valid Data    Validating --&gt; Error : Invalid Data    Processing --&gt; DatabaseWrite : Business Logic    DatabaseWrite --&gt; CacheUpdate : Data Persisted    CacheUpdate --&gt; UIUpdate : Cache Updated    UIUpdate --&gt; Idle : UI Refreshed    Error --&gt; ErrorDisplay : Show Error    ErrorDisplay --&gt; Idle : User Acknowledged    Processing --&gt; OptimisticUpdate : Optimistic UI    OptimisticUpdate --&gt; Rollback : Server Error    OptimisticUpdate --&gt; Confirmed : Server Success    Rollback --&gt; ErrorDisplay : Revert Changes    Confirmed --&gt; Idle : Changes Applied    note right of Processing        All data changes go through        validation and business logic    end note    note right of CacheUpdate        Redis cache updated for        performance optimization    end note🔄 Data Caching Strategyflowchart TB    subgraph \"📡 Request Flow\"        R1[📥 Incoming Request]        R2[🔍 Cache Check]        R3[💾 Database Query]        R4[📤 Response]    end    subgraph \"⚡ Cache Layers\"        C1[🌐 Browser Cache]        C2[🔄 Next.js Cache]        C3[⚡ Redis Cache]        C4[🗄️ Database Cache]    end    subgraph \"📊 Cache Strategies\"        S1[🎯 Cache-First]        S2[🔄 Stale-While-Revalidate]        S3[⏰ Time-based Expiry]        S4[🔄 Manual Invalidation]    end    subgraph \"🗄️ Data Types\"        T1[👤 User Data]        T2[😊 Emoji Data]        T3[🎮 Session Data]        T4[📊 Analytics Data]    end    R1 --&gt; R2    R2 --&gt; C1    R2 --&gt; C2    R2 --&gt; C3    R2 --&gt; C4    C1 --&gt; S1    C2 --&gt; S2    C3 --&gt; S3    C4 --&gt; S4    S1 --&gt; T1    S2 --&gt; T2    S3 --&gt; T3    S4 --&gt; T4    R2 --&gt; R3    R3 --&gt; R4    T1 --&gt; R4    T2 --&gt; R4    T3 --&gt; R4    T4 --&gt; R4    style R1 fill:#e3f2fd    style C1 fill:#c8e6c9    style S1 fill:#fff3e0    style T1 fill:#f3e5f5🚨 Error Handling Data Flowflowchart TD    subgraph \"⚠️ Error Sources\"        E1[🌐 Network Errors]        E2[🔑 Auth Errors]        E3[📝 Validation Errors]        E4[🗄️ Database Errors]        E5[🏢 Business Logic Errors]    end    subgraph \"🔍 Error Detection\"        D1[📡 API Layer]        D2[🖥️ Frontend Layer]        D3[🏢 Service Layer]        D4[💾 Data Layer]    end    subgraph \"📊 Error Processing\"        P1[🏷️ Error Classification]        P2[📝 Error Logging]        P3[📊 Error Analytics]        P4[🔔 Error Notification]    end    subgraph \"🎯 Error Resolution\"        R1[🔄 Retry Logic]        R2[🔄 Fallback Strategies]        R3[👤 User Notification]        R4[🛠️ Recovery Actions]    end    E1 --&gt; D1    E2 --&gt; D1    E3 --&gt; D2    E4 --&gt; D4    E5 --&gt; D3    D1 --&gt; P1    D2 --&gt; P1    D3 --&gt; P1    D4 --&gt; P1    P1 --&gt; P2    P2 --&gt; P3    P3 --&gt; P4    P1 --&gt; R1    P1 --&gt; R2    P1 --&gt; R3    P1 --&gt; R4    R1 --&gt; D1    R2 --&gt; D2    R3 --&gt; D2    R4 --&gt; D3    style E1 fill:#ffcdd2    style D1 fill:#fff3e0    style P1 fill:#e3f2fd    style R1 fill:#c8e6c9📱 Mobile vs Desktop Data Flowjourney    title User Data Flow Journey    section Desktop Experience      Open Browser        : 5: User      Load Application    : 4: Frontend      Authenticate        : 3: Auth      Fetch User Data     : 4: API      Cache Data          : 5: Redis      Render Dashboard    : 5: UI    section Mobile Experience      Open PWA            : 5: User      Check Cache         : 4: ServiceWorker      Sync Data           : 3: Background      Update UI           : 4: React      Offline Support     : 5: Cache      Push Notifications  : 4: Service    section Session Flow      Start Session       : 5: User      Validate Auth       : 4: Auth      Create Session      : 5: Session      Track Activity      : 4: Analytics      Sync State          : 5: Redis      End Session         : 4: Cleanup🔍 Data Flow AnalysisData Movement Patterns  Request/Response Cycle: Standard HTTP request/response pattern with caching optimization  Real-time Updates: WebSocket-like behavior through polling for session heartbeats  Optimistic Updates: UI updates immediately with server confirmation  Cache Invalidation: Strategic cache clearing on data mutationsPerformance Optimizations  Multi-layer Caching: Browser → Next.js → Redis → Database  Data Prefetching: Anticipatory loading of frequently accessed data  Lazy Loading: Components and data loaded on demand  Connection Pooling: Efficient database connection managementData Consistency  ACID Transactions: Database operations maintain consistency  Cache Coherence: Redis cache synchronized with database state  Eventual Consistency: Some operations allow temporary inconsistency for performance  Conflict Resolution: Last-write-wins strategy for concurrent updatesSecurity Considerations  Data Validation: All inputs validated at multiple layers  Access Control: User permissions checked at service layer  Data Sanitization: XSS and injection attack prevention  Audit Trail: Complete logging of data modificationsScalability Patterns  Horizontal Scaling: Database read replicas for query distribution  Vertical Scaling: Resource scaling based on load patterns  Data Partitioning: Logical separation of user data  Load Balancing: Request distribution across multiple instancesThis data flow architecture ensures efficient, secure, and scalable data movement throughout the Idling.app ecosystem with proper error handling and performance optimization.",
      "url": "/diagrams/data-flow-architecture.mermaid.html"
    },{
      "title": "Database Schema ERD",
      "content": "🗄️ Database Schema Entity Relationship DiagramThis diagram shows the complete database schema for Idling.app, including all tables, relationships, foreign keys, and constraints derived from the migration scripts.erDiagram    %% Core User Management    users {        uuid id PK \"Primary Key\"        string email UK \"Unique email address\"        string username UK \"Unique username\"        string display_name \"Display name for UI\"        string avatar_url \"Profile picture URL\"        string bio \"User biography\"        timestamp email_verified_at \"Email verification timestamp\"        timestamp created_at \"Account creation time\"        timestamp updated_at \"Last profile update\"        boolean is_active \"Account status\"        string provider \"OAuth provider (twitch, google, etc)\"        string provider_id \"External provider user ID\"        json metadata \"Additional user metadata\"    }    %% Authentication &amp; Sessions    user_sessions {        uuid id PK \"Session identifier\"        uuid user_id FK \"References users.id\"        string session_token UK \"Unique session token\"        string access_token \"OAuth access token\"        string refresh_token \"OAuth refresh token\"        timestamp expires_at \"Session expiration\"        timestamp created_at \"Session start time\"        timestamp last_activity \"Last user activity\"        string ip_address \"Client IP address\"        string user_agent \"Client user agent\"        json session_data \"Additional session data\"    }    %% Emoji Categories System    emoji_categories {        int id PK \"Category identifier\"        string name UK \"Category name (e.g., 'smileys', 'animals')\"        string display_name \"Human-readable category name\"        string description \"Category description\"        string icon \"Category icon/emoji\"        int sort_order \"Display order\"        boolean is_active \"Category status\"        timestamp created_at \"Creation timestamp\"        timestamp updated_at \"Last update timestamp\"    }    %% Emoji Data    emojis {        uuid id PK \"Emoji identifier\"        int category_id FK \"References emoji_categories.id\"        string unicode \"Unicode representation\"        string shortcode \"Shortcode (e.g., :smile:)\"        string name \"Emoji name\"        string description \"Emoji description\"        json keywords \"Search keywords array\"        string skin_tone \"Skin tone variant\"        boolean is_custom \"Custom emoji flag\"        string image_url \"Custom emoji image URL\"        timestamp created_at \"Creation timestamp\"        timestamp updated_at \"Last update timestamp\"    }    %% User Emoji Favorites    user_emoji_favorites {        uuid id PK \"Favorite identifier\"        uuid user_id FK \"References users.id\"        uuid emoji_id FK \"References emojis.id\"        timestamp created_at \"When favorited\"        int usage_count \"How many times used\"        timestamp last_used \"Last usage timestamp\"    }    %% Idle Sessions &amp; Activities    idle_sessions {        uuid id PK \"Session identifier\"        uuid user_id FK \"References users.id\"        string session_name \"User-defined session name\"        string status \"Session status (active, paused, completed)\"        timestamp start_time \"Session start timestamp\"        timestamp end_time \"Session end timestamp\"        int total_duration \"Total session duration in seconds\"        json session_config \"Session configuration settings\"        json activity_log \"Activity tracking data\"        timestamp created_at \"Creation timestamp\"        timestamp updated_at \"Last update timestamp\"    }    %% Activity Tracking    user_activities {        uuid id PK \"Activity identifier\"        uuid user_id FK \"References users.id\"        uuid session_id FK \"References idle_sessions.id\"        string activity_type \"Type of activity (click, scroll, etc)\"        string activity_data \"Activity details (JSON)\"        timestamp occurred_at \"When activity occurred\"        string ip_address \"Client IP address\"        string user_agent \"Client user agent\"        json metadata \"Additional activity metadata\"    }    %% Notifications System    notifications {        uuid id PK \"Notification identifier\"        uuid user_id FK \"References users.id\"        string type \"Notification type\"        string title \"Notification title\"        string message \"Notification content\"        json data \"Additional notification data\"        boolean is_read \"Read status\"        timestamp read_at \"When marked as read\"        timestamp created_at \"Creation timestamp\"        timestamp expires_at \"Expiration timestamp\"        string priority \"Notification priority (low, medium, high)\"    }    %% User Preferences    user_preferences {        uuid id PK \"Preference identifier\"        uuid user_id FK \"References users.id\"        string preference_key \"Preference name\"        json preference_value \"Preference value (JSON)\"        timestamp created_at \"Creation timestamp\"        timestamp updated_at \"Last update timestamp\"    }    %% Application Settings    app_settings {        uuid id PK \"Setting identifier\"        string setting_key UK \"Setting name\"        json setting_value \"Setting value (JSON)\"        string description \"Setting description\"        string category \"Setting category\"        boolean is_public \"Public visibility\"        timestamp created_at \"Creation timestamp\"        timestamp updated_at \"Last update timestamp\"    }    %% Audit Logs    audit_logs {        uuid id PK \"Log entry identifier\"        uuid user_id FK \"References users.id (nullable)\"        string action \"Action performed\"        string entity_type \"Type of entity affected\"        string entity_id \"ID of affected entity\"        json old_values \"Previous values (JSON)\"        json new_values \"New values (JSON)\"        string ip_address \"Client IP address\"        string user_agent \"Client user agent\"        timestamp created_at \"Action timestamp\"        json metadata \"Additional audit metadata\"    }    %% API Keys &amp; Tokens    api_keys {        uuid id PK \"API key identifier\"        uuid user_id FK \"References users.id\"        string key_name \"Human-readable key name\"        string key_hash \"Hashed API key\"        string permissions \"Comma-separated permissions\"        timestamp expires_at \"Key expiration\"        timestamp last_used \"Last usage timestamp\"        boolean is_active \"Key status\"        timestamp created_at \"Creation timestamp\"        timestamp updated_at \"Last update timestamp\"    }    %% Relationships    users ||--o{ user_sessions : \"has_many\"    users ||--o{ user_emoji_favorites : \"has_many\"    users ||--o{ idle_sessions : \"has_many\"    users ||--o{ user_activities : \"has_many\"    users ||--o{ notifications : \"has_many\"    users ||--o{ user_preferences : \"has_many\"    users ||--o{ audit_logs : \"performed_by\"    users ||--o{ api_keys : \"owns\"    emoji_categories ||--o{ emojis : \"contains\"    emojis ||--o{ user_emoji_favorites : \"favorited_by\"    idle_sessions ||--o{ user_activities : \"contains\"    %% Indexes and Constraints Notes    %% - All foreign keys have corresponding indexes    %% - Email and username have unique constraints    %% - Session tokens have unique constraints    %% - Composite indexes on (user_id, created_at) for time-series queries    %% - Partial indexes on active records only    %% - GIN indexes on JSON columns for efficient querying🔍 Schema Analysis SummaryCore Entities  Users: Central user management with OAuth integration  Sessions: Comprehensive session tracking and management  Emojis: Complete emoji system with categories and favorites  Activities: Detailed user activity and idle session trackingKey Relationships  One-to-Many: Users have multiple sessions, activities, and preferences  Many-to-Many: Users can favorite multiple emojis (through junction table)  Hierarchical: Emoji categories contain multiple emojisSecurity &amp; Auditing  Audit Logs: Complete audit trail of all system changes  API Keys: Secure API access with permission management  Session Management: Comprehensive session security and trackingPerformance Considerations  Indexed Foreign Keys: All relationships properly indexed  Time-Series Optimization: Composite indexes on user_id + timestamps  JSON Column Indexes: GIN indexes for efficient JSON querying  Partial Indexes: Active records only for better performanceData Integrity  UUID Primary Keys: Distributed system friendly identifiers  Unique Constraints: Email, username, and session tokens  Cascading Deletes: Proper cleanup of related records  Nullable Foreign Keys: Flexible relationship modelingThis schema supports a comprehensive idle tracking application with robust user management, emoji integration, activity monitoring, and security features.",
      "url": "/diagrams/database-schema-erd.mermaid.html"
    },{
      "title": "Deployment & Infrastructure Architecture",
      "content": "🚀 Deployment &amp; Infrastructure ArchitectureThis diagram shows the actual deployment and infrastructure architecture for Idling.app based on the existing CI/CD configuration, GitHub Actions workflows, and deployment patterns.🔄 CI/CD Pipeline Architectureflowchart LR    subgraph \"📂 Source Control\"        S1[📝 Git Repository]        S2[🌿 Feature Branches]        S3[🔄 Pull Requests]        S4[🎯 Main Branch]    end    subgraph \"🏗️ GitHub Actions Workflow\"        W1[🔍 Quality Assurance]        W2[🧪 Test Suite]        W3[📊 Documentation Coverage]        W4[🎭 Playwright E2E]        W5[🔒 Security Checks]    end    subgraph \"📦 Build Process\"        B1[📋 Dependency Installation]        B2[🔧 TypeScript Compilation]        B3[📦 Next.js Build]        B4[🎨 Asset Optimization]        B5[🗄️ Database Migrations]    end    subgraph \"🚀 Deployment Targets\"        D1[🌐 Production Environment]        D2[🧪 Staging Environment]        D3[👨‍💻 Development Environment]        D4[📱 Preview Deployments]    end    S1 --&gt; S2    S2 --&gt; S3    S3 --&gt; W1    S4 --&gt; W1    W1 --&gt; W2    W1 --&gt; W3    W1 --&gt; W4    W1 --&gt; W5    W2 --&gt; B1    W3 --&gt; B2    W4 --&gt; B3    W5 --&gt; B4    B4 --&gt; B5    B5 --&gt; D1    B5 --&gt; D2    B5 --&gt; D3    B5 --&gt; D4    style S1 fill:#e3f2fd    style W1 fill:#c8e6c9    style B1 fill:#fff3e0    style D1 fill:#f3e5f5🧪 Testing Pipeline Structureflowchart TD    subgraph \"🔍 Code Quality Checks\"        Q1[📝 ESLint Analysis]        Q2[🎨 Prettier Formatting]        Q3[📊 TypeScript Validation]        Q4[🔒 Security Scanning]    end    subgraph \"🧪 Test Execution\"        T1[⚡ Unit Tests (Jest)]        T2[🔗 Integration Tests]        T3[🎭 E2E Tests (Playwright)]        T4[📸 Visual Regression Tests]    end    subgraph \"📊 Coverage Analysis\"        C1[📈 Code Coverage]        C2[📚 Documentation Coverage]        C3[🎯 Test Coverage Reports]        C4[📋 Quality Gates]    end    subgraph \"🚀 Deployment Readiness\"        R1[✅ All Tests Pass]        R2[📊 Coverage Thresholds Met]        R3[🔒 Security Cleared]        R4[🎯 Quality Standards Met]    end    Q1 --&gt; T1    Q2 --&gt; T1    Q3 --&gt; T2    Q4 --&gt; T3    T1 --&gt; C1    T2 --&gt; C2    T3 --&gt; C3    T4 --&gt; C4    C1 --&gt; R1    C2 --&gt; R2    C3 --&gt; R3    C4 --&gt; R4    style Q1 fill:#e3f2fd    style T1 fill:#c8e6c9    style C1 fill:#fff3e0    style R1 fill:#f3e5f5🏗️ Application Architecture Stackgraph TB    subgraph \"🌐 Frontend Layer\"        F1[⚛️ React 18]        F2[🔄 Next.js 14]        F3[🎨 Tailwind CSS]        F4[📱 Progressive Web App]    end    subgraph \"🔗 API Layer\"        A1[🌐 Next.js API Routes]        A2[🔑 Auth.js Integration]        A3[🛡️ Middleware Chain]        A4[📊 Request/Response Handling]    end    subgraph \"🗄️ Database Layer\"        D1[🐘 PostgreSQL]        D2[📊 Database Migrations]        D3[🔍 Query Optimization]        D4[💾 Connection Pooling]    end    subgraph \"☁️ Infrastructure Services\"        I1[⚡ Redis Caching]        I2[📁 File Storage]        I3[📧 Email Services]        I4[📊 Analytics Services]    end    F1 --&gt; F2    F2 --&gt; F3    F3 --&gt; F4    F4 --&gt; A1    A1 --&gt; A2    A2 --&gt; A3    A3 --&gt; A4    A4 --&gt; D1    D1 --&gt; D2    D2 --&gt; D3    D3 --&gt; D4    A4 --&gt; I1    A4 --&gt; I2    A4 --&gt; I3    A4 --&gt; I4    style F1 fill:#e3f2fd    style A1 fill:#c8e6c9    style D1 fill:#fff3e0    style I1 fill:#f3e5f5🔄 Environment Configurationflowchart LR    subgraph \"🌍 Environment Variables\"        E1[🔑 Authentication Secrets]        E2[🗄️ Database Configuration]        E3[📧 Email Service Config]        E4[📊 Analytics Configuration]    end    subgraph \"📄 Configuration Files\"        C1[📋 next.config.js]        C2[🎨 tailwind.config.js]        C3[🧪 playwright.config.ts]        C4[📦 package.json]    end    subgraph \"🔧 Runtime Configuration\"        R1[🚀 Build-time Variables]        R2[🔄 Runtime Environment]        R3[🎯 Feature Flags]        R4[📊 Performance Settings]    end    subgraph \"🛡️ Security Configuration\"        S1[🔒 Secret Management]        S2[🛡️ CORS Settings]        S3[🔐 CSP Headers]        S4[🎭 Rate Limiting]    end    E1 --&gt; R1    E2 --&gt; R2    E3 --&gt; R3    E4 --&gt; R4    C1 --&gt; R1    C2 --&gt; R2    C3 --&gt; R3    C4 --&gt; R4    R1 --&gt; S1    R2 --&gt; S2    R3 --&gt; S3    R4 --&gt; S4    style E1 fill:#e3f2fd    style C1 fill:#c8e6c9    style R1 fill:#fff3e0    style S1 fill:#f3e5f5📊 Monitoring &amp; Observabilitygraph TB    subgraph \"📈 Application Monitoring\"        M1[⚡ Performance Metrics]        M2[🚨 Error Tracking]        M3[📊 User Analytics]        M4[🔍 Debug Logging]    end    subgraph \"🏗️ Infrastructure Monitoring\"        I1[🖥️ Server Health]        I2[🗄️ Database Performance]        I3[⚡ Cache Hit Rates]        I4[🌐 Network Latency]    end    subgraph \"🔔 Alerting System\"        A1[🚨 Critical Alerts]        A2[⚠️ Warning Notifications]        A3[📊 Performance Degradation]        A4[🔒 Security Incidents]    end    subgraph \"📋 Reporting Dashboard\"        R1[📊 Real-time Metrics]        R2[📈 Historical Trends]        R3[🎯 SLA Monitoring]        R4[📋 Health Checks]    end    M1 --&gt; A1    M2 --&gt; A2    M3 --&gt; A3    M4 --&gt; A4    I1 --&gt; A1    I2 --&gt; A2    I3 --&gt; A3    I4 --&gt; A4    A1 --&gt; R1    A2 --&gt; R2    A3 --&gt; R3    A4 --&gt; R4    style M1 fill:#e3f2fd    style I1 fill:#c8e6c9    style A1 fill:#fff3e0    style R1 fill:#f3e5f5🔒 Security &amp; Compliance PipelinesequenceDiagram    participant Dev as 👨‍💻 Developer    participant Git as 📂 Git Repository    participant CI as 🔄 GitHub Actions    participant Security as 🛡️ Security Scan    participant Deploy as 🚀 Deployment    participant Monitor as 📊 Monitoring    Dev-&gt;&gt;Git: Push Code Changes    Git-&gt;&gt;CI: Trigger Workflow    CI-&gt;&gt;Security: Run Security Scans    Security-&gt;&gt;Security: Dependency Audit    Security-&gt;&gt;Security: Code Analysis    Security-&gt;&gt;Security: Secret Detection    alt Security Pass        Security-&gt;&gt;CI: ✅ Security Cleared        CI-&gt;&gt;Deploy: Proceed with Deployment        Deploy-&gt;&gt;Monitor: Update Monitoring        Monitor-&gt;&gt;Dev: Deployment Success    else Security Fail        Security-&gt;&gt;CI: ❌ Security Issues Found        CI-&gt;&gt;Dev: Block Deployment        CI-&gt;&gt;Dev: Security Report    end🎯 Deployment Strategy Patternsflowchart TD    subgraph \"🚀 Deployment Types\"        D1[🎯 Production Deployment]        D2[🧪 Staging Deployment]        D3[👀 Preview Deployment]        D4[🔄 Rollback Deployment]    end    subgraph \"🎛️ Deployment Triggers\"        T1[🎯 Main Branch Push]        T2[🔄 Pull Request]        T3[🏷️ Release Tag]        T4[🚨 Hotfix Emergency]    end    subgraph \"✅ Deployment Validation\"        V1[🧪 Smoke Tests]        V2[🔍 Health Checks]        V3[📊 Performance Validation]        V4[🔒 Security Verification]    end    subgraph \"📊 Post-Deployment\"        P1[📈 Metrics Collection]        P2[🔔 Notification Alerts]        P3[📋 Deployment Logs]        P4[🎯 Success Validation]    end    T1 --&gt; D1    T2 --&gt; D3    T3 --&gt; D1    T4 --&gt; D4    D1 --&gt; V1    D2 --&gt; V2    D3 --&gt; V3    D4 --&gt; V4    V1 --&gt; P1    V2 --&gt; P2    V3 --&gt; P3    V4 --&gt; P4    style D1 fill:#e3f2fd    style T1 fill:#c8e6c9    style V1 fill:#fff3e0    style P1 fill:#f3e5f5🔍 Infrastructure AnalysisCI/CD Implementation  GitHub Actions: Automated workflow execution on code changes  Quality Gates: Comprehensive testing and validation before deployment  Parallel Execution: Matrix testing across multiple environments  Artifact Management: Build artifacts cached and reused across jobsTesting Strategy  Multi-layer Testing: Unit, integration, and E2E test coverage  Playwright E2E: Cross-browser testing with parallel execution  Documentation Coverage: Automated documentation quality validation  Visual Regression: UI consistency verificationDeployment Architecture  Next.js SSR/SSG: Server-side rendering with static generation  Progressive Web App: PWA capabilities for mobile experience  Database Migrations: Automated schema updates with version control  Environment Isolation: Separate configurations for different environmentsSecurity Implementation  Secret Management: Secure handling of sensitive configuration  Dependency Scanning: Automated vulnerability detection  Code Analysis: Static security analysis in CI pipeline  Access Control: Role-based permissions for deployment operationsMonitoring &amp; Observability  Performance Tracking: Real-time application performance monitoring  Error Tracking: Comprehensive error logging and alerting  Health Checks: Automated system health validation  Audit Logging: Complete audit trail of deployment activitiesOperational Excellence  Infrastructure as Code: Configuration managed through version control  Automated Rollbacks: Quick recovery from deployment issues  Blue-Green Deployment: Zero-downtime deployment strategy  Disaster Recovery: Backup and recovery proceduresThis infrastructure architecture provides a robust, scalable, and secure foundation for the Idling.app deployment pipeline with comprehensive automation and monitoring capabilities.",
      "url": "/diagrams/deployment-infrastructure-cicd.mermaid.html"
    },{
      "title": "Documentation Coverage System",
      "content": "📚 Documentation Coverage SystemOur automated documentation coverage system ensures comprehensive documentation across all source code files using industry-standard practices and multi-format reporting.🎯 System OverviewThe documentation coverage system operates across three main Git events, analyzing all source files and generating detailed reports with downloadable artifacts.graph TD    A[Git Event] --&gt; B{Event Type}    B --&gt;|Local Commit| C[Pre-commit Hook]    B --&gt;|PR Creation/Update| D[GitHub Actions - PR]    B --&gt;|Push to Master| E[GitHub Actions - Master]    C --&gt; C1[Run check-docs-coverage.py]    C1 --&gt; C2[Analyze ALL Source Files]    C2 --&gt; C3[Update README.md Badge]    C3 --&gt; C4[Create Jekyll Badge Files]    C4 --&gt; C5[Generate Artifacts]    D --&gt; D1[documentation-coverage Job]    D1 --&gt; D2[Analyze ALL Source Files]    D2 --&gt; D3[Generate Reports]    D3 --&gt; D4[Upload Artifacts]    D4 --&gt; D5[Comment on PR]    D5 --&gt; D6[Update PR Description]    E --&gt; E1[docs.yml Workflow]    E1 --&gt; E2[Build Jekyll Site]    E2 --&gt; E3[Deploy to GitHub Pages]    E3 --&gt; E4[Update Live Badge URLs]    style C fill:#e1f5fe    style D fill:#f3e5f5    style E fill:#e8f5e8🔍 Files AnalyzedOur system comprehensively analyzes all source files across the codebase:graph LR    A[Source Files] --&gt; B[Components]    A --&gt; C[Pages &amp; Layouts]    A --&gt; D[API Routes]    A --&gt; E[Services &amp; Utils]    A --&gt; F[Hooks &amp; Types]    A --&gt; G[Root Level]    B --&gt; B1[\"src/components/**/*.tsx&lt;br/&gt;src/app/**/components/**/*.tsx&lt;br/&gt;src/lib/components/**/*.tsx\"]    C --&gt; C1[\"src/app/**/page.tsx&lt;br/&gt;src/app/**/layout.tsx&lt;br/&gt;src/app/**/loading.tsx&lt;br/&gt;src/app/**/error.tsx\"]    D --&gt; D1[\"src/app/api/**/route.ts\"]    E --&gt; E1[\"src/lib/services/**/*.ts&lt;br/&gt;src/lib/utils/**/*.ts&lt;br/&gt;src/app/**/services/**/*.ts\"]    F --&gt; F1[\"src/lib/hooks/**/*.ts&lt;br/&gt;src/lib/types/**/*.ts&lt;br/&gt;src/app/**/hooks/**/*.ts\"]    G --&gt; G1[\"src/*.ts&lt;br/&gt;src/*.tsx&lt;br/&gt;src/middleware/**/*.ts\"]    style B1 fill:#e3f2fd    style C1 fill:#f1f8e9    style D1 fill:#fff3e0    style E1 fill:#fce4ec    style F1 fill:#e8eaf6    style G1 fill:#f9fbe7📁 Complete File Pattern Analysis            Category      Pattern      Description                  Components      src/components/**/*.tsx      Standalone reusable components                     src/app/**/components/**/*.tsx      App-specific components                     src/lib/components/**/*.tsx      Library components              Pages &amp; Layouts      src/app/**/page.tsx      Next.js app pages                     src/app/**/layout.tsx      Layout components                     src/app/**/loading.tsx      Loading states                     src/app/**/error.tsx      Error boundaries                     src/app/**/not-found.tsx      404 pages              API Routes      src/app/api/**/route.ts      API route handlers              Services      src/lib/services/**/*.ts      Core service layer                     src/app/**/services/**/*.ts      App-specific services              Utilities      src/lib/utils/**/*.ts      Utility functions                     src/app/**/utils/**/*.ts      App-specific utilities              Hooks      src/lib/hooks/**/*.ts      Custom React hooks                     src/app/**/hooks/**/*.ts      App-specific hooks              Types      src/lib/types/**/*.ts      Type definitions                     src/app/**/types/**/*.ts      App-specific types              Constants      src/app/**/constants/**/*.ts      Constants              Root Level      src/*.ts, src/*.tsx      Root-level files              Middleware      src/middleware/**/*.ts      Middleware functions      🚀 Event-Driven Analysis🔄 Local Commits (Pre-commit Hook)Trigger: Every git commitsequenceDiagram    participant Dev as Developer    participant Hook as Pre-commit Hook    participant Script as check-docs-coverage.py    participant FS as File System    Dev-&gt;&gt;Hook: git commit    Hook-&gt;&gt;Script: Execute analysis    Script-&gt;&gt;FS: Analyze all source files    Script-&gt;&gt;FS: Check co-located docs    Script-&gt;&gt;FS: Generate JSON/HTML/CSV reports    Script-&gt;&gt;Hook: Return coverage data    Hook-&gt;&gt;FS: Update README.md badge    Hook-&gt;&gt;FS: Create Jekyll badge files    Hook-&gt;&gt;FS: Generate artifacts    Hook-&gt;&gt;Dev: Commit successful (non-blocking)Features:  ✅ Real-time badge updates in README.md  ✅ Local artifact generation in DOCS/coverage-artifacts/  ✅ Jekyll badge file creation for documentation site  ✅ Non-blocking - won’t fail commits  ✅ Comprehensive analysis of all source files🔀 Pull Requests (GitHub Actions)Trigger: PR opened, synchronized, or reopenedsequenceDiagram    participant Dev as Developer    participant GH as GitHub Actions    participant Job as documentation-coverage    participant Artifacts as GitHub Artifacts    participant PR as Pull Request    Dev-&gt;&gt;GH: Create/Update PR    GH-&gt;&gt;Job: Trigger documentation-coverage job    Job-&gt;&gt;Job: Analyze all source files    Job-&gt;&gt;Job: Generate multi-format reports    Job-&gt;&gt;Artifacts: Upload coverage artifacts    Job-&gt;&gt;PR: Add detailed comment    Job-&gt;&gt;PR: Update PR description with badges    Job-&gt;&gt;Dev: Non-blocking completionFeatures:  ✅ Multi-format reports (JSON, Markdown, HTML, CSV)  ✅ GitHub artifact uploads with download links  ✅ Automated PR comments with detailed coverage  ✅ PR description updates with badge integration  ✅ Non-blocking - uses warnings instead of failures🚀 Master Branch (GitHub Actions)Trigger: Push to main/master branchsequenceDiagram    participant Dev as Developer    participant GH as GitHub Actions    participant Jekyll as Jekyll Build    participant Pages as GitHub Pages    participant Site as Live Documentation    Dev-&gt;&gt;GH: Push to master    GH-&gt;&gt;Jekyll: Trigger docs.yml workflow    Jekyll-&gt;&gt;Jekyll: Build Jekyll site    Jekyll-&gt;&gt;Jekyll: Include coverage artifacts    Jekyll-&gt;&gt;Pages: Deploy to GitHub Pages    Pages-&gt;&gt;Site: Update live documentation    Site-&gt;&gt;Site: Live badge URLs updatedFeatures:  ✅ Live documentation deployment to GitHub Pages  ✅ Updated badge URLs pointing to live site  ✅ Artifact deployment for public access  ✅ Jekyll site integration with coverage data📊 Documentation SourcesOur system analyzes documentation from multiple sources:graph TD    A[Documentation Sources] --&gt; B[Co-located Documentation]    A --&gt; C[Centralized Documentation]    B --&gt; B1[\"index.md&lt;br/&gt;README.md&lt;br/&gt;docs.md&lt;br/&gt;documentation.md\"]    C --&gt; C1[\"docs/**/*.md&lt;br/&gt;jekyll/**/*.md&lt;br/&gt;DOCS/**/*.md\"]    B1 --&gt; D[File-specific Documentation]    C1 --&gt; E[Project-wide Documentation]    D --&gt; F[Quality Analysis]    E --&gt; F    F --&gt; G[Coverage Calculation]    G --&gt; H[Report Generation]    style B fill:#e1f5fe    style C fill:#f3e5f5    style F fill:#fff3e0    style G fill:#e8f5e8🎯 Quality Standards📏 Coverage Thresholds            Level      Minimum Coverage      Quality Score                  Production      85%      0.7              Development      70%      0.6              Warning      50%      0.5      📝 Required Documentation Sectionsgraph LR    A[File Type] --&gt; B[Required Sections]    A --&gt; A1[API Route]    A --&gt; A2[Component]    A --&gt; A3[Service]    A --&gt; A4[Utility]    A --&gt; A5[Hook]    A1 --&gt; B1[\"Overview&lt;br/&gt;Usage&lt;br/&gt;API Reference&lt;br/&gt;Examples\"]    A2 --&gt; B2[\"Overview&lt;br/&gt;Props&lt;br/&gt;Usage&lt;br/&gt;Examples\"]    A3 --&gt; B3[\"Overview&lt;br/&gt;Usage&lt;br/&gt;API Reference&lt;br/&gt;Configuration\"]    A4 --&gt; B4[\"Overview&lt;br/&gt;Usage&lt;br/&gt;Examples\"]    A5 --&gt; B5[\"Overview&lt;br/&gt;Usage&lt;br/&gt;Examples&lt;br/&gt;API Reference\"]    style A1 fill:#e3f2fd    style A2 fill:#f1f8e9    style A3 fill:#fff3e0    style A4 fill:#fce4ec    style A5 fill:#e8eaf6📊 Word Count Requirements            Priority      Minimum Words      Description                  Critical      200 words      Core APIs, main components              High      150 words      Important utilities, auth              Medium      100 words      Helper functions, secondary components              Low      50 words      Internal utilities, dev tools      📥 Available Reports📋 Interactive HTML Report  Features: Visual interface, filtering, search  Best for: Quick review, presentations  Download: Available in artifacts or /coverage-artifacts/📊 CSV Report  Features: Structured data, Excel-compatible  Best for: Analysis, tracking, reporting  Download: Available in artifacts or /coverage-artifacts/📄 JSON Report  Features: Structured data, API integration  Best for: Automation, custom analysis  Download: Available in GitHub Actions artifacts📝 Markdown Report  Features: Human-readable, GitHub-compatible  Best for: Documentation, PR reviews  Download: Available in GitHub Actions artifacts🔧 ConfigurationThe system is configured via scripts/docs-coverage-config.json:123456789101112{  \"documentation_standards\": {    \"minimum_coverage_percentage\": 85.0,    \"minimum_quality_score\": 0.7  },  \"code_analysis\": {    \"file_patterns\": {      \"components\": \"src/components/**/*.tsx\",      \"api_routes\": \"src/app/api/**/route.ts\"    }  }}🚀 Manual UsageCommand Line Interface12345678# Generate HTML reportpython scripts/check-docs-coverage.py --format html# Generate CSV reportpython scripts/check-docs-coverage.py --format csv# Generate all formatspython scripts/check-docs-coverage.py --format allLocal Development12345# Check coverage before commitpython scripts/check-docs-coverage.py --format console# Generate report for specific formatpython scripts/check-docs-coverage.py --format html --output my-report.html📈 Understanding MetricsCoverage Percentage1Coverage = (Documented Files / Total Files) × 100Quality Score1Quality = Average of all file documentation quality scoresPriority DistributionFiles are categorized by complexity and importance:  Critical: Core APIs, main components  High: Important utilities, authentication  Medium: Helper functions, secondary components  Low: Internal utilities, development tools🔄 Continuous ImprovementWorkflow Integration  Pre-commit: Immediate feedback on documentation changes  PR Review: Detailed analysis with downloadable reports  Deployment: Live documentation with updated metricsBest Practices  ✅ Write documentation alongside code  ✅ Use co-located documentation files  ✅ Include all required sections  ✅ Meet minimum word count requirements  ✅ Review coverage reports regularly📊 Current Status  📥 Download Latest ReportsThis documentation is automatically updated with each deployment. For technical details, see the configuration file.",
      "url": "/documentation-coverage/"
    },{
      "title": "Error Handling & Recovery Patterns",
      "content": "🚨 Error Handling &amp; Recovery PatternsThis diagram shows the comprehensive error handling and recovery patterns in Idling.app, including error propagation, recovery strategies, and resilience patterns based on the actual implementation.🔄 Error Classification &amp; Handling Flowflowchart TD    subgraph \"⚠️ Error Sources\"        E1[🌐 Network Errors]        E2[🔑 Authentication Errors]        E3[📝 Validation Errors]        E4[🗄️ Database Errors]        E5[🏢 Business Logic Errors]        E6[🎨 UI/Component Errors]        E7[🔧 Configuration Errors]        E8[🚀 Deployment Errors]    end    subgraph \"🎯 Error Classification\"        C1{🔍 Error Type?}        C2[🚨 Critical]        C3[⚠️ Warning]        C4[📝 Info]        C5[🐛 Debug]    end    subgraph \"📊 Error Processing\"        P1[📝 Error Logging]        P2[📊 Error Analytics]        P3[🔔 Alert Generation]        P4[📋 Error Reporting]    end    subgraph \"🛠️ Recovery Actions\"        R1[🔄 Automatic Retry]        R2[🔄 Fallback Strategy]        R3[👤 User Notification]        R4[🛠️ Manual Recovery]        R5[🚨 Emergency Response]    end    E1 --&gt; C1    E2 --&gt; C1    E3 --&gt; C1    E4 --&gt; C1    E5 --&gt; C1    E6 --&gt; C1    E7 --&gt; C1    E8 --&gt; C1    C1 --&gt;|Severity: High| C2    C1 --&gt;|Severity: Medium| C3    C1 --&gt;|Severity: Low| C4    C1 --&gt;|Severity: Trace| C5    C2 --&gt; P1    C3 --&gt; P1    C4 --&gt; P1    C5 --&gt; P1    P1 --&gt; P2    P2 --&gt; P3    P3 --&gt; P4    C2 --&gt; R5    C3 --&gt; R1    C3 --&gt; R2    C4 --&gt; R3    C5 --&gt; R4    R1 --&gt; P2    R2 --&gt; P2    R3 --&gt; P2    R4 --&gt; P2    R5 --&gt; P2    style E1 fill:#ffcdd2    style C2 fill:#ff9800    style P1 fill:#e3f2fd    style R1 fill:#c8e6c9🔄 Retry Logic &amp; Circuit Breaker PatternstateDiagram-v2    [*] --&gt; Closed    state \"🟢 Circuit Closed\" as Closed {        [*] --&gt; Normal        Normal --&gt; Retry : Failure        Retry --&gt; Normal : Success        Retry --&gt; FailureCount : Failure        FailureCount --&gt; Open : Threshold Exceeded    }    state \"🔴 Circuit Open\" as Open {        [*] --&gt; Blocking        Blocking --&gt; HalfOpen : Timeout Elapsed    }    state \"🟡 Circuit Half-Open\" as HalfOpen {        [*] --&gt; Testing        Testing --&gt; Closed : Success        Testing --&gt; Open : Failure    }    Closed --&gt; Open : Too Many Failures    Open --&gt; HalfOpen : Recovery Timer    HalfOpen --&gt; Closed : Health Check Pass    HalfOpen --&gt; Open : Health Check Fail    note right of Closed        Normal operation        Failures trigger retries        Track failure count    end note    note right of Open        Block all requests        Return cached/fallback data        Start recovery timer    end note    note right of HalfOpen        Allow limited requests        Test system health        Quick fail or recover    end note🌐 Network Error Recovery StrategiessequenceDiagram    participant Client as 🖥️ Client    participant Retry as 🔄 Retry Logic    participant Cache as ⚡ Cache    participant API as 🌐 API Server    participant Fallback as 🔄 Fallback Service    participant UI as 🎨 User Interface    Client-&gt;&gt;API: Initial Request    alt Network Success        API-&gt;&gt;Client: 200 OK Response        Client-&gt;&gt;Cache: Update Cache        Client-&gt;&gt;UI: Update UI    else Network Failure        API-&gt;&gt;Client: Network Error        Client-&gt;&gt;Retry: Trigger Retry Logic        loop Exponential Backoff            Retry-&gt;&gt;API: Retry Request            alt Retry Success                API-&gt;&gt;Retry: 200 OK                Retry-&gt;&gt;Client: Success Response                Client-&gt;&gt;Cache: Update Cache                Client-&gt;&gt;UI: Update UI            else Retry Failure                API-&gt;&gt;Retry: Error                Note over Retry: Wait (2^attempt * base_delay)            end        end        alt Max Retries Exceeded            Retry-&gt;&gt;Cache: Check Cache            alt Cache Hit                Cache-&gt;&gt;Client: Cached Data                Client-&gt;&gt;UI: Show Cached Data + Warning            else Cache Miss                Retry-&gt;&gt;Fallback: Use Fallback                Fallback-&gt;&gt;Client: Fallback Response                Client-&gt;&gt;UI: Show Fallback + Error            end        end    end🔑 Authentication Error Handlingflowchart LR    subgraph \"🔐 Auth Error Types\"        A1[🚫 Invalid Token]        A2[⏰ Expired Token]        A3[🔒 Insufficient Permissions]        A4[🌐 OAuth Provider Error]        A5[🗄️ Session Not Found]    end    subgraph \"🎯 Detection &amp; Classification\"        D1[📡 API Middleware]        D2[🔍 Token Validation]        D3[⏰ Expiry Check]        D4[🛡️ Permission Check]    end    subgraph \"🛠️ Recovery Strategies\"        R1[🔄 Silent Token Refresh]        R2[🔐 Re-authentication Flow]        R3[🚪 Redirect to Login]        R4[📝 Permission Request]        R5[⚡ Cached Fallback]    end    subgraph \"👤 User Experience\"        U1[🔄 Seamless Refresh]        U2[📝 Login Prompt]        U3[⚠️ Permission Denied]        U4[📱 Offline Mode]    end    A1 --&gt; D1    A2 --&gt; D2    A3 --&gt; D4    A4 --&gt; D1    A5 --&gt; D3    D1 --&gt; R2    D2 --&gt; R1    D3 --&gt; R3    D4 --&gt; R4    R1 --&gt; U1    R2 --&gt; U2    R3 --&gt; U2    R4 --&gt; U3    R5 --&gt; U4    style A1 fill:#ffcdd2    style D1 fill:#fff3e0    style R1 fill:#c8e6c9    style U1 fill:#e3f2fd🗄️ Database Error Recovery Patternsflowchart TD    subgraph \"💾 Database Errors\"        DB1[🔌 Connection Lost]        DB2[⏰ Query Timeout]        DB3[🔒 Lock Timeout]        DB4[📊 Constraint Violation]        DB5[💾 Storage Full]        DB6[🔄 Deadlock Detected]    end    subgraph \"🔍 Error Detection\"        E1[📡 Connection Monitor]        E2[⏰ Query Timer]        E3[🔒 Lock Manager]        E4[📋 Validation Layer]    end    subgraph \"🛠️ Recovery Actions\"        R1[🔄 Connection Retry]        R2[⚡ Connection Pool Reset]        R3[🔄 Query Retry]        R4[📊 Transaction Rollback]        R5[⚡ Cache Fallback]        R6[📝 Graceful Degradation]    end    subgraph \"📊 Monitoring &amp; Alerts\"        M1[📈 Health Metrics]        M2[🔔 Alert System]        M3[📋 Error Dashboard]        M4[📊 Performance Tracking]    end    DB1 --&gt; E1    DB2 --&gt; E2    DB3 --&gt; E3    DB4 --&gt; E4    DB5 --&gt; E1    DB6 --&gt; E3    E1 --&gt; R1    E1 --&gt; R2    E2 --&gt; R3    E3 --&gt; R4    E4 --&gt; R6    R1 --&gt; M1    R2 --&gt; M2    R3 --&gt; M3    R4 --&gt; M4    R5 --&gt; M1    R6 --&gt; M2    M1 --&gt; M2    M2 --&gt; M3    M3 --&gt; M4    style DB1 fill:#ffcdd2    style E1 fill:#fff3e0    style R1 fill:#c8e6c9    style M1 fill:#e3f2fd🎨 Frontend Error BoundariesclassDiagram    class ErrorBoundary {        +state: ErrorState        +componentDidCatch(error, errorInfo)        +static getDerivedStateFromError(error)        +render()        +logError(error, errorInfo)        +reportError(error)    }    class ErrorState {        +hasError: boolean        +error: Error        +errorInfo: ErrorInfo        +errorId: string        +retryCount: number    }    class ErrorFallback {        +error: Error        +resetError: Function        +render()        +handleRetry()        +handleReport()    }    class ErrorReporter {        +reportError(error, context)        +sendToAnalytics(error)        +logToConsole(error)        +notifyUser(error)    }    class RecoveryStrategy {        +canRecover(error): boolean        +recover(error): Promise        +getRetryDelay(attempt): number        +shouldRetry(error, attempt): boolean    }    ErrorBoundary --&gt; ErrorState    ErrorBoundary --&gt; ErrorFallback    ErrorBoundary --&gt; ErrorReporter    ErrorBoundary --&gt; RecoveryStrategy    ErrorFallback --&gt; RecoveryStrategy    ErrorReporter --&gt; RecoveryStrategy📝 Validation Error Handlingflowchart LR    subgraph \"📝 Input Sources\"        I1[👤 User Forms]        I2[📡 API Requests]        I3[📄 File Uploads]        I4[🔗 URL Parameters]    end    subgraph \"🔍 Validation Layers\"        V1[🎨 Frontend Validation]        V2[📡 API Validation]        V3[🏢 Business Logic Validation]        V4[🗄️ Database Constraints]    end    subgraph \"⚠️ Error Types\"        E1[📝 Format Errors]        E2[📏 Length Errors]        E3[🔢 Type Errors]        E4[📋 Required Field Errors]        E5[🔒 Security Violations]    end    subgraph \"🛠️ Error Handling\"        H1[🎨 Inline Field Errors]        H2[📋 Form Summary Errors]        H3[🔔 Toast Notifications]        H4[📊 Error Analytics]    end    I1 --&gt; V1    I2 --&gt; V2    I3 --&gt; V2    I4 --&gt; V2    V1 --&gt; E1    V2 --&gt; E2    V3 --&gt; E3    V4 --&gt; E4    V2 --&gt; E5    E1 --&gt; H1    E2 --&gt; H2    E3 --&gt; H3    E4 --&gt; H1    E5 --&gt; H4    H1 --&gt; H4    H2 --&gt; H4    H3 --&gt; H4    style I1 fill:#e3f2fd    style V1 fill:#c8e6c9    style E1 fill:#ffcdd2    style H1 fill:#fff3e0🔔 Error Monitoring &amp; Alertingjourney    title Error Detection &amp; Response Journey    section Error Detection      Error Occurs           : 1: System      Error Logged           : 3: Logger      Error Classified       : 4: Classifier      Error Analyzed         : 5: Analytics    section Alert Generation      Threshold Checked      : 4: Monitor      Alert Triggered        : 5: AlertManager      Notification Sent      : 4: NotificationService      Team Notified          : 3: Team    section Investigation      Error Reviewed         : 4: Developer      Root Cause Found       : 5: Investigation      Fix Implemented        : 5: Developer      Fix Deployed           : 4: CI/CD    section Recovery      System Recovered       : 5: System      Monitoring Resumed     : 4: Monitor      Metrics Updated        : 3: Analytics      Incident Closed        : 5: Team🚨 Critical Error Response Flowflowchart TD    A[🚨 Critical Error Detected] --&gt; B{🔍 Error Severity?}    B --&gt;|🔴 Critical| C[🚨 Immediate Alert]    B --&gt;|🟡 High| D[⚠️ Priority Alert]    B --&gt;|🟢 Medium| E[📝 Standard Log]    C --&gt; F[📞 On-Call Engineer]    C --&gt; G[🔔 Slack Alert]    C --&gt; H[📧 Email Alert]    D --&gt; I[🔔 Team Notification]    D --&gt; J[📊 Dashboard Update]    E --&gt; K[📋 Error Log]    E --&gt; L[📊 Metrics Update]    F --&gt; M{🛠️ Can Auto-Recover?}    I --&gt; M    M --&gt;|✅ Yes| N[🔄 Execute Recovery]    M --&gt;|❌ No| O[👤 Manual Intervention]    N --&gt; P[✅ Recovery Successful?]    O --&gt; Q[🛠️ Manual Fix Applied]    P --&gt;|✅ Yes| R[📈 System Restored]    P --&gt;|❌ No| S[🚨 Escalate Alert]    Q --&gt; T[🔍 Verify Fix]    S --&gt; U[👥 Senior Engineer]    T --&gt; R    U --&gt; V[🛠️ Emergency Response]    V --&gt; R    R --&gt; W[📊 Post-Incident Review]    W --&gt; X[📝 Documentation Update]    X --&gt; Y[🔄 Process Improvement]    style A fill:#ffcdd2    style C fill:#ff9800    style F fill:#f44336    style R fill:#4caf50🔄 Graceful Degradation Strategiesgraph TB    subgraph \"🎯 Service Availability\"        S1[🟢 Full Service]        S2[🟡 Partial Service]        S3[🟠 Limited Service]        S4[🔴 Emergency Mode]    end    subgraph \"🛠️ Degradation Levels\"        D1[📊 Disable Analytics]        D2[⚡ Use Cache Only]        D3[🔒 Read-Only Mode]        D4[📱 Offline Mode]    end    subgraph \"👤 User Experience\"        U1[✨ Full Features]        U2[⚠️ Feature Warnings]        U3[📝 Limited Features]        U4[💾 Cached Content]    end    subgraph \"🔄 Recovery Actions\"        R1[🔍 Health Checks]        R2[⚡ Service Restart]        R3[🔄 Gradual Recovery]        R4[📊 Full Restoration]    end    S1 --&gt; S2    S2 --&gt; S3    S3 --&gt; S4    S2 --&gt; D1    S3 --&gt; D2    S3 --&gt; D3    S4 --&gt; D4    D1 --&gt; U2    D2 --&gt; U3    D3 --&gt; U3    D4 --&gt; U4    S4 --&gt; R1    R1 --&gt; R2    R2 --&gt; R3    R3 --&gt; R4    R4 --&gt; S1    style S1 fill:#4caf50    style S2 fill:#ffeb3b    style S3 fill:#ff9800    style S4 fill:#f44336    style R4 fill:#4caf50🔍 Error Handling AnalysisError Prevention Strategies  Input Validation: Multi-layer validation at frontend, API, and database levels  Type Safety: TypeScript for compile-time error prevention  Code Reviews: Peer review process to catch potential issues  Automated Testing: Comprehensive test coverage to prevent regressionsError Detection Mechanisms  Error Boundaries: React error boundaries for component-level error handling  Global Error Handlers: Window error handlers for unhandled exceptions  API Monitoring: Health checks and response monitoring  Performance Monitoring: Real-time performance and error rate trackingRecovery Patterns  Circuit Breaker: Prevent cascading failures with circuit breaker pattern  Retry Logic: Exponential backoff with jitter for transient failures  Fallback Strategies: Cached data and alternative service endpoints  Graceful Degradation: Progressive feature disabling under stressUser Experience Considerations  Progressive Enhancement: Core functionality works even with errors  Informative Messages: Clear, actionable error messages for users  Offline Support: PWA capabilities for offline error handling  Recovery Guidance: Help users understand and resolve issuesMonitoring &amp; Observability  Error Aggregation: Centralized error collection and analysis  Real-time Alerts: Immediate notification of critical issues  Error Analytics: Trend analysis and pattern recognition  Performance Impact: Correlation between errors and performance metricsThis error handling architecture ensures robust, resilient operation of Idling.app with comprehensive error prevention, detection, and recovery capabilities.",
      "url": "/diagrams/error-handling-recovery-patterns.mermaid.html"
    },{
      "title": "Architecture Diagrams",
      "content": "📊 Architecture DiagramsWelcome to the comprehensive visual documentation of Idling.app’s architecture. These interactive Mermaid diagrams provide detailed insights into system design, data flow, and implementation patterns.🏗️ System Architecture🏛️ System Architecture OverviewComplete full-stack architecture showing all layers from user interface to database storage, including technology stack and component relationships.🗄️ Database Schema ERDComprehensive entity relationship diagram showing all 12 database tables, relationships, constraints, and data flow patterns.🏢 Service Architecture &amp; Business LogicService layer architecture showing business logic patterns, service interactions, and implementation structure.🔐 Security &amp; Authentication🔑 Authentication &amp; Authorization FlowOAuth flows, session management, security boundaries, threat modeling, and role-based access control patterns.🚨 Error Handling &amp; Recovery PatternsComprehensive error handling strategies, recovery patterns, circuit breakers, and resilience mechanisms.🌐 API &amp; Data Flow🌐 API Routes ArchitectureComplete API structure, middleware chains, request/response flows, security matrix, and performance optimization.🌊 Data Flow ArchitectureData movement patterns through application layers, caching strategies, real-time synchronization, and performance optimization.🎨 User Experience &amp; Components👤 User Journey &amp; UX FlowsUser experience analysis including navigation flows, responsive design patterns, and interaction workflows.⚛️ Component Hierarchy &amp; ArchitectureReact component structure, props flow, state management, architectural patterns, and performance optimization.🚀 Infrastructure &amp; Operations🚀 Deployment &amp; InfrastructureCI/CD pipeline, deployment infrastructure, testing strategies, and operational architecture patterns.🎯 How to Use These DiagramsInteractive Features  Clickable Elements: Many diagram elements are interactive and provide additional context  Zoom &amp; Pan: Use browser zoom controls to explore detailed sections  Multiple Views: Each diagram includes various perspectives and detail levelsDiagram Types  📊 Flowcharts: Process flows and system interactions  🔄 Sequence Diagrams: Time-based interactions and API calls  🗄️ Entity Relationship: Database schema and relationships  🎯 State Diagrams: Application state transitions  🗺️ Journey Maps: User experience flows  🏗️ Class Diagrams: Object-oriented design patternsTechnical AnalysisEach diagram includes:  Implementation Details: Based on actual codebase patterns  Best Practices: Industry-standard architectural patterns  Performance Considerations: Optimization strategies and bottlenecks  Security Implications: Security boundaries and threat vectors  Scalability Patterns: Growth and scaling considerationsFor Developers  Onboarding: New team members can quickly understand system architecture  Feature Development: Reference for implementing new features correctly  Debugging: Visual representation aids in troubleshooting issues  Code Reviews: Architectural context for reviewing changesFor Architects  System Design: High-level overview of architectural decisions  Integration Points: Understanding of service boundaries and APIs  Technology Stack: Visual representation of technology choices  Evolution Planning: Foundation for architectural improvements📚 Additional Resources  🏛️ System Design Documentation: Detailed written architecture documentation  🔐 Security Documentation: Security implementation details  📊 Performance Documentation: Performance optimization guides  🔌 API Reference: Complete API documentation with examplesThese diagrams are automatically updated as part of our documentation pipeline and reflect the current state of the Idling.app architecture.",
      "url": "/diagrams/"
    },{
      "title": "Idling.app Documentation",
      "content": "🎯 Idling.app DocumentationWelcome to the comprehensive documentation for Idling.app - your complete resource for development, deployment, and community contribution! 🚀📚 Documentation Sections🚀 DocumentationComplete project documentation including getting started guides, API reference, architecture details, and deployment procedures.  🔧 Getting Started - Installation, quick start, and Docker setup  🔌 API Reference - Complete API documentation with interactive tools  🏗️ Architecture - System design, security, and performance  🚀 Deployment - Production setup and release processes🛠️ DevelopmentDevelopment tools, resources, and component documentation for contributors and maintainers.  🧩 Components - UI components and design system  🗄️ Database - Schema management and optimization  📚 Libraries - Shared utilities and services  🧪 Testing - Unit, E2E, and CI/CD strategies  🔧 Tools - Development environment and debugging👥 CommunityProject community resources, contribution guidelines, and communication channels.  🤝 Contributing - How to contribute to the project  📝 Standards - Development and documentation standards  💬 Communication - Discord, GitHub, and project updates  📊 Project Info - Reports, roadmap, and news📊 Documentation Statistics    Total Documentation Files: 115+ markdown files  Co-located Documentation: 88 files in src/ directory  Documentation Coverage: 21% of directories documented  Search Index: Real-time search across all content🎯 Quick Navigation      🚀 Get Started    New to the project? Start here!    Begin Setup          🔌 API Docs    Explore our comprehensive API    View API          🧩 Components    UI components and design system    Browse Components          🤝 Contribute    Join our development community    Start Contributing  🔧 Development StatusThis documentation uses a co-located approach where documentation lives next to the code it describes. This ensures:  ✅ Always Up-to-Date - Docs are updated with code changes  ✅ Easy to Find - Documentation is where you expect it  ✅ Developer Friendly - No context switching required  ✅ Comprehensive Coverage - Every component and feature documented🎨 Features  🔍 Real-time Search - Find any documentation instantly  📱 Responsive Design - Works on all devices  🎯 Smart Navigation - Hierarchical organization  📊 Coverage Tracking - Monitor documentation completeness  🔗 Cross-references - Linked documentation ecosystem💡 **Tip**: Use the search bar above to quickly find specific topics, or browse by category using the navigation menu.",
      "url": "/"
    },{
      "title": "search.json",
      "content": "{% comment %}Dynamic search data - automatically generated by DynamicSearchGenerator pluginThis file is now generated dynamically and includes all co-located documentation{% endcomment %}[  {% comment %}  The search data is now automatically generated by the DynamicSearchGenerator plugin  which discovers all markdown files in the project and creates a comprehensive search index  {% endcomment %}    {% assign search_items = \"\" | split: \"\" %}  {% assign processed_urls = \"\" | split: \"\" %}    {% comment %}  Include Jekyll pages and posts (the plugin handles co-located docs)  {% endcomment %}    {% for page in site.pages %}    {% unless page.exclude_from_search or page.url contains '/assets/' or page.url contains '/vendor/' or page.url contains '/node_modules/' or page.url contains '.xml' or page.url contains '.json' or page.url contains '.txt' or page.url contains '.yml' or page.url contains '.yaml' or page.url contains '.css' or page.url contains '.js' or page.url contains '.scss' or page.url contains '.sass' %}      {% unless processed_urls contains page.url %}        {% assign processed_urls = processed_urls | push: page.url %}      {% assign search_items = search_items | push: page %}      {% endunless %}    {% endunless %}  {% endfor %}    {% for post in site.posts %}    {% unless post.exclude_from_search %}      {% unless processed_urls contains post.url %}        {% assign processed_urls = processed_urls | push: post.url %}      {% assign search_items = search_items | push: post %}      {% endunless %}    {% endunless %}  {% endfor %}    {% comment %}  Process Jekyll pages and posts  {% endcomment %}    {% for item in search_items %}    {      \"title\": {{ item.title | default: item.name | default: \"Documentation\" | jsonify }},      \"content\": {{ item.content | strip_html | strip_newlines | truncate: 2000 | jsonify }},      \"url\": {{ item.url | jsonify }},      \"date\": {{ item.date | date: \"%Y-%m-%d\" | default: \"2024-01-01\" | jsonify }},      \"category\": {% if item.url contains '/docs/' %}\"Documentation\"{% elsif item.url contains '/dev/' %}\"Development\"{% elsif item.url contains '/community/' %}\"Community\"{% elsif item.url contains '/api/' %}\"API\"{% elsif item.url contains '/components/' %}\"Components\"{% elsif item.url contains '/lib/' %}\"Libraries\"{% else %}\"General\"{% endif %},      \"tags\": {% if item.tags %}{{ item.tags | jsonify }}{% else %}[]{% endif %},      \"excerpt\": {{ item.excerpt | default: item.description | default: \"\" | strip_html | strip_newlines | truncate: 200 | jsonify }},      \"type\": {% if item.layout == \"component\" %}\"component\"{% elsif item.layout == \"api\" %}\"api\"{% elsif item.collection %}\"collection\"{% else %}\"page\"{% endif %},      \"section\": {% if item.url contains '/getting-started/' %}\"Getting Started\"{% elsif item.url contains '/architecture/' %}\"Architecture\"{% elsif item.url contains '/deployment/' %}\"Deployment\"{% elsif item.url contains '/testing/' %}\"Testing\"{% elsif item.url contains '/contributing/' %}\"Contributing\"{% else %}\"General\"{% endif %}    }{% unless forloop.last %},{% endunless %}  {% endfor %}    {% comment %}  Add fallback entries to ensure search always has content  The DynamicSearchGenerator plugin will add all co-located documentation automatically  {% endcomment %}    {% if search_items.size > 0 %},{% endif %}  {    \"title\": \"Getting Started Guide\",    \"content\": \"Complete setup and installation guide for the Idling.app project including Docker setup, quick start instructions, and development environment configuration. Learn how to get up and running quickly with our comprehensive onboarding documentation.\",    \"url\": \"/docs/getting-started/\",    \"date\": \"2024-01-01\",    \"category\": \"Documentation\",    \"tags\": [\"getting-started\", \"setup\", \"installation\", \"docker\"],    \"excerpt\": \"Complete setup and installation guide for the Idling.app project\",    \"type\": \"page\",    \"section\": \"Getting Started\"  },  {    \"title\": \"API Documentation\",    \"content\": \"Complete API reference including admin endpoints, authentication, database operations, and interactive Swagger documentation. Explore all available endpoints with detailed request and response examples.\",    \"url\": \"/docs/api/\",    \"date\": \"2024-01-01\",    \"category\": \"API\",    \"tags\": [\"api\", \"endpoints\", \"swagger\", \"authentication\", \"admin\"],    \"excerpt\": \"Complete API documentation with interactive tools and examples\",    \"type\": \"api\",    \"section\": \"Documentation\"  },  {    \"title\": \"Component Library\",    \"content\": \"UI components and design system documentation including rich input system, filter bar, floating toolbar, and component library with React hooks and utilities. Complete guide to our design system and component architecture.\",    \"url\": \"/dev/components/\",    \"date\": \"2024-01-01\",    \"category\": \"Components\",    \"tags\": [\"components\", \"ui\", \"design-system\", \"react\", \"hooks\"],    \"excerpt\": \"Complete component documentation and design system guide\",    \"type\": \"component\",    \"section\": \"Development\"  },  {    \"title\": \"Architecture Overview\",    \"content\": \"System architecture documentation including security patterns, performance optimization, database design, and deployment strategies. Learn about our system design principles and implementation patterns.\",    \"url\": \"/docs/architecture/\",    \"date\": \"2024-01-01\",    \"category\": \"Documentation\",    \"tags\": [\"architecture\", \"security\", \"performance\", \"system-design\", \"database\"],    \"excerpt\": \"System design and architecture documentation with patterns and strategies\",    \"type\": \"page\",    \"section\": \"Architecture\"  },  {    \"title\": \"Contributing Guide\",    \"content\": \"How to contribute to the project including setup instructions, coding standards, git workflow, and community guidelines. Join our development community and learn how to make meaningful contributions.\",    \"url\": \"/community/contributing/\",    \"date\": \"2024-01-01\",    \"category\": \"Community\",    \"tags\": [\"contributing\", \"development\", \"guidelines\", \"setup\", \"community\"],    \"excerpt\": \"Complete guide for project contributors with setup and guidelines\",    \"type\": \"page\",    \"section\": \"Contributing\"  },  {    \"title\": \"Library Documentation\",    \"content\": \"Shared utilities and services including authentication, caching, logging, parsers, and React hooks for the application. Complete reference for all shared libraries and utility functions.\",    \"url\": \"/dev/libraries/\",    \"date\": \"2024-01-01\",    \"category\": \"Libraries\",    \"tags\": [\"libraries\", \"utilities\", \"services\", \"hooks\", \"authentication\"],    \"excerpt\": \"Shared utilities and services documentation with examples\",    \"type\": \"page\",    \"section\": \"Development\"  },  {    \"title\": \"Testing Guide\",    \"content\": \"Testing strategies and QA documentation including unit testing, end-to-end testing with Playwright, and CI/CD pipeline configuration. Learn how to write effective tests for the application.\",    \"url\": \"/dev/testing/\",    \"date\": \"2024-01-01\",    \"category\": \"Development\",    \"tags\": [\"testing\", \"unit-tests\", \"e2e\", \"playwright\", \"ci-cd\"],    \"excerpt\": \"Complete testing guide with unit, integration, and E2E testing strategies\",    \"type\": \"page\",    \"section\": \"Testing\"  },  {    \"title\": \"Deployment Guide\",    \"content\": \"Production deployment procedures including server setup, environment configuration, release processes, and monitoring. Complete guide to deploying the application to production environments.\",    \"url\": \"/docs/deployment/\",    \"date\": \"2024-01-01\",    \"category\": \"Documentation\",    \"tags\": [\"deployment\", \"production\", \"server\", \"release\", \"monitoring\"],    \"excerpt\": \"Production deployment procedures and release management\",    \"type\": \"page\",    \"section\": \"Deployment\"  },  {    \"title\": \"Database Documentation\",    \"content\": \"Database and data management documentation including migrations, performance optimization, and data seeding. Learn about our database architecture and management strategies.\",    \"url\": \"/dev/database/\",    \"date\": \"2024-01-01\",    \"category\": \"Development\",    \"tags\": [\"database\", \"migrations\", \"performance\", \"data-management\"],    \"excerpt\": \"Database architecture and management documentation\",    \"type\": \"page\",    \"section\": \"Development\"  },  {    \"title\": \"Development Tools\",    \"content\": \"Development environment and tools documentation including environment setup, performance optimization tools, and debugging guides. Complete reference for development tooling.\",    \"url\": \"/dev/tools/\",    \"date\": \"2024-01-01\",    \"category\": \"Development\",    \"tags\": [\"tools\", \"environment\", \"performance\", \"debugging\", \"development\"],    \"excerpt\": \"Development tools and environment configuration guide\",    \"type\": \"page\",    \"section\": \"Development\"  }] ",
      "url": "/search.json"
    },{
      "title": "Service Architecture & Business Logic Patterns",
      "content": "# 🏢 Service Architecture & Business Logic PatternsThis diagram shows the actual service layer architecture for Idling.app based on the codebase implementation, including service patterns, business logic organization, and data access layers.## 🏗️ **Service Layer Architecture**```mermaidflowchart TB    subgraph \"🌐 API Layer (Next.js Route Handlers)\"        A1[📍 /api/auth/*]        A2[📍 /api/users/*]        A3[📍 /api/sessions/*]        A4[📍 /api/emojis/*]        A5[📍 /api/admin/*]    end    subgraph \"🏢 Business Service Layer\"        S1[🔑 AuthService]        S2[👤 UserService]        S3[🎮 SessionService]        S4[😊 EmojiService]        S5[📊 AnalyticsService]        S6[🔔 NotificationService]    end    subgraph \"🗄️ Data Access Layer\"        D1[🐘 DatabaseService]        D2[⚡ CacheService]        D3[📁 FileStorageService]        D4[🔍 SearchService]    end    subgraph \"🔧 Utility Services\"        U1[📧 EmailService]        U2[📝 LoggingService]        U3[🔒 EncryptionService]        U4[⏰ SchedulerService]    end    A1 --> S1    A2 --> S2    A3 --> S3    A4 --> S4    A5 --> S5    A5 --> S6    S1 --> D1    S2 --> D1    S3 --> D1    S4 --> D1    S5 --> D1    S6 --> D1    S1 --> D2    S2 --> D2    S3 --> D2    S4 --> D2    S4 --> D3    S4 --> D4    S1 --> U1    S2 --> U2    S3 --> U3    S5 --> U4    style A1 fill:#e3f2fd    style S1 fill:#c8e6c9    style D1 fill:#fff3e0    style U1 fill:#f3e5f5```## 🎯 **Service Implementation Patterns**```mermaidclassDiagram    class BaseService {        >        +logger: Logger        +config: ServiceConfig        +handleError(error: Error): void        +validateInput(data: any): boolean        +formatResponse(data: any): ServiceResponse    }    class AuthService {        +signIn(provider: string): Promise~AuthResult~        +signOut(sessionId: string): Promise~void~        +validateSession(token: string): Promise~Session~        +refreshToken(refreshToken: string): Promise~TokenPair~        +getUser(sessionId: string): Promise~User~    }    class UserService {        +createUser(userData: CreateUserRequest): Promise~User~        +getUserById(id: string): Promise~User~        +updateProfile(id: string, data: UpdateUserRequest): Promise~User~        +getUserPreferences(id: string): Promise~UserPreferences~        +updatePreferences(id: string, prefs: UserPreferences): Promise~void~    }    class SessionService {        +createSession(userId: string, config: SessionConfig): Promise~Session~        +startSession(sessionId: string): Promise~void~        +pauseSession(sessionId: string): Promise~void~        +stopSession(sessionId: string): Promise~SessionResult~        +getUserSessions(userId: string): Promise~Session[]~        +getActiveSession(userId: string): Promise~Session~    }    class EmojiService {        +getCategories(): Promise~EmojiCategory[]~        +getEmojisByCategory(categoryId: number): Promise~Emoji[]~        +searchEmojis(query: string): Promise~Emoji[]~        +getUserFavorites(userId: string): Promise~Emoji[]~        +addToFavorites(userId: string, emojiId: string): Promise~void~        +removeFromFavorites(userId: string, emojiId: string): Promise~void~    }    BaseService >API: POST /api/sessions/create    API->>Auth: validateSession(token)    Auth->>Cache: checkSession(token)    alt Session Valid        Cache->>Auth: sessionData        Auth->>API: userInfo        API->>Session: createSession(userId, config)        Session->>DB: INSERT session        DB->>Session: sessionId        Session->>Cache: cacheSession(sessionId)        Session->>API: sessionData        API->>Client: 201 Created    else Session Invalid        Cache->>Auth: null        Auth->>API: 401 Unauthorized        API->>Client: 401 Unauthorized    end```## 🏗️ **Database Service Patterns**```mermaidflowchart LR    subgraph \"🗄️ Database Operations\"        D1[📝 Create Operations]        D2[📖 Read Operations]        D3[✏️ Update Operations]        D4[🗑️ Delete Operations]    end    subgraph \"🔍 Query Patterns\"        Q1[🎯 Single Record Queries]        Q2[📋 List Queries with Pagination]        Q3[🔍 Search Queries]        Q4[📊 Aggregation Queries]    end    subgraph \"⚡ Optimization Strategies\"        O1[🗂️ Indexed Queries]        O2[🔄 Connection Pooling]        O3[📦 Query Batching]        O4[⚡ Prepared Statements]    end    subgraph \"🛡️ Data Validation\"        V1[📝 Input Sanitization]        V2[🔒 SQL Injection Prevention]        V3[📊 Type Validation]        V4[🚨 Constraint Checking]    end    D1 --> Q1    D2 --> Q2    D3 --> Q3    D4 --> Q4    Q1 --> O1    Q2 --> O2    Q3 --> O3    Q4 --> O4    O1 --> V1    O2 --> V2    O3 --> V3    O4 --> V4    style D1 fill:#e3f2fd    style Q1 fill:#c8e6c9    style O1 fill:#fff3e0    style V1 fill:#f3e5f5```## 🔧 **Utility Service Architecture**```mermaidgraph TB    subgraph \"📝 Logging Service\"        L1[📊 Structured Logging]        L2[🏷️ Log Levels]        L3[📁 Log Rotation]        L4[🔍 Log Aggregation]    end    subgraph \"🔒 Security Services\"        S1[🔐 Password Hashing]        S2[🔑 Token Generation]        S3[🛡️ Data Encryption]        S4[🔍 Input Validation]    end    subgraph \"📧 Communication Services\"        C1[📨 Email Templates]        C2[🔔 Push Notifications]        C3[📱 SMS Services]        C4[📢 In-App Notifications]    end    subgraph \"⏰ Background Services\"        B1[🕐 Scheduled Tasks]        B2[🔄 Data Cleanup]        B3[📊 Analytics Processing]        B4[🗄️ Database Maintenance]    end    L1 --> L2    L2 --> L3    L3 --> L4    S1 --> S2    S2 --> S3    S3 --> S4    C1 --> C2    C2 --> C3    C3 --> C4    B1 --> B2    B2 --> B3    B3 --> B4    style L1 fill:#e3f2fd    style S1 fill:#c8e6c9    style C1 fill:#fff3e0    style B1 fill:#f3e5f5```## 🔄 **Error Handling Patterns**```mermaidflowchart TD    A[🚨 Error Occurs] --> B{🔍 Error Type?}    B -->|🔒 Authentication| C[🔑 AuthError]    B -->|🎭 Authorization| D[🛡️ PermissionError]    B -->|📝 Validation| E[📋 ValidationError]    B -->|🗄️ Database| F[🐘 DatabaseError]    B -->|🌐 Network| G[📡 NetworkError]    B -->|❓ Unknown| H[🚨 SystemError]    C --> I[📝 Log Error Details]    D --> I    E --> I    F --> I    G --> I    H --> I    I --> J{🔄 Retry Logic?}    J -->|Yes| K[⏰ Exponential Backoff]    J -->|No| L[📤 Return Error Response]    K --> M{🎯 Max Retries?}    M -->|No| N[🔄 Retry Operation]    M -->|Yes| L    N --> A    L --> O[📊 Error Analytics]    O --> P[🔔 Alert if Critical]    style A fill:#ffcdd2    style I fill:#fff3e0    style L fill:#e3f2fd    style O fill:#f3e5f5```## 📊 **Service Configuration Management**```mermaidgraph LR    subgraph \"⚙️ Configuration Sources\"        C1[🌍 Environment Variables]        C2[📄 Config Files]        C3[🗄️ Database Settings]        C4[☁️ Remote Config]    end    subgraph \"🔧 Configuration Types\"        T1[🗄️ Database Config]        T2[🔑 Auth Config]        T3[📧 Email Config]        T4[📊 Analytics Config]    end    subgraph \"🛡️ Configuration Security\"        S1[🔒 Secret Management]        S2[🔐 Encryption at Rest]        S3[🎭 Role-based Access]        S4[📝 Audit Logging]    end    subgraph \"🔄 Configuration Lifecycle\"        L1[🚀 Initialization]        L2[🔄 Hot Reload]        L3[✅ Validation]        L4[📊 Monitoring]    end    C1 --> T1    C2 --> T2    C3 --> T3    C4 --> T4    T1 --> S1    T2 --> S2    T3 --> S3    T4 --> S4    S1 --> L1    S2 --> L2    S3 --> L3    S4 --> L4    style C1 fill:#e3f2fd    style T1 fill:#c8e6c9    style S1 fill:#fff3e0    style L1 fill:#f3e5f5```## 🔍 **Service Architecture Analysis**### **Service Layer Benefits**- **Separation of Concerns**: Clear boundaries between API, business logic, and data access- **Reusability**: Services can be used across multiple API endpoints- **Testability**: Individual services can be unit tested in isolation- **Maintainability**: Business logic centralized in dedicated service classes### **Implementation Patterns**- **Dependency Injection**: Services receive dependencies through constructor injection- **Interface Segregation**: Services implement specific interfaces for their domain- **Single Responsibility**: Each service handles one specific business domain- **Error Boundaries**: Consistent error handling across all service operations### **Data Access Strategy**- **Repository Pattern**: Database operations abstracted through repository interfaces- **Query Optimization**: Indexed queries and connection pooling for performance- **Transaction Management**: ACID compliance for critical operations- **Cache Integration**: Redis caching layer for frequently accessed data### **Security Implementation**- **Input Validation**: All service inputs validated and sanitized- **Authentication**: JWT-based authentication with session validation- **Authorization**: Role-based access control at service level- **Audit Logging**: Complete audit trail of all service operations### **Performance Considerations**- **Connection Pooling**: Efficient database connection management- **Caching Strategy**: Multi-layer caching with Redis and application-level cache- **Async Operations**: Non-blocking operations for better throughput- **Resource Management**: Proper cleanup and resource disposalThis service architecture provides a clean, maintainable, and scalable foundation for the Idling.app business logic with proper separation of concerns and enterprise-grade patterns.",
      "url": "/diagrams/service-architecture-patterns.mermaid.html"
    },{
      "title": "System Architecture Overview",
      "content": "# 🏛️ System Architecture OverviewThis diagram shows the complete system architecture of Idling.app, including all layers from user interface to database storage.```mermaidgraph TB    %% External Layer    subgraph \"🌐 External Layer\"        Users[👥 Users]        CDN[🌍 CDN/Cloudflare]        OAuth[🔐 OAuth ProvidersTwitch, Google]    end    %% Presentation Layer    subgraph \"🎨 Presentation Layer\"        Browser[🌐 Browser]        PWA[📱 PWA Features]        SW[⚙️ Service Worker]    end    %% Application Layer    subgraph \"🚀 Application Layer - Next.js 14\"        subgraph \"Client Side\"            React[⚛️ React Components]            Hooks[🎣 Custom Hooks]            Context[🔄 Context Providers]            State[📊 State ManagementJotai + Zustand]        end        subgraph \"Server Side\"            SSR[🖥️ SSR/SSG]            API[🔌 API Routes]            Middleware[🛡️ Middleware]            Actions[⚡ Server Actions]        end    end    %% Business Logic Layer    subgraph \"🧠 Business Logic Layer\"        Auth[🔐 AuthenticationNextAuth.js]        Permissions[👮 PermissionsRBAC System]        Services[🔧 Business Services]        Utils[🛠️ Utilities]    end    %% Data Access Layer    subgraph \"💾 Data Access Layer\"        ORM[🗃️ SQL QueriesDirect PostgreSQL]        Cache[⚡ Redis Cache]        Files[📁 File Storage]        Sessions[🎫 Session Store]    end    %% Infrastructure Layer    subgraph \"🏗️ Infrastructure Layer\"        DB[(🐘 PostgreSQLPrimary Database)]        Redis[(🔴 RedisCache & Sessions)]        Storage[💽 File SystemImages & Assets]        Logs[📝 Logging System]    end    %% External Services    subgraph \"🌍 External Services\"        Analytics[📊 Analytics]        Monitoring[📈 Monitoring]        Email[📧 Email Service]    end    %% Connections    Users --> Browser    Users --> PWA    Browser --> CDN    CDN --> React    React --> Hooks    React --> Context    Context --> State    Hooks --> API    Browser --> SW    SW --> Cache    API --> Auth    API --> Middleware    API --> Actions    Auth --> OAuth    Middleware --> Permissions    Actions --> Services    Services --> Utils    Services --> ORM    Services --> Cache    Services --> Files    Services --> Sessions    ORM --> DB    Cache --> Redis    Files --> Storage    Sessions --> Redis    Services --> Analytics    Services --> Monitoring    Services --> Email    DB --> Logs    Redis --> Logs    %% Styling    classDef external fill:#e1f5fe,stroke:#01579b,stroke-width:2px    classDef presentation fill:#f3e5f5,stroke:#4a148c,stroke-width:2px    classDef application fill:#e8f5e8,stroke:#1b5e20,stroke-width:2px    classDef business fill:#fff3e0,stroke:#e65100,stroke-width:2px    classDef data fill:#fce4ec,stroke:#880e4f,stroke-width:2px    classDef infrastructure fill:#f1f8e9,stroke:#33691e,stroke-width:2px    classDef services fill:#e0f2f1,stroke:#004d40,stroke-width:2px    class Users,CDN,OAuth external    class Browser,PWA,SW presentation    class React,Hooks,Context,State,SSR,API,Middleware,Actions application    class Auth,Permissions,Services,Utils business    class ORM,Cache,Files,Sessions data    class DB,Redis,Storage,Logs infrastructure    class Analytics,Monitoring,Email services```## 🏗️ Architecture Principles### 🎯 Design Patterns- **Repository Pattern**: Data access abstraction through direct SQL- **Service Layer**: Business logic encapsulation- **Factory Pattern**: Service instantiation- **Observer Pattern**: Event-driven updates- **Middleware Pattern**: Request/response processing### 🔄 Data Flow1. **Request**: User interaction → Browser → CDN → Next.js2. **Processing**: Middleware → Authentication → Business Logic3. **Data Access**: Services → ORM → Database4. **Response**: Data → Serialization → Client → UI Update### 🚀 Scalability Features- **Horizontal Scaling**: Load balancing, CDN distribution- **Caching Strategy**: Multi-layer caching (Browser, CDN, Redis, Application)- **Database Optimization**: Connection pooling, read replicas- **Performance Monitoring**: Real-time metrics and alerting### 🔐 Security Layers- **Authentication**: OAuth providers, JWT tokens, session management- **Authorization**: Role-based access control (RBAC)- **Data Protection**: Input validation, SQL injection prevention- **Infrastructure**: HTTPS, security headers, rate limiting",
      "url": "/diagrams/system-architecture-overview.mermaid.html"
    },{
      "title": "User Journey & UX Flows",
      "content": "# 🎯 User Journey & UX FlowsThis document provides comprehensive user experience flow diagrams for Idling.app, covering all user interactions, navigation paths, and experience optimization strategies.## 🌟 **Primary User Journey - New User Onboarding**```mermaidjourney    title New User Onboarding Journey    section Discovery      Visit Landing Page           : 5: User      Read About Features         : 4: User      View Demo/Screenshots       : 4: User      Click Sign Up              : 3: User    section Authentication      Choose OAuth Provider       : 4: User      Grant Permissions          : 3: User      Complete Profile Setup     : 4: User      Verify Email (Optional)    : 3: User    section First Experience      Welcome Tutorial           : 5: User      Create First Session       : 5: User      Explore Dashboard         : 4: User      Customize Settings        : 4: User    section Engagement      Use Emoji Features        : 5: User      Share Session Results     : 4: User      Invite Friends           : 3: User      Become Regular User      : 5: User```## 🔄 **Core User Flow - Idle Session Management**```mermaidflowchart TD    A[🏠 Dashboard] --> B{📊 Active Session?}    B -->|No| C[➕ Create New Session]    B -->|Yes| D[📋 View Active Session]    C --> E[⚙️ Configure Session]    E --> F[🏷️ Name Session]    F --> G[⏰ Set Duration]    G --> H[😊 Choose Emoji Theme]    H --> I[🚀 Start Session]    I --> J[🎮 Session Active]    J --> K{🎯 User Action?}    K -->|⏸️ Pause| L[⏸️ Session Paused]    K -->|▶️ Continue| J    K -->|⏹️ Stop| M[⏹️ Session Ended]    K -->|📊 View Stats| N[📈 Real-time Stats]    L --> O{🔄 Resume?}    O -->|Yes| J    O -->|No| M    N --> J    M --> P[🎉 Session Summary]    P --> Q[💾 Save Results]    Q --> R[📤 Share Options]    R --> S[🔄 Create Another?]    S -->|Yes| C    S -->|No| A    D --> T[📊 Session Controls]    T --> U{🎛️ Action?}    U -->|⏸️ Pause| L    U -->|⏹️ Stop| M    U -->|📊 Stats| N    U -->|⚙️ Settings| V[⚙️ Modify Session]    V --> J    style A fill:#e3f2fd    style I fill:#c8e6c9    style J fill:#fff3e0    style M fill:#ffcdd2    style P fill:#f3e5f5```## 🎨 **Emoji System User Experience**```mermaidflowchart LR    subgraph \"😊 Emoji Discovery\"        A[🔍 Browse Categories]        B[🔎 Search Emojis]        C[🌟 Popular Emojis]        D[📚 Recent Usage]    end    subgraph \"💝 Emoji Interaction\"        E[👁️ Preview Emoji]        F[❤️ Add to Favorites]        G[🎯 Use in Session]        H[📤 Share Emoji]    end    subgraph \"🎨 Customization\"        I[🎨 Custom Emoji Upload]        J[🏷️ Create Categories]        K[⚙️ Emoji Preferences]        L[🔄 Sync Across Devices]    end    subgraph \"📊 Emoji Analytics\"        M[📈 Usage Statistics]        N[🏆 Most Used]        O[📅 Usage Timeline]        P[🎯 Recommendations]    end    A --> E    B --> E    C --> E    D --> E    E --> F    E --> G    E --> H    F --> I    G --> J    H --> K    I --> L    J --> M    K --> N    L --> O    M --> P    style A fill:#e3f2fd    style E fill:#c8e6c9    style I fill:#fff3e0    style M fill:#f3e5f5```## 📱 **Mobile vs Desktop UX Flow**```mermaidflowchart TB    subgraph \"📱 Mobile Experience\"        M1[📱 Mobile App Launch]        M2[🔄 Quick Session Start]        M3[📊 Simplified Dashboard]        M4[👆 Touch Gestures]        M5[📳 Push Notifications]        M6[🔋 Battery Optimization]    end    subgraph \"🖥️ Desktop Experience\"        D1[🖥️ Web Browser Launch]        D2[⚙️ Advanced Configuration]        D3[📊 Detailed Analytics]        D4[🖱️ Mouse Interactions]        D5[🔔 Browser Notifications]        D6[⚡ Full Feature Access]    end    subgraph \"🔄 Cross-Platform Sync\"        S1[☁️ Cloud Synchronization]        S2[📊 Data Consistency]        S3[⚙️ Settings Sync]        S4[📱 Device Switching]    end    M1 --> M2    M2 --> M3    M3 --> M4    M4 --> M5    M5 --> M6    D1 --> D2    D2 --> D3    D3 --> D4    D4 --> D5    D5 --> D6    M6 --> S1    D6 --> S1    S1 --> S2    S2 --> S3    S3 --> S4    style M1 fill:#e3f2fd    style D1 fill:#c8e6c9    style S1 fill:#fff3e0```## 🎭 **User Persona Journey Maps**```mermaidjourney    title Productivity Enthusiast Journey    section Morning Routine      Check Yesterday's Stats     : 4: Productivity User      Plan Today's Sessions      : 5: Productivity User      Set Focus Goals           : 5: Productivity User      Start Deep Work Session   : 5: Productivity User    section Work Day      Monitor Progress          : 4: Productivity User      Take Scheduled Breaks     : 3: Productivity User      Adjust Session Settings   : 4: Productivity User      Track Productivity Metrics: 5: Productivity User    section Evening Review      Analyze Daily Performance : 5: Productivity User      Export Data to Tools      : 4: Productivity User      Plan Tomorrow's Goals     : 4: Productivity User      Share Achievements        : 3: Productivity User``````mermaidjourney    title Casual User Journey    section Occasional Use      Remember the App          : 3: Casual User      Quick Session Start       : 4: Casual User      Minimal Configuration     : 5: Casual User      Enjoy Simple Interface    : 5: Casual User    section Engagement      Discover New Features     : 4: Casual User      Try Different Emojis      : 5: Casual User      Share Fun Results         : 4: Casual User      Invite Friends           : 3: Casual User    section Retention      Receive Gentle Reminders : 3: Casual User      Return for Special Events : 4: Casual User      Maintain Minimal Profile  : 4: Casual User      Enjoy Stress-Free Experience: 5: Casual User```## 🛠️ **Admin User Experience Flow**```mermaidstateDiagram-v2    [*] --> AdminLogin    AdminLogin --> AdminDashboard    AdminDashboard --> UserManagement    AdminDashboard --> SystemSettings    AdminDashboard --> Analytics    AdminDashboard --> ContentModeration    UserManagement --> ViewUsers    UserManagement --> ManagePermissions    UserManagement --> HandleReports    SystemSettings --> ConfigureFeatures    SystemSettings --> UpdateSettings    SystemSettings --> ManageIntegrations    Analytics --> ViewMetrics    Analytics --> GenerateReports    Analytics --> ExportData    ContentModeration --> ReviewContent    ContentModeration --> ManageEmojis    ContentModeration --> HandleFlags    ViewUsers --> UserManagement    ManagePermissions --> UserManagement    HandleReports --> UserManagement    ConfigureFeatures --> SystemSettings    UpdateSettings --> SystemSettings    ManageIntegrations --> SystemSettings    ViewMetrics --> Analytics    GenerateReports --> Analytics    ExportData --> Analytics    ReviewContent --> ContentModeration    ManageEmojis --> ContentModeration    HandleFlags --> ContentModeration    UserManagement --> AdminDashboard    SystemSettings --> AdminDashboard    Analytics --> AdminDashboard    ContentModeration --> AdminDashboard    AdminDashboard --> [*]```## 🎯 **Application Navigation Flow**```mermaidflowchart TD    subgraph \"🏠 Landing Experience\"        A1[🌐 Landing Page]        A2[📖 Features Section]        A3[🎯 Call-to-Action]        A4[📝 Sign Up Button]    end    subgraph \"🔑 Authentication Flow\"        B1[🔐 Auth Selection]        B2[🎮 Twitch OAuth]        B3[🔍 Google OAuth]        B4[✅ Profile Creation]    end    subgraph \"🎮 Core Application\"        C1[📊 Dashboard]        C2[➕ Create Session]        C3[⚙️ Settings]        C4[😊 Emoji Management]    end    subgraph \"🎯 Session Workflow\"        D1[🏷️ Session Setup]        D2[🚀 Active Session]        D3[📈 Session Results]        D4[📤 Share/Export]    end    A1 --> A2    A2 --> A3    A3 --> A4    A4 --> B1    B1 --> B2    B1 --> B3    B2 --> B4    B3 --> B4    B4 --> C1    C1 --> C2    C1 --> C3    C1 --> C4    C2 --> D1    D1 --> D2    D2 --> D3    D3 --> D4    D4 --> C1    style A1 fill:#e3f2fd    style B1 fill:#c8e6c9    style C1 fill:#fff3e0    style D1 fill:#f3e5f5```## 🔄 **User Feedback Loop**```mermaidsequenceDiagram    participant User as 👤 User    participant App as 📱 Application    participant Analytics as 📊 Analytics    participant Product as 🛠️ Product Team    participant Support as 🎧 Support Team    User->>App: Use Feature    App->>Analytics: Track Usage    User->>App: Provide Feedback    App->>Product: Collect Feedback    Analytics->>Product: Usage Patterns    Product->>Product: Analyze Data    Product->>App: Implement Changes    User->>Support: Report Issue    Support->>User: Provide Help    Support->>Product: Report Common Issues    App->>User: Feature Updates    User->>App: Test New Features    App->>Analytics: Track Adoption    Note over User,Support: Continuous Improvement Cycle```## 🎨 **UX Optimization Strategies**```mermaidmindmap  root((UX Optimization))    Performance      Load Time  E1    A2 --> E2    A3 --> E3    A4 --> E4    E1 --> R1    E2 --> R2    E3 --> R3    E4 --> R4    R1 --> S1    R2 --> S2    R3 --> S3    R4 --> S4    style A1 fill:#e3f2fd    style E1 fill:#c8e6c9    style R1 fill:#fff3e0    style S1 fill:#f3e5f5```## 🔍 **UX Analysis Summary**### **User Journey Optimization**- **Streamlined Onboarding**: Minimal steps to first value- **Progressive Disclosure**: Advanced features revealed gradually- **Contextual Help**: Just-in-time assistance and tooltips- **Personalized Experience**: Adaptive interface based on usage patterns### **Cross-Platform Consistency**- **Unified Design Language**: Consistent visual elements across devices- **Feature Parity**: Core functionality available on all platforms- **Seamless Sync**: Real-time synchronization across devices- **Responsive Design**: Optimized for all screen sizes### **Accessibility & Inclusion**- **WCAG Compliance**: Full accessibility standards adherence- **Multiple Input Methods**: Touch, keyboard, and voice support- **Internationalization**: Multi-language support and RTL layouts- **Cognitive Accessibility**: Clear language and simple interactions### **Performance & Reliability**- **Fast Load Times**: Under 2 seconds for initial load- **Smooth Interactions**: 60fps animations and transitions- **Offline Capability**: Core features work without internet- **Error Recovery**: Graceful handling of network issues### **Engagement & Motivation**- **Gamification Elements**: Progress tracking and achievements- **Social Features**: Sharing and community aspects- **Personalization**: Customizable themes and preferences- **Feedback Loops**: Clear progress indicators and confirmationsThis comprehensive UX analysis ensures Idling.app provides an exceptional user experience across all touchpoints while maintaining professional standards and accessibility requirements.",
      "url": "/diagrams/user-journey-ux-flows.mermaid.html"
    },{
      "title": "/feed.xml",
      "content": "{% if page.xsl %}{% endif %}Jekyll{{ site.time | date_to_xmlschema }}{{ page.url | absolute_url | xml_escape }}{% assign title = site.title | default: site.name %}{% if page.collection != \"posts\" %}{% assign collection = page.collection | capitalize %}{% assign title = title | append: \" | \" | append: collection %}{% endif %}{% if page.category %}{% assign category = page.category | capitalize %}{% assign title = title | append: \" | \" | append: category %}{% endif %}{% if title %}{{ title | smartify | xml_escape }}{% endif %}{% if site.description %}{{ site.description | xml_escape }}{% endif %}{% if site.author %}{{ site.author.name | default: site.author | xml_escape }}{% if site.author.email %}{{ site.author.email | xml_escape }}{% endif %}{% if site.author.uri %}{{ site.author.uri | xml_escape }}{% endif %}{% endif %}{% if page.tags %}{% assign posts = site.tags[page.tags] %}{% else %}{% assign posts = site[page.collection] %}{% endif %}{% if page.category %}{% assign posts = posts | where: \"categories\", page.category %}{% endif %}{% unless site.show_drafts %}{% assign posts = posts | where_exp: \"post\", \"post.draft != true\" %}{% endunless %}{% assign posts = posts | sort: \"date\" | reverse %}{% assign posts_limit = site.feed.posts_limit | default: 10 %}{% for post in posts limit: posts_limit %}{% assign post_title = post.title | smartify | strip_html | normalize_whitespace | xml_escape %}{{ post_title }}{{ post.date | date_to_xmlschema }}{{ post.last_modified_at | default: post.date | date_to_xmlschema }}{{ post.id | absolute_url | xml_escape }}{% assign excerpt_only = post.feed.excerpt_only | default: site.feed.excerpt_only %}{% unless excerpt_only %}{% endunless %}{% assign post_author = post.author | default: post.authors[0] | default: site.author %}{% assign post_author = site.data.authors[post_author] | default: post_author %}{% assign post_author_email = post_author.email | default: nil %}{% assign post_author_uri = post_author.uri | default: nil %}{% assign post_author_name = post_author.name | default: post_author %}{{ post_author_name | default: \"\" | xml_escape }}{% if post_author_email %}{{ post_author_email | xml_escape }}{% endif %}{% if post_author_uri %}{{ post_author_uri | xml_escape }}{% endif %}{% if post.category %}{% elsif post.categories %}{% for category in post.categories %}{% endfor %}{% endif %}{% for tag in post.tags %}{% endfor %}{% assign post_summary = post.description | default: post.excerpt %}{% if post_summary and post_summary != empty %}{% endif %}{% assign post_image = post.image.path | default: post.image %}{% if post_image %}{% unless post_image contains \"://\" %}{% assign post_image = post_image | absolute_url %}{% endunless %}{% endif %}{% endfor %}",
      "url": "/feed.xml"
    },{
      "title": "sitemap.xml",
      "content": "{% if page.xsl %}{% endif %}{% assign collections = site.collections | where_exp:'collection','collection.output != false' %}{% for collection in collections %}{% assign docs = collection.docs | where_exp:'doc','doc.sitemap != false' %}{% for doc in docs %}{{ doc.url | replace:'/index.html','/' | absolute_url | xml_escape }}{% if doc.last_modified_at or doc.date %}{{ doc.last_modified_at | default: doc.date | date_to_xmlschema }}{% endif %}{% endfor %}{% endfor %}{% assign pages = site.html_pages | where_exp:'doc','doc.sitemap != false' | where_exp:'doc','doc.url != \"/404.html\"' %}{% for page in pages %}{{ page.url | replace:'/index.html','/' | absolute_url | xml_escape }}{% if page.last_modified_at %}{{ page.last_modified_at | date_to_xmlschema }}{% endif %}{% endfor %}{% assign static_files = page.static_files | where_exp:'page','page.sitemap != false' | where_exp:'page','page.name != \"404.html\"' %}{% for file in static_files %}{{ file.path | replace:'/index.html','/' | absolute_url | xml_escape }}{{ file.modified_time | date_to_xmlschema }}{% endfor %}",
      "url": "/sitemap.xml"
    },{
      "title": "robots.txt",
      "content": "Sitemap: {{ \"sitemap.xml\" | absolute_url }}",
      "url": "/robots.txt"
    }] 