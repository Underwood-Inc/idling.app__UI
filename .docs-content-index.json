{
  "generated": "2025-07-04T05:35:41-02:30",
  "content": {
    "./.github/pull_request_template.md": "# Pull Request ## Description <!-- Provide a brief overview of the changes introduced by this PR. --> ## Checklist - [ ] **Unit Tests:** - [ ] Added unit tests for new code. - [ ] Updated existing unit tests affected by the changes. - [ ] Ensured test coverage meets project standards. - [ ] **Component Tests:** - [ ] Verified that components render correctly. - [ ] Checked component behavior under different scenarios. - [ ] **Integration Tests:** - [ ] Tested interactions between different parts of the application. - [ ] Ensured integration points work as expected. - [ ] **End-to-End (E2E) Tests:** - [ ] Created E2E tests using tools like Cypress or Selenium. - [ ] Validated critical user flows. - [ ] **Supporting PR Media:** - [ ] Attached relevant screenshots, videos, or other media. - [ ] Explained the context of the media (if applicable). ## Testing Instructions <!-- Provide specific instructions for reviewers to test the changes. Include any prerequisites or setup steps. --> ## Additional Notes <!-- Any other relevant information or considerations for reviewers. --> ",
    "./DOCUMENTATION_ARCHITECTURE.md": "--- layout: default title: 'Documentation Architecture' description: 'Co-located documentation approach and architectural guidelines for Idling.app' permalink: /documentation-architecture/ nav_order: 2 --- # üìö Documentation Architecture ## Overview Idling.app uses a **co-located documentation approach** where documentation lives as close as possible to the code it describes. This architectural decision improves maintainability, reduces documentation drift, and enhances the developer experience. ## üéØ Co-location Philosophy ### Core Principles 1. **Proximity**: Documentation should live next to the code it documents 2. **Discoverability**: Developers should find docs where they expect them 3. **Maintainability**: Changes to code should prompt documentation updates 4. **Ownership**: Code owners naturally become documentation owners ### Benefits - **Reduced Context Switching**: Developers don't need to navigate to separate documentation repositories - **Improved Accuracy**: Documentation is more likely to stay current when it's co-located - **Better Code Reviews**: Documentation changes are reviewed alongside code changes - **Faster Onboarding**: New developers find relevant documentation immediately ## üèóÔ∏è Directory Structure ``` idling.app__UI/ ‚îú‚îÄ‚îÄ jekyll/ # Jekyll configuration only (no markdown files) ‚îÇ ‚îú‚îÄ‚îÄ _config.yml ‚îÇ ‚îú‚îÄ‚îÄ _layouts/ ‚îÇ ‚îú‚îÄ‚îÄ _sass/ ‚îÇ ‚îî‚îÄ‚îÄ assets/ ‚îú‚îÄ‚îÄ src/ # Co-located technical documentation ‚îÇ ‚îú‚îÄ‚îÄ app/api/ # API endpoint documentation ‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ README.md # API overview ‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ admin/README.md # Admin API docs ‚îÇ ‚îÇ ‚îî‚îÄ‚îÄ [endpoint]/README.md ‚îÇ ‚îú‚îÄ‚îÄ components/ # Component documentation ‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ index.md # Component library overview ‚îÇ ‚îÇ ‚îî‚îÄ‚îÄ [component]/index.md ‚îÇ ‚îú‚îÄ‚îÄ lib/ # Library and utility documentation ‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ index.md # Library overview ‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ services/ # Service documentation ‚îÇ ‚îÇ ‚îî‚îÄ‚îÄ utils/ # Utility documentation ‚îÇ ‚îî‚îÄ‚îÄ templates/ # Documentation templates ‚îú‚îÄ‚îÄ community/ # Community and contribution guidelines ‚îÇ ‚îú‚îÄ‚îÄ index.md ‚îÇ ‚îú‚îÄ‚îÄ contributing/ ‚îÇ ‚îî‚îÄ‚îÄ standards/ ‚îú‚îÄ‚îÄ docs/ # General project documentation ‚îÇ ‚îú‚îÄ‚îÄ index.md ‚îÇ ‚îú‚îÄ‚îÄ getting-started/ ‚îÇ ‚îú‚îÄ‚îÄ architecture/ ‚îÇ ‚îî‚îÄ‚îÄ deployment/ ‚îú‚îÄ‚îÄ commits/ # Project management documentation ‚îú‚îÄ‚îÄ updates/ ‚îî‚îÄ‚îÄ README.md # Main project documentation ``` ## üìù Documentation Types and Locations ### 1. Code-Level Documentation **Location**: Next to the code files **Format**: `README.md` or `index.md` **Examples**: - `src/app/api/admin/README.md` - Admin API documentation - `src/components/rich-input-system/index.md` - Component documentation - `src/lib/services/RateLimitService.md` - Service documentation ### 2. Feature Documentation **Location**: In the feature's primary directory **Format**: `index.md` or dedicated files **Examples**: - `src/components/navbar/index.md` - Navigation component - `src/lib/auth-patterns.md` - Authentication patterns ### 3. Community Documentation **Location**: `community/` directory **Format**: Jekyll-compatible markdown **Examples**: - `community/contributing/index.md` - Contribution guidelines - `community/standards/index.md` - Development standards ### 4. Project Documentation **Location**: `docs/` directory or root level **Format**: Jekyll-compatible markdown **Examples**: - `docs/getting-started/index.md` - Getting started guide - `docs/architecture/index.md` - System architecture - `commits/index.md` - Commit guidelines ## üîß Implementation Guidelines ### File Naming Conventions ``` # For directories with multiple files [feature]/index.md # For single-file documentation [feature].md # For API endpoints [endpoint]/README.md ``` ### Jekyll Front Matter All documentation should include Jekyll front matter: ```yaml --- layout: default title: 'Your Title' description: 'Brief description' permalink: /your-path/ parent: Parent Section (optional) nav_order: 1 (optional) --- ``` ### Cross-Reference Patterns #### Relative Links (Preferred) ```markdown # Within same directory [Component](./component-name/) # Parent directory [Overview](../index.md) # Sibling directories [Related Feature](../sibling-feature/) ``` #### Absolute Links (For Jekyll) ```markdown # For Jekyll navigation [API Documentation](/api/) [Components](/components/) ``` ## üîç Search and Discovery ### Search Strategy 1. **File-based Search**: Use IDE/editor search capabilities 2. **Content Search**: Grep/ripgrep for content within documentation 3. **Jekyll Search**: Site-wide search through Jekyll plugins 4. **Link Validation**: Automated link checking for broken references ### Indexing Approach ```bash # Generate documentation index find . -name \"*.md\" -type f | grep -E \"(README|index)\" | sort # Search documentation content grep -r \"search term\" --include=\"*.md\" . # Find broken links grep -r \"\[.*\](\" --include=\"*.md\" . | grep -v \"http\" ``` ## üìä Maintenance Workflows ### Documentation Updates 1. **Code Changes**: Update co-located documentation in same PR 2. **Feature Additions**: Create documentation in feature directory 3. **API Changes**: Update endpoint README files 4. **Architecture Changes**: Update system documentation ### Link Validation ```bash # Check for broken internal links find . -name \"*.md\" -exec grep -l \"\[.*\](\" {} \; | \ xargs grep -o \"\[.*\]([^)]*)\" | \ grep -v \"http\" | \ # Validate each link exists ``` ### Content Auditing Regular audits should check: - [ ] All code directories have appropriate documentation - [ ] Links between documentation files work correctly - [ ] Documentation is up-to-date with code changes - [ ] Jekyll front matter is consistent ## üé® Visual Documentation ### Diagrams and Charts Use Mermaid for technical diagrams: ```mermaid graph TD A[Code Change] --> B[Update Co-located Docs] B --> C[Review Together] C --> D[Deploy Both] D --> E[Maintain Consistency] ``` ### Screenshots and Examples - Include visual examples for UI components - Provide code examples with expected outputs - Show before/after comparisons for changes ## üöÄ Migration Strategy ### From Centralized to Co-located 1. **Identify Documentation**: Catalog existing centralized docs 2. **Map to Code**: Determine appropriate co-located positions 3. **Move Files**: Relocate documentation to co-located positions 4. **Update Links**: Fix all cross-references 5. **Validate**: Ensure all links work correctly ### Link Update Process ```bash # Example: Moving API docs from docs/api/ to src/app/api/ # Update all references: find . -name \"*.md\" -exec sed -i 's|docs/api/|src/app/api/|g' {} \; ``` ## üîß Tools and Automation ### Recommended Tools - **Link Checking**: `markdown-link-check` or custom scripts - **Content Search**: `ripgrep` for fast content search - **Documentation Generation**: JSDoc for code documentation - **Jekyll Plugins**: For enhanced search and navigation ### Automation Scripts ```bash #!/bin/bash # docs-check.sh - Validate documentation structure # Check for missing documentation find src -type d -name \"components\" -exec test -f {}/index.md \; || echo \"Missing component docs\" # Validate links find . -name \"*.md\" -exec markdown-link-check {} \; # Generate documentation index find . -name \"*.md\" -type f | sort > .docs-index ``` ## üìà Success Metrics ### Quantitative Metrics - **Documentation Coverage**: Percentage of code directories with documentation - **Link Health**: Percentage of working internal links - **Update Frequency**: Documentation updates per code change - **Search Success**: Successful documentation searches ### Qualitative Metrics - **Developer Satisfaction**: Ease of finding relevant documentation - **Onboarding Time**: Time for new developers to find needed information - **Maintenance Burden**: Effort required to keep documentation current - **Consistency**: Uniformity across documentation ## üîó Related Resources - [Jekyll Documentation](https://jekyllrb.com/docs/) - [Markdown Guide](https://www.markdownguide.org/) - [Documentation Best Practices](https://www.writethedocs.org/guide/) - [Co-location Benefits](https://martinfowler.com/bliki/DocumentationAsCode.html) --- _This documentation architecture is continuously evolved based on team feedback and industry best practices. Last updated: {{ site.time | date: \"%B %d, %Y\" }}_ ",
    "./LINK_AUDIT.md": "# üîç Documentation Link Audit **Status**: In Progress **Started**: 2024-01-XX **Last Updated**: 2024-01-XX ## üèóÔ∏è STRUCTURAL CHANGES COMPLETED ### Directory Restructuring - **RENAMED**: `DOCS/` ‚Üí `jekyll/` (better reflects Jekyll configuration purpose) - **MOVED**: Component docs `jekyll/dev/components/` ‚Üí `src/components/` (co-located) - **MOVED**: Library docs `jekyll/dev/libraries/` ‚Üí `src/lib/` (co-located) - **MOVED**: API docs `jekyll/docs/api/` ‚Üí `src/app/api/` (co-located) - **MOVED**: Template files `jekyll/templates/` ‚Üí `src/templates/` (co-located) - **MOVED**: Community docs `jekyll/community/` ‚Üí `community/` (root level) - **MOVED**: General docs `jekyll/docs/` ‚Üí `docs/` (root level) - **MOVED**: Project docs `jekyll/project/` ‚Üí root level (commits/, updates/) - **MOVED**: Dev docs `jekyll/dev/database/`, `jekyll/dev/testing/`, `jekyll/dev/tools/` ‚Üí `src/lib/` (co-located) - **DELETED**: Duplicate index.md files where co-located versions already existed ### Co-location Benefits - Documentation lives next to the code it documents - Easier maintenance and updates - Better developer experience - Reduced path complexity ## üìã Audit Methodology 1. **Systematic File Review**: Check every `.md` file in DOCS directory 2. **Link Verification**: Test each internal link for existence 3. **Navigation Check**: Verify all navigation items work 4. **Index File Audit**: Ensure all index files have proper content 5. **Cross-Reference Check**: Verify relative path accuracy ## üìä Audit Status **FULL CODEBASE SCOPE**: 108 markdown files total (after restructuring) **Jekyll directory**: 0 markdown files (pure Jekyll configuration now) **Co-located documentation**: 81 files in src/ **Root-level documentation**: 27 files (community/, docs/, commits/, updates/, etc.) **Files Audited**: 25/108 (23.1%) **Links Checked**: 180+ **Broken Links Found**: 125+ **Working Links**: 55+ **Success Rate**: ~30% (STILL CATASTROPHIC) **Empty Directories Found**: 12 confirmed ## üîó Broken Links Inventory ### Community Section #### DOCS/community/contributing/index.md - **Status**: ‚úÖ FIXED - **Issues Found**: - `./getting-started/` ‚Üí Fixed to `../../docs/getting-started/` - `./guidelines/` ‚Üí Fixed to `../../docs/getting-started/` - `./setup/` ‚Üí Fixed to `../../docs/getting-started/installation/` - **Remaining Issues**: Communication links need checking #### DOCS/community/index.md - **Status**: ‚ùå BROKEN LINKS FOUND - **Issues Found**: - `contributing/getting-started/` ‚Üí Points to empty directory - `contributing/guidelines/` ‚Üí Points to empty directory - `contributing/setup/` ‚Üí Points to empty directory - `standards/code/` ‚Üí Points to empty directory - `standards/docs/` ‚Üí Points to empty directory - `standards/design/` ‚Üí Points to empty directory - `communication/discord/` ‚Üí Points to empty directory - `communication/github/` ‚Üí Points to empty directory - `communication/updates/` ‚Üí Points to empty directory - `project/reports/` ‚Üí Points to empty directory - `project/roadmap/` ‚Üí Points to empty directory - `project/news/` ‚Üí Points to empty directory - **Notes**: Almost ALL links are broken - pointing to empty directories #### DOCS/community/communication/index.md - **Status**: ‚ùå BROKEN LINKS FOUND - **Issues Found**: - `./discord/` ‚Üí Points to empty directory - `./github/` ‚Üí Points to empty directory - `./updates/` ‚Üí Points to empty directory - `../contributing/code-of-conduct/` ‚Üí Need to verify this exists - `../contributing/` ‚Üí This exists but may have internal broken links - **Notes**: All 3 main subdirectory links are broken #### DOCS/community/project/index.md - **Status**: ‚ùå BROKEN LINKS FOUND - **Issues Found**: - `./reports/` ‚Üí Points to empty directory - `./roadmap/` ‚Üí Points to empty directory - `./news/` ‚Üí Points to empty directory - `../communication/` ‚Üí This exists but has broken internal links - **Notes**: All 3 main subdirectory links are broken #### DOCS/community/standards/index.md - **Status**: ‚ùå BROKEN LINKS FOUND - **Issues Found**: - `./code/` ‚Üí Points to empty directory - `./docs/` ‚Üí Points to empty directory - `./design/` ‚Üí Points to empty directory - `../contributing/` ‚Üí This exists but has broken internal links - **Notes**: All 3 main subdirectory links are broken ### Documentation Section #### DOCS/docs/index.md - **Status**: ‚ùå BROKEN LINKS FOUND - **Issues Found**: - `api/overview/` ‚Üí Need to verify this exists - `api/interactive/` ‚Üí Need to verify this exists - `api/core/` ‚Üí Need to verify this exists - `api/admin/` ‚Üí Need to verify this exists - `architecture/system/` ‚Üí Need to verify this exists - `deployment/production/` ‚Üí Need to verify this exists - `deployment/docs/` ‚Üí Need to verify this exists - `deployment/releases/` ‚Üí Need to verify this exists - `../dev/` ‚Üí This exists but may have broken internal links - `../community/` ‚Üí This exists but has broken internal links - `../community/project/` ‚Üí This exists but has broken internal links - **Notes**: Multiple API and architecture subdirectory links need verification #### DOCS/docs/getting-started/index.md - **Status**: ‚ùå BROKEN LINKS FOUND - **Issues Found**: - `../../community/communication/discord/` ‚Üí Points to empty directory - `../troubleshooting/` ‚Üí Need to verify this exists - **Notes**: Discord link broken, troubleshooting guide missing #### DOCS/docs/api/index.md - **Status**: ‚ùå BROKEN LINKS FOUND - **Issues Found**: - `swagger/` ‚Üí Need to verify this exists - `admin/` ‚Üí Need to verify this exists - `../getting-started/#authentication` ‚Üí Anchor link may be broken - `../../dev/libraries/services/#rate-limiting` ‚Üí Complex anchor link - `../../community/communication/discord/` ‚Üí Points to empty directory - `../../community/communication/github/` ‚Üí Points to empty directory - **Notes**: Multiple subdirectory and anchor links need verification #### DOCS/docs/architecture/index.md - **Status**: ‚ùå BROKEN LINKS FOUND - **Issues Found**: - `system/` ‚Üí Need to verify this exists - `security/` ‚Üí Need to verify this exists - `performance/` ‚Üí Need to verify this exists - **Notes**: All 3 main architecture subdirectories need verification #### DOCS/docs/deployment/index.md - **Status**: ‚ùå BROKEN LINKS FOUND - **Issues Found**: - `production/` ‚Üí Need to verify this exists - `docs/` ‚Üí Need to verify this exists - `releases/` ‚Üí Need to verify this exists - **Notes**: All 3 main deployment subdirectories need verification ### Development Section #### DOCS/dev/index.md - **Status**: ‚ùå BROKEN LINKS FOUND - **Issues Found**: - `components/rich-input/` ‚Üí Need to verify this exists - `components/search/` ‚Üí Need to verify this exists - `components/navigation/` ‚Üí Need to verify this exists - `database/migrations/` ‚Üí Need to verify this exists - `database/performance/` ‚Üí Need to verify this exists - `database/data/` ‚Üí Need to verify this exists - `libraries/services/` ‚Üí Need to verify this exists - `libraries/utils/` ‚Üí Need to verify this exists - `libraries/hooks/` ‚Üí Need to verify this exists - `testing/unit/` ‚Üí Need to verify this exists - `testing/e2e/` ‚Üí Need to verify this exists - `testing/ci-cd/` ‚Üí Need to verify this exists - `tools/environment/` ‚Üí Need to verify this exists - `tools/performance/` ‚Üí Need to verify this exists - `tools/debugging/` ‚Üí Need to verify this exists - **Notes**: Almost ALL dev subdirectory links need verification #### DOCS/dev/components/index.md - **Status**: ‚úÖ GOOD - **Issues Found**: None found in initial scan - **Notes**: Component documentation appears complete with good examples #### DOCS/dev/database/index.md - **Status**: ‚ùå BROKEN LINKS FOUND - **Issues Found**: - `migrations/` ‚Üí Need to verify this exists - `performance/` ‚Üí Need to verify this exists - `data/` ‚Üí Need to verify this exists - **Notes**: All 3 main database subdirectories need verification #### DOCS/dev/libraries/index.md - **Status**: ‚ùå BROKEN LINKS FOUND - **Issues Found**: - `services/` ‚Üí Need to verify this exists - `utils/` ‚Üí Need to verify this exists - `hooks/` ‚Üí Need to verify this exists - **Notes**: All 3 main library subdirectories need verification #### DOCS/dev/testing/index.md - **Status**: ‚ùå BROKEN LINKS FOUND - **Issues Found**: - `unit/` ‚Üí Need to verify this exists - `e2e/` ‚Üí Need to verify this exists - `ci-cd/` ‚Üí Need to verify this exists - `../../src/components/` ‚Üí Invalid path - should be `../components/` - **Notes**: All 3 testing subdirectories need verification, plus path error #### DOCS/dev/tools/index.md - **Status**: ‚ùå BROKEN LINKS FOUND - **Issues Found**: - `environment/` ‚Üí Need to verify this exists - `performance/` ‚Üí Need to verify this exists - `debugging/` ‚Üí Need to verify this exists - **Notes**: All 3 main tool subdirectories need verification ### Project Section #### DOCS/project/index.md - **Status**: ‚úÖ GOOD - **Issues Found**: None found in initial scan - **Notes**: Comprehensive project management documentation #### DOCS/project/commits/index.md - **Status**: ‚úÖ GOOD - **Issues Found**: None found in initial scan - **Notes**: Excellent commit guidelines with examples #### DOCS/project/updates/index.md - **Status**: ‚ùå BROKEN LINKS FOUND - **Issues Found**: - `../dev/database/` ‚Üí Need to verify this exists - `../docs/deployment/` ‚Üí Need to verify this exists - `../src/app/api/` ‚Üí Should be `../../src/app/api/` - `../community/contributing/` ‚Üí Need to verify this exists - `../docs/getting-started/` ‚Üí Need to verify this exists - `../dev/testing/` ‚Üí Need to verify this exists - `../community/standards/` ‚Üí Need to verify this exists - **Notes**: Multiple relative path issues and missing targets ### Templates Section #### DOCS/templates/index.md - **Status**: ‚ùå BROKEN LINKS FOUND - **Issues Found**: - `pull_request_template/` ‚Üí Need to verify this exists - `feature-template/` ‚Üí Need to verify this exists - `component-template/` ‚Üí Need to verify this exists - `api-template/` ‚Üí Need to verify this exists - **Notes**: All 4 template subdirectories need verification ## üìã Co-located Documentation Audit ### Root Level Files #### README.md - **Status**: ‚úÖ GOOD - **Issues Found**: None found in initial scan - **Notes**: Comprehensive main README with proper documentation links #### src/components/index.md - **Status**: ‚ùå BROKEN LINKS FOUND - **Issues Found**: - `/components/rich-input-system/` ‚Üí Should be `./rich-input-system/` - `/components/filter-bar/` ‚Üí Should be `./filter-bar/` - `/components/floating-toolbar/` ‚Üí Should be `./floating-toolbar/` - `/components/search-overlay/` ‚Üí Should be `./search-overlay/` - `/components/navbar/` ‚Üí Should be `./navbar/` - `/development/` ‚Üí Should be `../dev/` or `../../DOCS/dev/` - **Notes**: All component links using absolute paths instead of relative paths #### src/components/rich-input-system/index.md - **Status**: ‚úÖ GOOD - **Issues Found**: None found in initial scan - **Notes**: Comprehensive component documentation with business requirements and technical specs #### src/components/filter-bar/index.md - **Status**: ‚ùå BROKEN LINKS FOUND - **Issues Found**: - `/components/rich-input-system/` ‚Üí Should be `../rich-input-system/` - `/components/search-overlay/` ‚Üí Should be `../search-overlay/` - `/development/` ‚Üí Should be `../../DOCS/dev/` - **Notes**: Links using absolute paths instead of relative paths #### src/lib/index.md - **Status**: ‚ùå BROKEN LINKS FOUND - **Issues Found**: - `parsers.html` ‚Üí Should be `./parsers.md` - `logging.html` ‚Üí Should be `./logging.md` - `encryption.html` ‚Üí Should be `./encryption.md` - `auth-patterns.html` ‚Üí Should be `./auth-patterns.md` - `../development/index.html` ‚Üí Should be `../../DOCS/dev/` - `../testing/index.html` ‚Üí Should be `../../DOCS/dev/testing/` - `../architecture/index.html` ‚Üí Should be `../../DOCS/docs/architecture/` - **Notes**: Using .html extensions instead of .md and incorrect relative paths #### src/app/api/README.md - **Status**: ‚ùå BROKEN LINKS FOUND - **Issues Found**: - `./swagger.md` ‚Üí Need to verify this exists - `./openapi.json` ‚Üí Need to verify this exists - `../../DOCS/docs/getting-started/#authentication` ‚Üí Need to verify anchor exists - `../lib/services/RateLimitService.md` ‚Üí Should be `../../lib/services/RateLimitService.md` - `../../DOCS/docs/getting-started/` ‚Üí Need to verify this exists - `../../DOCS/getting-started.md#authentication` ‚Üí Inconsistent path format - **Notes**: Multiple path issues and missing targets ## üìã Moved Files Audit ### Community Section (now at root level) #### community/index.md - **Status**: ‚ùå BROKEN LINKS FOUND - **Issues Found**: - `contributing/getting-started/` ‚Üí Need to verify this exists - `contributing/guidelines/` ‚Üí Need to verify this exists - `contributing/setup/` ‚Üí Need to verify this exists - `standards/code/` ‚Üí Need to verify this exists - `standards/docs/` ‚Üí Need to verify this exists - `standards/design/` ‚Üí Need to verify this exists - `communication/discord/` ‚Üí Need to verify this exists - `communication/github/` ‚Üí Need to verify this exists - `communication/updates/` ‚Üí Need to verify this exists - `project/reports/` ‚Üí Need to verify this exists - `project/roadmap/` ‚Üí Need to verify this exists - `project/news/` ‚Üí Need to verify this exists - `../docs/` ‚Üí Should be `./docs/` (now at same level) - `../dev/` ‚Üí Should be `./src/lib/` (moved to co-located) - **Notes**: Most subdirectory links likely broken due to empty directories ### Documentation Section (now at root level) #### docs/index.md - **Status**: ‚ùå BROKEN LINKS FOUND - **Issues Found**: - `api/overview/` ‚Üí Need to verify this exists - `api/interactive/` ‚Üí Need to verify this exists - `api/core/` ‚Üí Need to verify this exists - `api/admin/` ‚Üí Now at `../src/app/api/admin/` - `architecture/system/` ‚Üí Need to verify this exists - `deployment/production/` ‚Üí Need to verify this exists - `deployment/docs/` ‚Üí Need to verify this exists - `deployment/releases/` ‚Üí Need to verify this exists - `../dev/` ‚Üí Should be `../src/lib/` (moved to co-located) - `../community/` ‚Üí Should be `./community/` (now at same level) - `../community/project/` ‚Üí Should be `./community/project/` - **Notes**: Path references need updating due to restructuring ### Templates Section (now co-located) #### src/templates/index.md - **Status**: ‚ùå BROKEN LINKS FOUND - **Issues Found**: - `pull_request_template/` ‚Üí Should be `./pull_request_template.md` - `feature-template/` ‚Üí Should be `./feature-template.md` - `component-template/` ‚Üí Should be `./component-template.md` - `api-template/` ‚Üí Should be `./api-template.md` - `cp DOCS/templates/feature-template.md` ‚Üí Should be `cp src/templates/feature-template.md` - **Notes**: All template links need updating to reflect co-located structure #### DOCS/dev/libraries/services/index.md - **Status**: ‚úÖ GOOD - **Issues Found**: None found in initial scan - **Notes**: Comprehensive services documentation with good examples #### DOCS/dev/libraries/utils/index.md - **Status**: ‚úÖ GOOD - **Issues Found**: None found in initial scan - **Notes**: Comprehensive utilities documentation with code examples #### DOCS/dev/libraries/hooks/index.md - **Status**: ‚úÖ GOOD - **Issues Found**: None found in initial scan - **Notes**: Comprehensive hooks documentation with usage examples - **Issues Found**: - `environment/` ‚Üí Need to verify this exists - `performance/` ‚Üí Need to verify this exists - `debugging/` ‚Üí Need to verify this exists - **Notes**: All 3 main tools subdirectories need verification ### Project Section #### DOCS/project/index.md - **Status**: ‚úÖ MOSTLY GOOD - **Issues Found**: - `../dev/testing/` ‚Üí This exists and should work - **Notes**: Only one potential link issue, mostly good #### DOCS/project/commits/index.md - **Status**: ‚è≥ PENDING - **Issues Found**: TBD - **Notes**: Commit guidelines #### DOCS/project/updates/index.md - **Status**: ‚è≥ PENDING - **Issues Found**: TBD - **Notes**: Project updates ### Root Files #### DOCS/index.md - **Status**: ‚ùå MASSIVE BROKEN LINKS - **Issues Found**: - `./docs/api/swagger/` ‚Üí Need to verify swagger exists - `./dev/libraries/services/#rate-limiting-service` ‚Üí Complex anchor link - `./docs/getting-started/#authentication` ‚Üí Anchor link may be broken - `./dev/components/#rich-input-system` ‚Üí Anchor link may be broken - `./dev/database/performance/` ‚Üí Need to verify this exists - `./dev/database/data/` ‚Üí Need to verify this exists - `./docs/architecture/security/` ‚Üí Need to verify this exists - `./docs/api/admin/` ‚Üí Need to verify this exists - `./docs/deployment/production/` ‚Üí Need to verify this exists - `./docs/deployment/docs/` ‚Üí Need to verify this exists - `./docs/deployment/releases/` ‚Üí Need to verify this exists - `./dev/testing/unit/` ‚Üí Need to verify this exists - `./dev/testing/e2e/` ‚Üí Need to verify this exists - `./dev/testing/ci-cd/` ‚Üí Need to verify this exists - `./dev/tools/debugging/` ‚Üí Need to verify this exists - `./docs/architecture/performance/` ‚Üí Need to verify this exists - `./docs/architecture/system/` ‚Üí Need to verify this exists - `./dev/libraries/services/` ‚Üí Need to verify this exists - `./dev/libraries/utils/` ‚Üí Need to verify this exists - `./dev/libraries/hooks/` ‚Üí Need to verify this exists - `./templates/` ‚Üí Need to verify this exists - Plus many more complex anchor links - **Notes**: ROOT INDEX HAS THE MOST BROKEN LINKS - CRITICAL TO FIX #### DOCS/templates/index.md - **Status**: ‚è≥ PENDING - **Issues Found**: TBD - **Notes**: Template documentation #### DOCS/docs/architecture/performance/index.md - **Status**: ‚úÖ GOOD - **Issues Found**: None found in initial scan - **Notes**: Comprehensive performance documentation with good examples #### DOCS/docs/getting-started/quickstart/index.md - **Status**: ‚ùå BROKEN LINKS FOUND - **Issues Found**: - `../installation/#troubleshooting` ‚Üí Anchor link may be broken - `../../../../src/components/` ‚Üí Invalid path - should be `../../../dev/components/` - `../../../community/contributing/` ‚Üí This exists but has broken internal links - `../../../community/standards/` ‚Üí This exists but has broken internal links - `../../../community/communication/discord/` ‚Üí Points to empty directory - **Notes**: Several path errors and broken community links ## üìÅ Empty Directories Audit ### Known Empty Directories (from previous scan) - `DOCS/community/standards/design/` - EMPTY - `DOCS/community/standards/code/` - EMPTY - `DOCS/community/standards/docs/` - EMPTY - `DOCS/community/project/roadmap/` - EMPTY - `DOCS/community/project/news/` - EMPTY - `DOCS/community/project/reports/` - EMPTY - `DOCS/community/communication/github/` - EMPTY - `DOCS/community/communication/updates/` - EMPTY - `DOCS/community/communication/discord/` - EMPTY ## üß≠ Navigation Audit ### Main Navigation (from \_config.yml or navigation files) - **Status**: ‚è≥ PENDING - **Items to Check**: TBD ### Header Navigation - **Status**: ‚è≥ PENDING - **Items to Check**: TBD ### Sidebar Navigation - **Status**: ‚è≥ PENDING - **Items to Check**: TBD ## üîç Detailed Link Analysis ### Internal Links Pattern Analysis - **Relative Links**: `./path/` or `../path/` - **Absolute Links**: `/path/` - **Jekyll Links**: `{{ site.baseurl }}/path/` ### External Links - **GitHub Links**: Need to verify repository URLs - **Discord Links**: Need to verify invite links - **Other External**: Documentation, tools, etc. ## üìù Audit Progress Log ### Session 1 - Initial Setup - Created audit document - Fixed community/contributing/index.md links - Identified empty directories ### Session 2 - Community Section Complete - [x] Audit community/index.md - ‚ùå 12 broken links - [x] Audit community/communication/index.md - ‚ùå 5 broken links - [x] Audit community/project/index.md - ‚ùå 4 broken links - [x] Audit community/standards/index.md - ‚ùå 4 broken links ### Session 3 - Docs Section Complete - [x] Audit docs/index.md - ‚ùå 11 broken links - [x] Audit docs/getting-started/index.md - ‚ùå 2 broken links - [x] Audit docs/api/index.md - ‚ùå 6 broken links - [x] Audit docs/architecture/index.md - ‚ùå 3 broken links - [x] Audit docs/deployment/index.md - ‚ùå 3 broken links ### Session 4 - Dev/Project/Root Complete - [x] Audit dev/index.md - ‚ùå 15 broken links - [x] Audit dev/components/index.md - ‚úÖ Good - [x] Audit dev/database/index.md - ‚ùå 3 broken links - [x] Audit dev/libraries/index.md - ‚ùå 3 broken links - [x] Audit dev/testing/index.md - ‚ùå 4 broken links - [x] Audit dev/tools/index.md - ‚ùå 3 broken links - [x] Audit project/index.md - ‚úÖ 1 potential issue - [x] Audit root index.md - ‚ùå 22+ MASSIVE broken links - [x] Audit docs/architecture/performance/index.md - ‚úÖ Good - [x] Audit docs/getting-started/quickstart/index.md - ‚ùå 5 broken links ### Session 5 - TBD - [ ] Navigation audit - [ ] Cross-reference verification - [ ] Final validation ## üö® Critical Issues Found ### High Priority (Breaks Navigation) - TBD ### Medium Priority (Broken Content Links) - TBD ### Low Priority (Minor Issues) - TBD ## üìä Statistics - **Files Audited**: 17 / 32 - **Links Checked**: 120+ / TBD - **Broken Links**: 95+ - **Fixed Links**: 6 (community/contributing/index.md) - **Empty Directories**: 12 ## üîß Fix Strategy 1. **Phase 1**: Fix critical navigation links 2. **Phase 2**: Address content links within sections 3. **Phase 3**: Handle empty directories (create content or remove links) 4. **Phase 4**: Verify all fixes work 5. **Phase 5**: Update navigation structure if needed ## üìû Notes - All links should use co-located documentation approach - No new documents should be created unless absolutely necessary - Prefer fixing links to existing content over creating new content - Empty directories should either get content or have their links removed --- **Next Steps**: Begin systematic file-by-file audit starting with community section. ",
    "./LinkedIn_Documentation_Infrastructure_Report.md": "# üöÄ Building Enterprise-Grade Documentation Infrastructure: A Week of Innovation ## Executive Summary This past week, I architected and implemented a comprehensive **automated documentation coverage system** for a large-scale Next.js application, transforming how our team approaches code documentation and quality assurance. The solution combines **GitHub Actions CI/CD**, **Python automation**, **ESLint integration**, and **intelligent reporting** to create a robust documentation enforcement pipeline. --- ## üéØ Project Overview **Challenge**: A growing codebase with 106+ code files lacking systematic documentation coverage, making onboarding difficult and reducing code maintainability. **Solution**: Built an end-to-end automated documentation infrastructure that: - Monitors documentation coverage across the entire codebase - Enforces quality standards through CI/CD integration - Provides actionable insights through automated reporting - Streamlines developer workflow with intelligent PR integration --- ## üõ†Ô∏è Technical Architecture & Implementation ### **1. Automated Documentation Coverage System** - **Python-based analysis engine** (`check-docs-coverage.py` - 493 lines) - Scans 106+ code files across utilities, API routes, and components - Generates detailed coverage reports with priority-based recommendations - Creates documentation stubs automatically for missing files - Configurable coverage thresholds (currently set to 85% minimum) ### **2. GitHub Actions CI/CD Pipeline** - **Comprehensive workflow** (`documentation-coverage.yml` - 356 lines) - Triggers on every PR and master branch push - Multi-stage pipeline: - Python docstring analysis using `interrogate` - Documentation file coverage analysis - Style compliance checking with `pydocstyle` - Badge generation with dynamic color coding - Automated PR description updates - Issue creation for coverage violations ### **3. ESLint Integration & Code Quality** - **Custom ESLint plugin** (`eslint-plugin-docs-coverage.js` - 396 lines) - Enforces JSDoc documentation standards - Integrates with existing development workflow - Provides real-time feedback during development ### **4. Intelligent Reporting & Automation** - **PR Description Updates**: Automatic badge integration showing coverage status - **Detailed Comments**: Comprehensive reports with actionable recommendations - **README Badge Updates**: Master branch integration updates main repository badges - **Issue Management**: Automatic issue creation for coverage violations --- ## üìä Key Metrics & Results ### **Coverage Analysis** - **Current State**: 13.2% documentation coverage (14/106 files) - **Target**: 85% minimum coverage threshold - **Identified**: 92 files requiring documentation - **Prioritized**: High-priority files (300+ lines) flagged for immediate attention ### **Technical Deliverables** - **1,686 lines of new code** added - **1,165 lines of legacy code** removed/refactored - **8 new system files** created - **Multiple workflow iterations** with continuous improvement ### **Automation Benefits** - **Zero manual intervention** required for coverage monitoring - **Real-time feedback** on every code change - **Consistent documentation standards** across the team - **Reduced onboarding time** through better documentation --- ## üîß Technical Highlights ### **Multi-Language Integration** ```bash # Python for analysis and automation # JavaScript/TypeScript for ESLint integration # YAML for GitHub Actions workflow # Shell scripting for setup automation ``` ### **Intelligent File Classification** - **API Routes**: Automatic detection and documentation requirements - **Utilities**: Priority-based analysis (300+ lines = high priority) - **Components**: Integration with existing React documentation patterns - **Services**: Comprehensive coverage for business logic ### **Dynamic Badge Generation** - **Color-coded status indicators**: Green (90%+), Yellow (75-89%), Red (<75%) - **Real-time updates**: Automatic refresh on every commit - **Multi-metric tracking**: Overall, file-based, and docstring coverage --- ## üé® Developer Experience Enhancements ### **Seamless PR Integration** - Clean badge display in PR descriptions - Detailed coverage reports in comments - Non-blocking workflow (documentation failures don't prevent merges) - Actionable recommendations with specific file paths ### **Automated Stub Generation** - Creates documentation templates for missing files - Follows established patterns and conventions - Reduces friction for developers to add documentation - Maintains consistent structure across the codebase --- ## üöÄ Business Impact ### **Quality Assurance** - **Systematic approach** to documentation coverage - **Consistent standards** across all team members - **Reduced technical debt** through proactive documentation - **Improved code maintainability** and readability ### **Team Productivity** - **Automated workflows** eliminate manual documentation tracking - **Clear visibility** into coverage status for all stakeholders - **Reduced onboarding time** for new team members - **Better code review process** with documentation context ### **Scalability** - **Configurable thresholds** adapt to team maturity - **Extensible architecture** supports additional quality metrics - **CI/CD integration** scales with team growth - **Automated maintenance** reduces operational overhead --- ## üîÆ Future Enhancements - **Integration with code complexity metrics** - **Automated documentation quality scoring** - **Machine learning-based documentation suggestions** - **Integration with project management tools** - **Advanced analytics and reporting dashboards** --- ## üí° Key Learnings 1. **Automation is crucial** for maintaining documentation standards at scale 2. **Developer experience** is as important as the technical implementation 3. **Gradual adoption** works better than enforcing strict standards immediately 4. **Visual feedback** (badges, reports) drives better adoption 5. **Integration with existing workflows** reduces friction --- ## üéØ Technologies Used **Backend**: Python, Shell Scripting **CI/CD**: GitHub Actions, YAML **Code Quality**: ESLint, Interrogate, PyDocStyle **Integration**: GitHub API, Markdown, JSON **Reporting**: Dynamic badge generation, automated PR updates --- This project demonstrates how **thoughtful automation** and **developer-centric design** can transform code quality practices while maintaining team productivity. The solution provides immediate value while building a foundation for long-term documentation excellence. _Ready to discuss how similar infrastructure improvements could benefit your team? Let's connect!_ --- #SoftwareDevelopment #DevOps #Automation #CodeQuality #Documentation #CI/CD #Python #JavaScript #GitHub #TechnicalLeadership ",
    "./README-DB-EXPLORER.md": "# üßô‚Äç‚ôÇÔ∏è Database Explorer Simple interactive PostgreSQL database exploration tool that follows the same patterns as your existing scripts. ## üöÄ Quick Start ```bash node scripts/explore-db.js ``` That's it! The script will: - ‚úÖ Auto-load your `.env.local` file - üîó Connect to your PostgreSQL database - üìä Present a beautiful interactive menu ## üéØ Features ### üìä Quick Views - List all tables - Recent users, posts, comments - Database statistics - Table sizes and activity ### üîç Schema Info - Describe any table structure - List all database indexes - Show table relationships ### ‚ö° Custom Queries - Run any SQL query interactively - Popular pre-built queries - Beautiful table output with `console.table()` ### üõ†Ô∏è Utilities - Connection information - Database health checks - Activity monitoring ## üèóÔ∏è Why This Approach? This script follows the **exact same pattern** as your existing database scripts: ```javascript // Same as debug-db.js, manage-user.js, etc. require('dotenv').config({ path: '.env.local' }); const postgres = require('postgres'); const chalk = require('chalk'); ``` **Benefits:** - ‚úÖ Consistent with your codebase - ‚úÖ Uses existing dependencies - ‚úÖ Auto-loads environment variables - ‚úÖ Beautiful colored output - ‚úÖ Interactive with readline - ‚úÖ Proper error handling - ‚úÖ Works in both Docker and host environments ## üé≠ Example Session ``` üßô‚Äç‚ôÇÔ∏è Database Explorer Interactive PostgreSQL database exploration üìä Quick Views: 1. List all tables 2. Recent users 3. Recent posts 4. Recent comments 5. Database statistics 6. Table sizes üîç Schema Info: 7. Describe table 8. List indexes 9. Show relationships ‚ö° Custom Queries: 10. Run custom SQL 11. Popular queries üõ†Ô∏è Utilities: 12. Connection info 13. Database health 0. Exit Enter your choice: 2 üë• Recent Users ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îÇ id ‚îÇ name‚îÇ email ‚îÇ created_at ‚îÇ profile_public ‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§ ‚îÇ 123 ‚îÇ John‚îÇ john@example.com ‚îÇ 2024-06-29T10:15:30.000Z ‚îÇ true ‚îÇ ‚îÇ ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ``` ## üîê Production Usage The script works perfectly on production servers too! Just make sure your `.env.local` (or `.env`) file has the correct database credentials. ## üÜò Troubleshooting **\"Connection failed\":** - Check your `.env.local` file has correct `POSTGRES_*` variables - Ensure the database is running **\"MODULE_NOT_FOUND\":** - All dependencies are already in your `package.json` - Run `yarn install` if needed --- *Much simpler than my original overly-complex approach! üßô‚Äç‚ôÇÔ∏è‚ú®*",
    "./README.md": "## Code Analysis ![React](https://img.shields.io/badge/React-19.0.0--alpha-61DAFB?style=flat&logo=react&logoColor=white) [![Documentation Coverage](https://img.shields.io/badge/Documentation%20Coverage-80.6%25-yellow?style=flat&logo=gitbook&logoColor=white)](https://underwood-inc.github.io/idling.app__UI/) [![Quality Gate Status](https://sonarcloud.io/api/project_badges/measure?project=Underwood-Inc_idling.app__UI&metric=alert_status)](https://sonarcloud.io/summary/new_code?id=Underwood-Inc_idling.app__UI) [![Bugs](https://sonarcloud.io/api/project_badges/measure?project=Underwood-Inc_idling.app__UI&metric=bugs)](https://sonarcloud.io/summary/new_code?id=Underwood-Inc_idling.app__UI) [![Code Smells](https://sonarcloud.io/api/project_badges/measure?project=Underwood-Inc_idling.app__UI&metric=code_smells)](https://sonarcloud.io/summary/new_code?id=Underwood-Inc_idling.app__UI) [![Coverage](https://sonarcloud.io/api/project_badges/measure?project=Underwood-Inc_idling.app__UI&metric=coverage)](https://sonarcloud.io/summary/new_code?id=Underwood-Inc_idling.app__UI) [![Duplicated Lines (%)](https://sonarcloud.io/api/project_badges/measure?project=Underwood-Inc_idling.app__UI&metric=duplicated_lines_density)](https://sonarcloud.io/summary/new_code?id=Underwood-Inc_idling.app__UI) [![Lines of Code](https://sonarcloud.io/api/project_badges/measure?project=Underwood-Inc_idling.app__UI&metric=ncloc)](https://sonarcloud.io/summary/new_code?id=Underwood-Inc_idling.app__UI) [![Reliability Rating](https://sonarcloud.io/api/project_badges/measure?project=Underwood-Inc_idling.app__UI&metric=reliability_rating)](https://sonarcloud.io/summary/new_code?id=Underwood-Inc_idling.app__UI) [![Security Rating](https://sonarcloud.io/api/project_badges/measure?project=Underwood-Inc_idling.app__UI&metric=security_rating)](https://sonarcloud.io/summary/new_code?id=Underwood-Inc_idling.app__UI) [![Technical Debt](https://sonarcloud.io/api/project_badges/measure?project=Underwood-Inc_idling.app__UI&metric=sqale_index)](https://sonarcloud.io/summary/new_code?id=Underwood-Inc_idling.app__UI) [![Maintainability Rating](https://sonarcloud.io/api/project_badges/measure?project=Underwood-Inc_idling.app__UI&metric=sqale_rating)](https://sonarcloud.io/summary/new_code?id=Underwood-Inc_idling.app__UI) [![Vulnerabilities](https://sonarcloud.io/api/project_badges/measure?project=Underwood-Inc_idling.app__UI&metric=vulnerabilities)](https://sonarcloud.io/summary/new_code?id=Underwood-Inc_idling.app__UI) ## GitHub Workflows (CI/CD) This repository contains three GitHub Actions workflows: Version Control, Tests, and Deploy. Each workflow serves a specific purpose in our development and deployment process. ### 1. Tests Workflow **File:** `.github/workflows/tests.yml` This workflow runs various tests to ensure code quality and functionality. **Triggers:** - Push to `main` or `master` branches - Pull request events (opened, synchronized, or reopened) **Key Features:** - Sets up a PostgreSQL service container - Runs database migrations - Executes Playwright (E2E) and Jest (Unit/Integration) tests in parallel shards - **Playwright tests are optional** - they provide feedback but don't block the workflow - Combines test reports and coverage - Performs SonarCloud analysis - Uploads test reports as artifacts **Process:** 1. Sets up PostgreSQL service 2. Checks out the repository 3. Sets up Node.js with yarn caching 4. Runs database migrations 5. Installs dependencies and Playwright browsers 6. Runs Playwright tests in 3 parallel shards (**optional - won't fail workflow**) 7. Runs Jest tests in 3 parallel shards (**required**) 8. Combines test reports and coverage 9. Performs SonarCloud scan 10. Uploads test reports as artifacts #### Automated Test Reporting When running tests through GitHub Actions (on PRs or pushes to main/master), the workflow automatically generates separate test report comments: - **Unit Test Results**: Shows combined Jest test outcomes from all shards - Pass/Fail/Skip counts - Test duration - Detailed failure messages in collapsible sections - **E2E Test Results**: Shows combined Playwright test outcomes from all shards (**optional**) - Pass/Fail/Skip counts - Test duration - Detailed failure messages in collapsible sections - **Note**: E2E test failures won't prevent PR merging Comments are recreated on each test run to maintain visibility in the PR activity feed. #### Test Artifacts The following test artifacts are preserved: - Playwright reports (per shard and combined, 30 days retention) - **optional** - Playwright failure traces (per shard, 7 days retention) - **optional** - Jest coverage reports (per shard and combined, 30 days retention) - **required** To access these artifacts: 1. Go to the GitHub Actions run 2. Scroll to the bottom 3. Look for the \"Artifacts\" section 4. Combined reports provide the full test overview For more detailed information about our CI testing pipeline, please refer to [CI_TESTS.README.md](./CI_TESTS.README.md). ### 2. Deploy Workflow **File:** `.github/workflows/deploy.yml` This workflow handles the deployment of the application to a server. **Triggers:** - Push to the `master` branch **Key Features:** - Uses SSH to connect to the deployment server - Updates the repository on the server - Builds and restarts the application **Process:** 1. Connects to the server via SSH 2. Navigates to the project directory 3. Resets the repository to a clean state 4. Pulls the latest changes from the master branch 5. Installs dependencies 6. Builds the application 7. Restarts the application using PM2 These workflows work together to ensure that code changes are properly versioned, thoroughly tested, and securely deployed to the production environment. --- This is a [Next.js](https://nextjs.org/) project bootstrapped with [`create-next-app`](https://github.com/vercel/next.js/tree/canary/packages/create-next-app). This project currently does not use any CSS assistance (i.e. pre-processors, tailwind, etc.) so, true BEM style CSS is somewhat challenging. When it comes to props that propagate into a `className` value that control visual elements such as width or color (i.e. width = 'md'), do not use BEM modifier notation (i.e. `--modifier`). Instead, create a separate class (i.e. `.md`) and style it accordingly. This is to allow for cleaner CSS due to the absence of many utilities CSS pre-processors generally provide. ## Getting Started If you end up trying both methods you are likely to encounter issues. Common troubleshooting: **I can't connect to the postgresql server** If you are using the docker development experience, ensure you do not have a postgres server actively running already causing conflicts. ```bash sudo service postgresql stop ``` Similarly, if you are **not** using the docker development experience, ensure you Dockerfile.docs docker-compose.dev.yml docker-compose.yml docker-postgres docs documentation-coverage.md have a locally running postgres server. **relation issue with tables** If you are running into missing tables errors, you are likely experiencing user error. Drop your tables that have the same names as the ones used in this project and run the 000-init.sql scripts to properly initialize your local database. **Error: EACCES: permission denied, unlink '\*\*/idling.app/\__UI/.next/server/_\*\*.js'** NextJS build files are conflicting. Delete the `.next` directory. ### With Docker ‚ö†Ô∏è When using docker and running playwright tests, the postgres data consumed by playwright will use the same data you have populated manually as well as any data pre-populated via migration scripts. Install docker on ubuntu: https://docs.docker.com/engine/install/ubuntu/#install-using-the-repository - for step 2: install latest If permission issues come up, add docker group to your user then restart machines: ```bash sudo usermod -aG docker $USER ``` With docker installed: ```bash yarn dev:docker # enter 1 ``` To shutdown docker containers: ```bash yarn dev:docker # enter 2 ``` To wipe the postgres database and start fresh: ```bash yarn dev:docker # enter 3 ``` To seed the postgres database: ```bash # attach to the nextjs container docker exec -it nextjs sh # run the seed script yarn dev:seed ``` ### Without Docker Ensure you have postgres setup, a `.env.local` file in the root of the project directory, and have node pacakges installed before beginning. This project uses `yarn` and `npx` so, package-lock.json has been added to the `.gitigore` list. First, run the development server: ```bash npm run dev # or yarn dev # or pnpm dev # or bun dev ``` To seed the postgres database (make sure it is up and running): ```bash # run the seed script yarn dev:seed ``` Open [http://localhost:3000](http://localhost:3000) with your browser to see the result. ## Documentation Development This project uses Jekyll for documentation hosted on GitHub Pages. The documentation is located in the `DOCS/` directory. ### Prerequisites To develop documentation locally, you need: - Ruby (version 2.7 or higher) - Bundler gem - Jekyll gem Install Ruby and Bundler: ```bash # On Ubuntu/Debian sudo apt-get install ruby-full build-essential zlib1g-dev # Install Bundler gem install bundler ``` ### DOCS Development 1. **Install dependencies** (first time only): ```bash yarn docs:install ``` 2. **Start local development server**: ```bash yarn docs:dev ``` This will start Jekyll with live reload at [http://localhost:4000](http://localhost:4000) 3. **Build documentation-coverage.md (for testing): ```bash yarn docs:build ``` ### DOCS Deployment Documentation is automatically deployed to GitHub Pages via GitHub Actions when changes are pushed to the `main` branch. The workflow is defined in `.github/workflows/docs.yml`. **Manual deployment** (if needed): - Push changes to the `main` branch - GitHub Actions will automatically build and deploy to GitHub Pages - Documentation will be available at your GitHub Pages URL ### DOCS Structure - `DOCS/_config.yml` - Jekyll configuration - `DOCS/index.md` - Homepage - `DOCS/getting-started.md` - Getting started guide - `DOCS/database/` - Database-related documentation - `DOCS/development/` - Development guides - `DOCS/deployment/` - Deployment documentation - `DOCS/project/` - Project-specific documentation All markdown files include proper Jekyll front matter for navigation and SEO. You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file. This project uses [`next/font`](https://nextjs.org/docs/basic-features/font-optimization) to automatically optimize and load Inter, a custom Google Font. ### Postgres ### Database Management #### Connecting to PostgreSQL in Docker The project uses PostgreSQL running in a Docker container. Here's how to interact with it: 1. **Connecting to the Database** ```bash docker exec -it postgres psql -U postgres -d idling ``` This connects you to the PostgreSQL interactive terminal where you can run SQL commands directly. Common PSQL commands: - `\l` - List all databases - `\dt` - List all tables in current database - `\d table_name` - Describe a specific table - `\c database_name` - Switch to a different database - `\q` - Quit psql #### Database Initialization The database is initialized using two key files: - `docker-postgres/init.sql`: Runs when the Docker container first starts - `src/lib/scripts/000-init.sql`: Used for local development initialization These files create the base tables required for: - NextAuth authentication - Database migration tracking - Core application functionality #### Database Migrations The project uses a numbered migration system to track and apply database changes: 1. **Running Migrations** ```bash yarn migrations # select option 1 to run all pending migrations ``` Migration files follow the pattern: `0000-description.sql` where: - First 4 digits are an incrementing ID (e.g., 0000, 0001, 0002) - Followed by a descriptive name of what the migration does Each migration runs in isolation and is tracked in the `migrations` table to prevent duplicate runs. #### Database Management For detailed information about our migration system and how to use it, please see [MIGRATIONS.README.md](./MIGRATIONS.README.md). ## Testing ### Testing Strategy for Modern Web Applications #### Why We Need Multiple Testing Layers Modern web applications require a comprehensive testing strategy to ensure reliability, maintainability, and confidence in deployments. Each testing layer serves a specific purpose: ##### üîç Unit Tests - Test individual functions and utilities in isolation - Fastest to run and easiest to maintain - Catch logic errors early in development - Guide better code design through testability - Example: Testing a date formatting utility ##### üß© Component Tests - Verify individual UI components work correctly - Test component props, states, and user interactions - Ensure accessibility standards are met - Catch UI regressions early - Example: Testing a button component's different states ##### üîÑ Integration Tests - Test how multiple components work together - Verify data flow between components - Catch interface mismatches - Example: Testing a form submission flow ##### üåê End-to-End (E2E) Tests - Test complete user journeys - Verify application works in real browser environments - Catch deployment and environment issues - Example: Testing user login through multiple pages #### Benefits of This Approach - **Fast Feedback**: Unit and component tests provide immediate feedback during development - **Confidence**: Integration and E2E tests ensure the application works as a whole - **Maintainability**: Different test types make it easier to identify where issues occur - **Agile Ready**: Supports continuous integration and deployment (CI/CD) - **Cost Effective**: Catches bugs at the appropriate level where they're cheapest to fix #### Testing Pyramid ``` /----------\ / End-to-End \ / Integration \ / Component \ / Unit \ /---------------------\ ``` All code that can be tested via jest tests should be. Playwright will expand what is testable when added. Opt for existing selectors for static content testing such as `getBy**` and `queryAllBy**`. For dynamic content, adding a `data-testid` to the markup being tested and then using the appropriate `**byTestId` selector method(s). Refer to the following excerpt from the [React Testing Library documentation regarding test IDs](https://testing-library.com/docs/queries/bytestid/): > In the spirit of [the guiding principles](https://testing-library.com/docs/guiding-principles), it is recommended to use this only after the other queries don't work for your use case. Using data-testid attributes do not resemble how your software is used and should be avoided if possible. That said, they are way better than querying based on DOM structure or styling css class names. Learn more about data-testids from the blog post \"[Making your UI tests resilient to change](https://kentcdodds.com/blog/making-your-ui-tests-resilient-to-change)\" The NPM package jest-chain has been added to allow chaining expect methods within jest .test test files (not in playwright .spec test files). ### Jest You can run jest test with a few different scripts: - `yarn test` is the default and will run test suites for changed files - `yarn test:ci` will run all test suites and is what is run on CI systems All test scripts will run against `**.test.tsx` files. > **Note:** You can append `--silent` to any test command (e.g., `yarn test --silent`) to suppress console output during test execution. #### Unit Unit tests for all utility functions must be written via jest. #### Component & Integration via React testing library (RTL) w/jest assertions [***.test.tsx] Individual component files (.tsx) within `components/` must have an accompanying `***.test.tsx` files. These tests should cover as many scenarios as possible for the standalone component. Page component files must have an accompanying `***.test.tsx` files. These tests are **integration** tests which must test a combination of multiple components in relation to one another. Additionally, these tests should have some user event actions to simulate real-world user events and outcomes that can then have assertions made against (i.e. clicking a button changes it to be in a loading state). If the `<FadeIn />` component is being used on the page being tested via Playwright, add a manual wait-time of two seconds to ensure the fade-in animations are all completed. This is necessary because the animation gradually changes the opacity from 0 to 1 and playwright can analyze elements during animations. If the animation is not yet complete, less than one opacity will result in darker than expected colors resulting in a failed contrast accessibility check. Additionally, excluding elements from the checkA11y method must be done very sparingly as an excluded element will also exclude all of its descendants. In the use-case of the FadeIn component, it can wrap any valid react node to give it a fade in loading animation that starts on component mount. This means unintentional exclusion of a large portion of a page from the accessibility evaluation pipeline. ### E2E via Playwright [***.spec.ts] Playwright tests are where anything else that can't be tested in unit, component, or integration tests is tested. These are tests that make assertions against entire user flows in a simulated browser (ideally) allowing for the most accurate and expensive. Because of their boon and gain, E2E tests tend to be best written for the least amount of testing. This means that you should have most if not all business logic, already being tested via unit, component, and integration tests. The resulting list of things to test within an end-to-end framework should be less than what you think it should be unless you have a very large application with dozens of unique user flows to test. A proper environment should exist to allow testing deployment and environment issues (one of the benefits of E2E simulation). The most common testing to be expected within E2E are: accessibility, user flows that involve multiple pages (routing/navigation actions), browser button behaviour, and live BE and FE integration testing (things that cannot be tested with dummy data). Playwright tests are scoped at the browser (including type) level. This project is configured to run all playwright tests (`***.spec.ts`) on major browser and mobile devices (chromium, firefox, webkit, mobile chrome, mobile safari, microsoft edge, & google chrome). Refer to the `playwright.config.ts` for more details. Playwright tests are where accessibility analysis/assertions must be made via the utility method `checkA11y`. To test a page that requires authentication, ensure you have the correct environment variables (refer to .env.local.example) and are using the testing utility method `testWithFakeAuth`. > While e2e tests can cover _everything_, you must still write unit, component, & integration tests separately due to the highly variable nature of web browsers. When it comes to accessibility testing, `@axe-core/playwright` has been added. This package is used to produce a utility method that accepts a page argument to analyze and will output any violations with the offending nodes defined. Scripts you may need for first time setup: | script | | ----------------------------------------------------------- | | `yarn playwright install` | | `yarn playwright install chromium` | | `yarn playwright install-deps --legacy-peer-deps` | | `npm install -D @playwright/test@latest --legacy-peer-deps` | You can run playwright test with a few different scripts: - `yarn e2e` is the default script that should be used while writing e2e tests - `yarn e2e:headless` is the script to run to run all playwright tests. This is the script used on CI systems All test scripts will run against `**.spec.ts` files. ## Deployment This project was created from the NextJS quickstart script (bootstrapped) however, it does not have TailwindCSS. Additionally, it uses basic CSS at the moment. This project is deployed manually to an ubuntu environment in the cloud. This process involves: - accessing the cloud instance to host the project - ensuring the postgres back-end requirements are met - setting up the project `.env.local` with environment variables for the host - running `yarn && yarn build && yarn start` Optionally, you may run the built project files with pm2 (if you have it) via `pm2 start \"npm start\" --name \"idling.app\"`. Refer to the pm2 documentation for auto-starting on environment startup. ## Learn More To learn more about Next.js, take a look at the following resources: - [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API. - [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial. You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js/) - your feedback and contributions are welcome! ### PostgreSQL Create user `CREATE ROLE myuser LOGIN PASSWORD 'mypass';` Update user password `ALTER USER myuser WITH PASSWORD 'thepassword';` login `psql -h localhost -d mydatabase -U myuser -p <port>` create database `CREATE DATABASE mydatabase WITH OWNER = myuser;` list databases `\l` choose database `\c database_name` show tables in selected database `\dt` or `SELECT DOCUMENTATION_ARCHITECTURE.md Dockerfile Dockerfile.docs LINK_AUDIT.md LinkedIn_Documentation_Infrastructure_Report.md PRODUCTION_PERFORMANCE_COMMANDS.txt PRODUCTION_PERFORMANCE_COMMANDS_WITH_PASSWORD.txt README-DB-EXPLORER.md README.md TESTING.md __mocks__ changelog-preset.js commitlint.config.js commits community coverage custom-eslint-rules debug-content-parser.js docker-compose.dev.yml docker-compose.yml docker-postgres docs documentation-coverage.md e2e global.d.ts index.md jekyll jest.config.js jest.env.js jest.setup.js logs migrations next-env.d.ts next.config.js node_modules package-lock.json package.json playwright-report playwright.config.ts pnpm-lock.yaml public scripts seed-db-faker.js sonar-project.properties src swagger.config.js test-results test_output.txt tsconfig.json tsconfig.tsbuildinfo updates yarn.lock FROM pg_catalog.pg_tables;` See more in this [postgres cheat sheet](https://learnsql.com/blog/postgresql-cheat-sheet/postgresql-cheat-sheet-a4.pdf) ## Features - **Smart Filtering System**: Filter posts by hashtags, authors, and mentions with URL parameter support - **Mention Filter Tooltip**: Hover over user mention pills to choose between filtering by author or by content mentions - **Thread Management**: Nested replies with configurable depth limits - **Real-time Updates**: Optimistic UI updates with state management via Jotai - **Advanced Search**: Support for multiple tags with AND/OR logic ## Documentation Development This project uses Jekyll for documentation hosted on GitHub Pages. The documentation is located in the `DOCS/` directory. ### Prerequisites To develop documentation locally, you need: - Ruby (version 2.7 or higher) - Bundler gem - Jekyll gem Install Ruby and Bundler: ```bash # On Ubuntu/Debian sudo apt-get install ruby-full build-essential zlib1g-dev # Install Bundler gem install bundler ``` ### DOCS Development 1. **Install dependencies** (first time only): ```bash yarn docs:install ``` 2. **Start local development server**: ```bash yarn docs:dev ``` This will start Jekyll with live reload at [http://localhost:4000](http://localhost:4000) 3. **Build documentation-coverage.md (for testing): ```bash yarn docs:build ``` ### DOCS Deployment Documentation is automatically deployed to GitHub Pages via GitHub Actions when changes are pushed to the `main` branch. The workflow is defined in `.github/workflows/docs.yml`. **Manual deployment** (if needed): - Push changes to the `main` branch - GitHub Actions will automatically build and deploy to GitHub Pages - Documentation will be available at your GitHub Pages URL ### DOCS Structure - `DOCS/_config.yml` - Jekyll configuration - `DOCS/index.md` - Homepage - `DOCS/getting-started.md` - Getting started guide - `DOCS/database/` - Database-related documentation - `DOCS/development/` - Development guides - `DOCS/deployment/` - Deployment documentation - `DOCS/project/` - Project-specific documentation All markdown files include proper Jekyll front matter for navigation and SEO. ",
    "./TESTING.md": "# üß™ Testing Guide Welcome to the comprehensive testing guide for this project! This document covers all testing frameworks, patterns, and best practices. ## üìã Table of Contents - [üéØ Testing Overview](#-testing-overview) - [üÉè Jest (Unit & Integration Tests)](#-jest-unit--integration-tests) - [üé≠ Playwright (E2E Tests)](#-playwright-e2e-tests) - [üöÄ Quick Start](#-quick-start) - [‚öôÔ∏è Configuration](#-configuration) - [üõ†Ô∏è Development Workflow](#Ô∏è-development-workflow) - [üîß Debugging](#-debugging) - [üìä Coverage](#-coverage) - [üèóÔ∏è Best Practices](#Ô∏è-best-practices) - [‚ùì Troubleshooting](#-troubleshooting) ## üéØ Testing Overview This project uses **two completely separate testing frameworks**: ### Jest (Unit & Integration Tests) - **Purpose**: Test individual components, functions, and modules in isolation - **File Pattern**: `src/**/*.test.{ts,tsx,js,jsx}` - **Framework**: Jest + React Testing Library - **Runs**: In Node.js environment with jsdom - **Focus**: Logic, component behavior, API functions ### Playwright (End-to-End Tests) - **Purpose**: Test complete user workflows in real browsers - **File Pattern**: `e2e/**/*.spec.ts` - **Framework**: Playwright - **Runs**: In real browsers (Chromium, Firefox, WebKit) - **Focus**: User interactions, full application flows > **‚ö†Ô∏è Important**: These frameworks are completely independent and should never be mixed or imported into each other! ## üÉè Jest (Unit & Integration Tests) ### Quick Commands ```bash # Run all Jest tests yarn test # Run tests in watch mode yarn test:watch # Run tests with coverage yarn test:coverage # Run specific test file yarn test Button.test.tsx # Run tests matching pattern yarn test --testNamePattern=\"should render\" ``` ### File Structure ``` src/ ‚îú‚îÄ‚îÄ components/ ‚îÇ ‚îú‚îÄ‚îÄ Button/ ‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ Button.tsx ‚îÇ ‚îÇ ‚îî‚îÄ‚îÄ Button.test.tsx # ‚úÖ Jest test ‚îÇ ‚îî‚îÄ‚îÄ Form/ ‚îÇ ‚îú‚îÄ‚îÄ Form.tsx ‚îÇ ‚îî‚îÄ‚îÄ __tests__/ ‚îÇ ‚îî‚îÄ‚îÄ Form.test.tsx # ‚úÖ Jest test ‚îú‚îÄ‚îÄ lib/ ‚îÇ ‚îú‚îÄ‚îÄ utils.ts ‚îÇ ‚îî‚îÄ‚îÄ utils.test.ts # ‚úÖ Jest test ‚îî‚îÄ‚îÄ app/ ‚îú‚îÄ‚îÄ page.tsx ‚îî‚îÄ‚îÄ page.test.tsx # ‚úÖ Jest test ``` ### Writing Jest Tests #### Component Testing Example ```typescript // src/components/Button/Button.test.tsx import { render, screen, fireEvent } from '@testing-library/react'; import { Button } from './Button'; describe('Button Component', () => { it('should render with correct text', () => { render(<Button>Click me</Button>); expect(screen.getByRole('button')).toHaveTextContent('Click me'); }); it('should handle click events', () => { const handleClick = jest.fn(); render(<Button onClick={handleClick}>Click me</Button>); fireEvent.click(screen.getByRole('button')); expect(handleClick).toHaveBeenCalledTimes(1); }); }); ``` #### Server Action Testing Example ```typescript // src/app/api/actions.test.ts import { getSubmissionsAction } from './actions'; // Mock database module jest.mock('../../lib/db', () => ({ __esModule: true, default: { unsafe: jest.fn().mockResolvedValue([]) } })); describe('getSubmissionsAction', () => { it('should return submissions data', async () => { const result = await getSubmissionsAction({ onlyMine: false, userId: '', filters: [], page: 1, pageSize: 10 }); expect(result.data).toBeDefined(); expect(result.error).toBeUndefined(); }); }); ``` ### Jest Configuration Key configuration files: - `jest.config.js` - Main Jest configuration - `jest.setup.js` - Global test setup (mocks, polyfills) - `jest.env.js` - Environment variables for tests ## üé≠ Playwright (End-to-End Tests) ### Quick Commands ```bash # Run all E2E tests yarn e2e # Run E2E tests in UI mode (interactive) yarn e2e:ui # Run E2E tests in headed mode (visible browser) yarn e2e:headed # Run specific test file yarn e2e login.spec.ts # Run tests in specific browser yarn e2e --project=chromium ``` ### File Structure ``` e2e/ ‚îú‚îÄ‚îÄ auth/ ‚îÇ ‚îú‚îÄ‚îÄ login.spec.ts # ‚úÖ Playwright test ‚îÇ ‚îî‚îÄ‚îÄ signup.spec.ts # ‚úÖ Playwright test ‚îú‚îÄ‚îÄ submissions/ ‚îÇ ‚îú‚îÄ‚îÄ create-submission.spec.ts # ‚úÖ Playwright test ‚îÇ ‚îî‚îÄ‚îÄ view-submissions.spec.ts # ‚úÖ Playwright test ‚îú‚îÄ‚îÄ fixtures/ ‚îÇ ‚îî‚îÄ‚îÄ test-data.ts # Test data helpers ‚îî‚îÄ‚îÄ utils/ ‚îî‚îÄ‚îÄ helpers.ts # E2E test utilities ``` ### Writing Playwright Tests #### Page Interaction Example ```typescript // e2e/submissions/create-submission.spec.ts import { test, expect } from '@playwright/test'; test.describe('Create Submission', () => { test('should create a new submission', async ({ page }) => { // Navigate to the page await page.goto('/submissions/new'); // Fill out the form await page.fill('[data-testid=\"submission-title\"]', 'My Test Submission'); await page.fill('[data-testid=\"submission-url\"]', 'https://example.com'); await page.selectOption('[data-testid=\"submission-category\"]', 'tech'); // Submit the form await page.click('[data-testid=\"submit-button\"]'); // Verify the result await expect(page.locator('[data-testid=\"success-message\"]')).toBeVisible(); await expect(page).toHaveURL(/\/submissions\/\d+/); }); }); ``` #### Authentication Example ```typescript // e2e/auth/login.spec.ts import { test, expect } from '@playwright/test'; test.describe('Authentication', () => { test('should login successfully', async ({ page }) => { await page.goto('/login'); // Mock authentication if needed await page.route('**/api/auth/**', (route) => { route.fulfill({ status: 200, body: JSON.stringify({ user: { id: '1', name: 'Test User' } }) }); }); await page.click('[data-testid=\"login-button\"]'); await expect(page.locator('[data-testid=\"user-menu\"]')).toBeVisible(); }); }); ``` ### Playwright Configuration Key configuration files: - `playwright.config.ts` - Main Playwright configuration - Separate test directories and output folders - Browser-specific configurations ## üöÄ Quick Start ### Running All Tests ```bash # Run Jest tests (unit/integration) yarn test # Run Playwright tests (E2E) yarn e2e # Run both test suites yarn test && yarn e2e ``` ### Development Workflow 1. **Write Jest tests first** for components and functions 2. **Run Jest tests** to verify logic works 3. **Write Playwright tests** for user workflows 4. **Run E2E tests** to verify full application behavior ## ‚öôÔ∏è Configuration ### Jest Configuration Highlights ```javascript // jest.config.js module.exports = { testEnvironment: 'jsdom', testPathIgnorePatterns: [ '<rootDir>/e2e/', // ‚úÖ Ignore Playwright tests '\\.spec\\.(ts|tsx)$' // ‚úÖ Ignore .spec files ], testMatch: [ '<rootDir>/src/**/*.test.(ts|tsx|js|jsx)' // ‚úÖ Only Jest tests ], setupFilesAfterEnv: ['<rootDir>/jest.setup.js'], maxWorkers: 1, // ‚úÖ Prevent database conflicts forceExit: true, // ‚úÖ Prevent hanging detectOpenHandles: true // ‚úÖ Debug async issues }; ``` ### Playwright Configuration Highlights ```typescript // playwright.config.ts export default defineConfig({ testDir: './e2e', // ‚úÖ Only E2E tests projects: [ { name: 'chromium', use: { ...devices['Desktop Chrome'] } }, { name: 'firefox', use: { ...devices['Desktop Firefox'] } }, { name: 'webkit', use: { ...devices['Desktop Safari'] } } ], webServer: { command: 'yarn build && yarn start', url: 'http://127.0.0.1:3000' } }); ``` ## üõ†Ô∏è Development Workflow ### VS Code Integration The project includes VS Code configurations for enhanced testing: #### Launch Configurations (`.vscode/launch.json`) - **Debug Jest Tests**: Debug individual Jest test files - **Debug Playwright Tests**: Debug E2E tests with breakpoints - **Debug Next.js**: Debug the application server #### Tasks (`.vscode/tasks.json`) - **Run Jest Tests**: Execute Jest tests with various options - **Run Playwright Tests**: Execute E2E tests in different modes - **Combined Test Tasks**: Run both test suites #### Settings (`.vscode/settings.json`) - **Jest Integration**: Auto-discovery and inline test results - **Playwright Integration**: Test explorer and trace viewing - **File Associations**: Proper syntax highlighting for test files ### Recommended Extensions The project suggests these VS Code extensions: - **Jest**: Inline test results and debugging - **Playwright Test for VSCode**: E2E test management - **Test Explorer UI**: Unified test interface ## üîß Debugging ### Debugging Jest Tests #### In VS Code 1. Set breakpoints in your test file 2. Use \"Debug Jest Tests\" launch configuration 3. Select specific test file or run all tests #### Command Line ```bash # Debug with Node.js debugger node --inspect-brk node_modules/.bin/jest --runInBand # Run single test with verbose output yarn test --verbose Button.test.tsx ``` ### Debugging Playwright Tests #### In VS Code 1. Set breakpoints in your spec file 2. Use \"Debug Playwright Tests\" launch configuration 3. Browser will pause at breakpoints #### Command Line ```bash # Debug mode with browser DevTools yarn e2e --debug # Headed mode to see browser actions yarn e2e --headed # UI mode for interactive debugging yarn e2e:ui ``` #### Playwright Traces ```bash # Generate trace files yarn e2e --trace on # View traces npx playwright show-trace test-results/trace.zip ``` ## üìä Coverage ### Jest Coverage ```bash # Generate coverage report yarn test:coverage # View coverage in browser open coverage/lcov-report/index.html ``` Coverage configuration in `jest.config.js`: ```javascript collectCoverageFrom: [ 'src/**/*.{js,jsx,ts,tsx}', '!src/**/*.d.ts', '!src/**/*.stories.tsx', '!src/**/*.spec.{ts,tsx}', // ‚úÖ Exclude Playwright files '!e2e/**/*' // ‚úÖ Exclude E2E directory ]; ``` ### Playwright Reports ```bash # Generate HTML report yarn e2e --reporter=html # View report npx playwright show-report ``` ## üèóÔ∏è Best Practices ### Jest Best Practices 1. **Test Structure**: Use `describe` blocks to group related tests 2. **Mocking**: Mock external dependencies and APIs 3. **Assertions**: Use specific matchers (`toHaveTextContent` vs `toBeTruthy`) 4. **Cleanup**: Clean up mocks between tests 5. **Database**: Mock database calls to prevent hanging ```typescript // ‚úÖ Good Jest test structure describe('UserService', () => { beforeEach(() => { jest.clearAllMocks(); }); describe('getUserById', () => { it('should return user when found', async () => { // Arrange const mockUser = { id: '1', name: 'John' }; mockDb.findUser.mockResolvedValue(mockUser); // Act const result = await getUserById('1'); // Assert expect(result).toEqual(mockUser); expect(mockDb.findUser).toHaveBeenCalledWith('1'); }); }); }); ``` ### Playwright Best Practices 1. **Page Objects**: Create reusable page object models 2. **Selectors**: Use `data-testid` attributes for reliable element selection 3. **Waits**: Use explicit waits instead of timeouts 4. **Independence**: Each test should be independent and atomic 5. **Cleanup**: Clean up test data after each test ```typescript // ‚úÖ Good Playwright test structure test.describe('Submission Flow', () => { test.beforeEach(async ({ page }) => { await page.goto('/'); // Setup test data }); test.afterEach(async ({ page }) => { // Cleanup test data }); test('should create submission successfully', async ({ page }) => { // Use page object methods await submissionPage.fillForm({ title: 'Test Submission', url: 'https://example.com' }); await submissionPage.submit(); // Verify with explicit waits await expect(page.locator('[data-testid=\"success-message\"]')).toBeVisible(); }); }); ``` ### Framework Separation Rules 1. **Never import Playwright in Jest tests** 2. **Never import Jest utilities in Playwright tests** 3. **Keep test files in separate directories** 4. **Use different file extensions** (`.test.ts` vs `.spec.ts`) 5. **Separate configurations and setup files** ## ‚ùì Troubleshooting ### Common Jest Issues #### Tests Hanging ```bash # Check for open handles yarn test --detectOpenHandles # Force exit after completion yarn test --forceExit # Run with single worker yarn test --maxWorkers=1 ``` #### Module Resolution Issues ```bash # Clear Jest cache yarn test --clearCache # Check module paths in jest.config.js moduleNameMapping: { '^@/(.*)$': '<rootDir>/src/$1' } ``` #### Database Connection Issues ```typescript // Mock database in individual test files jest.mock('../../lib/db', () => ({ __esModule: true, default: { unsafe: jest.fn().mockResolvedValue([]) } })); ``` ### Common Playwright Issues #### Browser Launch Failures ```bash # Install browsers npx playwright install # Install system dependencies npx playwright install-deps ``` #### Test Timeouts ```typescript // Increase timeout in playwright.config.ts export default defineConfig({ timeout: 30000, expect: { timeout: 5000 } }); ``` #### Element Not Found ```typescript // Use better selectors await page.locator('[data-testid=\"submit-button\"]').click(); // Wait for element await page.waitForSelector('[data-testid=\"submit-button\"]'); // Use explicit waits await expect(page.locator('[data-testid=\"result\"]')).toBeVisible(); ``` ### Performance Issues #### Jest Performance - Use `maxWorkers: 1` for database tests - Mock heavy dependencies - Use `--onlyChanged` for faster feedback #### Playwright Performance - Use `fullyParallel: true` for independent tests - Optimize selectors and waits - Use browser contexts for isolation ## üéØ Summary This project maintains **strict separation** between Jest and Playwright: - **Jest**: Fast unit/integration tests for components and logic - **Playwright**: Comprehensive E2E tests for user workflows - **Independent**: Separate configurations, file patterns, and purposes - **Complementary**: Together they provide complete test coverage ### Test Commands Quick Reference ```bash # Jest (Unit/Integration) yarn test # Run all Jest tests yarn test:watch # Watch mode yarn test:coverage # With coverage yarn test Button.test.tsx # Specific file # Playwright (E2E) yarn e2e # Run all E2E tests yarn e2e:ui # Interactive mode yarn e2e:headed # Visible browser yarn e2e login.spec.ts # Specific file # Development yarn test && yarn e2e # Run both suites ``` Happy testing! üß™‚ú® ",
    "./commits/index.md": "--- layout: default title: 'Commit Guidelines' description: 'Conventional commit message format and development standards' permalink: /project/commits/ --- # üìù Commit Guidelines Standardized commit message format following Conventional Commits specification for consistent project history and automated tooling. ## üéØ Conventional Commits Format ``` <type>[optional scope]: <description> [optional body] [optional footer(s)] ``` ### Basic Examples ```bash feat: add user authentication system fix: resolve memory leak in image processing docs: update API documentation for user endpoints style: format code according to prettier rules refactor: extract utility functions to separate module test: add unit tests for user service chore: update dependencies to latest versions ``` ## üìã Commit Types | Type | Description | Example | | ---------- | --------------------------------------------------- | ------------------------------------------ | | `feat` | New feature or functionality | `feat: add dark mode toggle` | | `fix` | Bug fix | `fix: resolve login redirect issue` | | `docs` | Documentation changes | `docs: update installation guide` | | `style` | Code formatting, missing semicolons, etc. | `style: format components with prettier` | | `refactor` | Code changes that neither fix bugs nor add features | `refactor: simplify user validation logic` | | `test` | Adding or modifying tests | `test: add integration tests for API` | | `chore` | Maintenance tasks, dependency updates | `chore: update React to v18` | | `perf` | Performance improvements | `perf: optimize image loading` | | `ci` | CI/CD pipeline changes | `ci: add automated testing workflow` | | `build` | Build system or external dependency changes | `build: configure webpack for production` | | `revert` | Revert a previous commit | `revert: \"feat: add user preferences\"` | ## üîß Scopes Scopes provide additional context about the area of change: ### Frontend Scopes - `ui` - User interface components - `auth` - Authentication and authorization - `api` - API integration and services - `routing` - Navigation and routing - `state` - State management - `hooks` - Custom React hooks - `utils` - Utility functions ### Backend Scopes - `database` - Database schema and migrations - `models` - Data models and entities - `controllers` - API controllers - `middleware` - Express middleware - `services` - Business logic services - `validation` - Input validation - `security` - Security implementations ### Infrastructure Scopes - `docker` - Docker configuration - `deployment` - Deployment scripts and configs - `monitoring` - Logging and monitoring - `testing` - Test configuration and setup - `docs` - Documentation ### Examples with Scopes ```bash feat(auth): implement JWT token refresh mechanism fix(ui): resolve mobile responsive layout issues docs(api): add OpenAPI specification for user endpoints refactor(database): optimize user query performance test(auth): add unit tests for login flow chore(deps): update all development dependencies ``` ## üö® Breaking Changes For breaking changes, add `!` after the type/scope and include details in the footer: ```bash feat(api)!: change user endpoint response format BREAKING CHANGE: User API now returns `userId` instead of `id` field. Migration guide available in docs/migrations/user-api-v2.md ``` ## üìù Detailed Commit Messages ### Body Guidelines - Use the imperative mood: \"add feature\" not \"added feature\" - Explain what and why, not how - Wrap lines at 72 characters - Reference issues and pull requests when relevant ### Footer Guidelines - Reference GitHub issues: `Closes #123`, `Fixes #456` - Include breaking change notices - Add co-author information when applicable ### Complete Example ```bash feat(auth): implement OAuth2 integration with Google Add Google OAuth2 authentication to provide users with a seamless login experience. This reduces friction for new user registration and improves security by leveraging Google's authentication infrastructure. - Add Google OAuth2 strategy configuration - Implement callback handling and user creation - Add environment variables for client credentials - Update login UI with Google sign-in button Closes #234 Refs #189 ``` ## üîß Git Hooks and Automation ### Pre-commit Hook We use `commitlint` to enforce conventional commit format: ```javascript // commitlint.config.js module.exports = { extends: ['@commitlint/config-conventional'], rules: { 'type-enum': [ 2, 'always', [ 'feat', 'fix', 'docs', 'style', 'refactor', 'test', 'chore', 'perf', 'ci', 'build', 'revert' ] ], 'scope-case': [2, 'always', 'lower-case'], 'subject-case': [2, 'always', 'lower-case'], 'subject-max-length': [2, 'always', 72], 'body-max-line-length': [2, 'always', 72] } }; ``` ### Automated Changelog Conventional commits enable automatic changelog generation: - `feat` commits appear in \"Features\" section - `fix` commits appear in \"Bug Fixes\" section - Breaking changes get special highlighting - Scopes group related changes together ## üìä Examples by Category ### Feature Development ```bash feat(ui): add user profile editing interface feat(api): implement real-time notifications feat(auth): add two-factor authentication support feat(database): add user preferences table ``` ### Bug Fixes ```bash fix(ui): resolve button alignment on mobile devices fix(api): handle edge case in user validation fix(auth): prevent duplicate session creation fix(database): resolve connection pool exhaustion ``` ### Documentation ```bash docs(readme): update installation instructions docs(api): add examples for authentication endpoints docs(contributing): clarify pull request process docs(deployment): document production setup steps ``` ### Maintenance ```bash chore(deps): update Next.js to version 14 chore(config): update ESLint rules for TypeScript chore(ci): optimize GitHub Actions workflow chore(cleanup): remove deprecated utility functions ``` ## ‚úÖ Best Practices ### Do's ‚úÖ - Use imperative mood in commit messages - Keep the first line under 72 characters - Reference issues and pull requests - Group related changes in single commits - Write descriptive commit messages - Use conventional commit format consistently ### Don'ts ‚ùå - Don't use past tense (\"added\" ‚Üí \"add\") - Don't commit unrelated changes together - Don't use vague messages like \"fix stuff\" - Don't forget to include breaking change notices - Don't exceed line length limits - Don't commit without testing changes ## üîó Related Tools - **[Commitlint](https://commitlint.js.org/)** - Lint commit messages - **[Conventional Changelog](https://github.com/conventional-changelog/conventional-changelog)** - Generate changelogs - **[Semantic Release](https://semantic-release.gitbook.io/)** - Automated versioning - **[Husky](https://typicode.github.io/husky/)** - Git hooks management ## üöÄ Getting Started 1. **Install commitlint**: `npm install -g @commitlint/cli @commitlint/config-conventional` 2. **Set up git hooks**: `npm install husky --save-dev` 3. **Configure commitlint**: Create `commitlint.config.js` 4. **Start using conventional commits**: Follow the format above 5. **Review commit history**: Use `git log --oneline` to see your commits --- _Commit guidelines are enforced automatically via git hooks. Last updated: {{ site.time | date: \"%B %d, %Y\" }}_ ",
    "./community/communication/index.md": "--- layout: default title: 'üí¨ Communication' description: 'Community channels and communication guidelines' nav_order: 3 parent: 'üë• Community' has_children: true --- # üí¨ Communication Community channels, communication guidelines, and ways to stay connected with the Idling.app project. ## Overview We maintain multiple communication channels to serve different needs and preferences: - **Discord**: Real-time chat and community discussions - **GitHub**: Technical discussions, issues, and pull requests - **Updates**: Project announcements and release notifications ## Communication Channels ### [üí¨ Discord](./discord/) Real-time chat and community support: - **#general**: General project discussions - **#development**: Technical development topics - **#help**: Community support and questions - **#announcements**: Important project updates - **#random**: Off-topic and casual conversations ### [üêô GitHub](./github/) Technical discussions and project management: - **Issues**: Bug reports and feature requests - **Discussions**: Technical Q&A and RFC proposals - **Pull Requests**: Code reviews and contributions - **Projects**: Task tracking and sprint planning ### [üìß Updates](./updates/) Project announcements and notifications: - **Release Notes**: Detailed changelog for each release - **Feature Announcements**: New feature previews - **Community Newsletter**: Monthly project updates - **Security Advisories**: Important security updates ## Communication Guidelines ### Be Respectful ü§ù - Treat all community members with respect and kindness - Use inclusive language and avoid discriminatory comments - Be patient with newcomers and those learning - Respect different opinions and approaches to problems ### Stay On Topic üéØ - Keep discussions relevant to the channel or topic - Use appropriate channels for different types of discussions - Move lengthy technical discussions to GitHub when appropriate - Use threads for extended conversations in Discord ### Be Helpful üí° - Share knowledge and help others when possible - Provide context and details when asking questions - Search previous discussions before asking duplicate questions - Offer constructive feedback and suggestions ### Follow Code of Conduct üìã - Adhere to our [Code of Conduct](../contributing/code-of-conduct/) - Report inappropriate behavior to moderators - Maintain professionalism in all interactions - Respect privacy and confidentiality ## Getting Help ### For Users 1. **Check Documentation**: Search our docs first 2. **GitHub Issues**: Search existing issues for similar problems 3. **Discord #help**: Ask the community for assistance 4. **GitHub Discussions**: Start a discussion for complex topics ### For Developers 1. **GitHub Issues**: Report bugs and request features 2. **Discord #development**: Technical discussions with the team 3. **GitHub Discussions**: RFC proposals and architecture discussions 4. **Pull Requests**: Submit code contributions ### For Contributors 1. **Contributing Guide**: Read our [Contributing Guidelines](../contributing/) 2. **Discord #development**: Connect with other contributors 3. **GitHub Projects**: Track work and coordinate efforts 4. **Code Reviews**: Participate in the review process ## Communication Best Practices ### Asking Questions ```markdown ‚ùå Bad: \"My code doesn't work, help!\" ‚úÖ Good: **Problem**: Authentication fails with 401 error **Environment**: Next.js 14, local development **Steps to reproduce**: 1. Login with valid credentials 2. Navigate to protected route 3. Receive 401 error **Expected**: Should access protected route **Actual**: Redirected to login page **Code**: [Link to relevant code or paste snippet] ``` ### Reporting Issues ```markdown **Bug Report Template**: - **Title**: Clear, descriptive title - **Description**: Detailed problem description - **Steps to reproduce**: Numbered steps - **Expected behavior**: What should happen - **Actual behavior**: What actually happens - **Environment**: OS, browser, versions - **Screenshots**: If applicable - **Additional context**: Any other relevant information ``` ### Making Suggestions ```markdown **Feature Request Template**: - **Title**: Clear feature description - **Problem**: What problem does this solve? - **Solution**: Proposed solution or approach - **Alternatives**: Other solutions considered - **Benefits**: Why this would be valuable - **Implementation**: Technical considerations - **Examples**: Similar features in other projects ``` ## Community Events ### Regular Events - **Weekly Standups**: Monday team sync (contributors welcome) - **Monthly Community Call**: First Friday of each month - **Quarterly Planning**: Strategic planning sessions - **Annual Conference**: Virtual community conference ### Special Events - **Hackathons**: Community coding events - **Workshops**: Technical skill-building sessions - **AMAs**: Ask Me Anything sessions with maintainers - **Contributor Spotlights**: Celebrating community contributions ## Communication Schedule ### Daily - **Discord Activity**: Community chat and support - **GitHub Monitoring**: Issue triage and PR reviews - **Development Updates**: Progress sharing in #development ### Weekly - **Team Standup**: Monday morning sync - **Community Digest**: Weekly highlights and updates - **Issue Triage**: Review and prioritize new issues ### Monthly - **Community Call**: First Friday community meeting - **Newsletter**: Monthly project update email - **Metrics Review**: Community and project health metrics ### Quarterly - **Planning Session**: Strategic planning and roadmap updates - **Community Survey**: Feedback collection and analysis - **Contributor Recognition**: Celebrating community contributions ## Moderation ### Community Guidelines - **Respectful Communication**: Professional and inclusive language - **No Spam**: Avoid repetitive or promotional content - **Stay On Topic**: Keep discussions relevant to the channel - **No Harassment**: Zero tolerance for harassment or abuse ### Moderation Team - **Core Maintainers**: Project maintainers with full moderation rights - **Community Moderators**: Trusted community members - **Automated Moderation**: Bots for spam and inappropriate content - **Escalation Process**: Clear process for handling violations ### Reporting Issues - **Discord**: Use `/report` command or DM moderators - **GitHub**: Use issue templates or contact maintainers - **Email**: community@idling.app for sensitive issues - **Anonymous**: Anonymous reporting form available ## Language and Accessibility ### Supported Languages - **Primary**: English (all official documentation) - **Community**: Multiple languages supported in Discord - **Translation**: Community-driven translation efforts - **Accessibility**: Screen reader friendly formatting ### Accessibility Guidelines - **Alt Text**: Provide descriptions for images - **Clear Language**: Use simple, clear language - **Formatting**: Proper headings and structure - **Color**: Don't rely solely on color for information ## Privacy and Security ### Privacy Policy - **Data Collection**: What data we collect and why - **Data Usage**: How we use community data - **Data Sharing**: When and with whom we share data - **Data Rights**: Your rights regarding your data ### Security Practices - **Account Security**: Two-factor authentication recommended - **Sensitive Information**: Never share passwords or tokens - **Vulnerability Reporting**: Secure process for security issues - **Privacy Settings**: Configure your privacy preferences ## Next Steps - Join our [üí¨ Discord](./discord/) server for real-time chat - Explore [üêô GitHub](./github/) for technical discussions - Subscribe to [üìß Updates](./updates/) for project announcements - Review [ü§ù Contributing](../contributing/) guidelines to get involved ",
    "./community/contributing/code-of-conduct.md": "--- layout: default title: 'Code of Conduct' description: 'Community guidelines and standards for the Idling.app project' permalink: /community/contributing/code-of-conduct/ --- # üìú Code of Conduct ## üéØ Our Pledge We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation. We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community. ## üåü Our Standards Examples of behavior that contributes to a positive environment for our community include: ### ‚úÖ Encouraged Behaviors - **Demonstrating empathy and kindness** toward other people - **Being respectful** of differing opinions, viewpoints, and experiences - **Giving and gracefully accepting** constructive feedback - **Accepting responsibility** and apologizing to those affected by our mistakes, and learning from the experience - **Focusing on what is best** not just for us as individuals, but for the overall community - **Using welcoming and inclusive language** - **Being patient** with newcomers and those learning - **Celebrating diversity** and different perspectives - **Helping others** when they need assistance ### ‚ùå Unacceptable Behaviors Examples of unacceptable behavior include: - **Harassment or discrimination** of any kind - **Trolling, insulting, or derogatory comments** - **Personal or political attacks** - **Public or private harassment** - **Publishing others' private information** without their explicit permission - **Sexual attention or advances** of any kind - **Spam or self-promotion** without permission - **Disrupting discussions** or derailing conversations - **Other conduct** which could reasonably be considered inappropriate in a professional setting ## üõ°Ô∏è Enforcement Responsibilities Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful. Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate. ## üìç Scope This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official email address, posting via an official social media account, or acting as an appointed representative at an online or offline event. ### Community Spaces Include: - **GitHub repositories** and discussions - **Discord server** and voice channels - LinkedIn_Documentation_Infrastructure_Report.md and wikis - **Issue trackers** and pull requests - **Community forums** and chat rooms - **Social media** accounts and posts - **Events and meetups** (online and offline) - **Email communications** related to the project ## üö® Reporting Guidelines ### How to Report If you experience or witness unacceptable behavior, or have any other concerns, please report it by contacting the community leaders at: - **Email**: [conduct@idling.app](mailto:conduct@idling.app) - **Discord**: Direct message to any moderator - **GitHub**: Use the \"Report\" feature on relevant content ### What to Include When reporting, please include: - **Your contact information** (if you wish to be contacted) - **Names of any individuals involved** (use usernames/handles) - **When and where the incident occurred** - **Description of what happened** - **Any additional context** that might be helpful - **Screenshots or links** if applicable ### Confidentiality All reports will be reviewed and investigated promptly and fairly. All community leaders are obligated to respect the privacy and security of the reporter of any incident. ## ‚öñÔ∏è Enforcement Guidelines Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct: ### 1. Correction **Community Impact**: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community. **Consequence**: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested. ### 2. Warning **Community Impact**: A violation through a single incident or series of actions. **Consequence**: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban. ### 3. Temporary Ban **Community Impact**: A serious violation of community standards, including sustained inappropriate behavior. **Consequence**: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban. ### 4. Permanent Ban **Community Impact**: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals. **Consequence**: A permanent ban from any sort of public interaction within the community. ## ü§ù Community Guidelines ### For Contributors - **Be patient** with code reviews and feedback - **Be constructive** in your criticism and suggestions - **Be respectful** of different coding styles and approaches - **Be helpful** to newcomers and those learning - **Follow project standards** and conventions - **Test your code** before submitting pull requests - **Write clear commit messages** and documentation ### For Maintainers - **Be responsive** to issues and pull requests - **Be fair** in reviewing contributions - **Be clear** about project direction and decisions - **Be welcoming** to new contributors - **Provide constructive feedback** on submissions - **Maintain project quality** standards - **Communicate changes** and updates clearly ### For Community Members - **Be welcoming** to newcomers - **Be helpful** when others ask questions - **Be respectful** in all interactions - **Be patient** with different skill levels - **Share knowledge** and resources - **Celebrate achievements** and milestones - **Support each other** in learning and growth ## üåç Diversity and Inclusion We are committed to providing a welcoming and inclusive environment for all people, regardless of: - **Age** - All ages welcome - **Background** - All backgrounds and experiences valued - **Disability** - Accessibility is a priority - **Education** - All education levels welcome - **Ethnicity** - All ethnicities celebrated - **Gender** - All gender identities respected - **Experience** - From beginners to experts - **Location** - Global community welcome - **Religion** - All beliefs respected - **Sexual Orientation** - All orientations welcome ### Accessibility Commitment We strive to make our community accessible to everyone: - **Clear communication** in all interactions - **Alternative formats** for content when needed - **Assistive technology** support - **Flexible participation** options - **Accommodation requests** welcomed ## üéì Learning and Growth We believe in fostering an environment where everyone can learn and grow: ### For Beginners - **Ask questions** - No question is too basic - **Make mistakes** - They're part of learning - **Take your time** - Learn at your own pace - **Seek help** - The community is here to support you - **Share your journey** - Your perspective is valuable ### For Experienced Members - **Mentor others** - Share your knowledge - **Be patient** - Remember when you were learning - **Explain clearly** - Help others understand - **Encourage participation** - Welcome new voices - **Lead by example** - Model good behavior ## üìû Support and Resources ### Getting Help - **Technical Questions**: Ask in GitHub discussions or Discord - **Community Issues**: Contact moderators directly - **Code of Conduct Violations**: Report using the guidelines above - **General Support**: Reach out to community leaders ### Resources - **[Contributing Guide](../guidelines/)** - How to contribute to the project - **[Getting Started](../getting-started/)** - First steps for new contributors - **[Development Setup](../setup/)** - Technical setup instructions - **[Community Standards](../../standards/)** - Development and documentation standards ## üîÑ Updates and Changes This Code of Conduct may be updated from time to time. All community members will be notified of significant changes through: - **GitHub announcements** - **Discord notifications** - **Email updates (if subscribed) - **Documentation updates ## üìù Attribution This Code of Conduct is adapted from the [Contributor Covenant](https://www.contributor-covenant.org/), version 2.1, available at [https://www.contributor-covenant.org/version/2/1/code_of_conduct.html](https://www.contributor-covenant.org/version/2/1/code_of_conduct.html). Community Impact Guidelines were inspired by [Mozilla's code of conduct enforcement ladder](https://github.com/mozilla/diversity). For answers to common questions about this code of conduct, see the FAQ at [https://www.contributor-covenant.org/faq](https://www.contributor-covenant.org/faq). Translations are available at [https://www.contributor-covenant.org/translations](https://www.contributor-covenant.org/translations). ## üìû Contact Information - **Email**: [conduct@idling.app](mailto:conduct@idling.app) - **Discord**: [Join our Discord server](../communication/discord/) - **GitHub**: [Open an issue](https://github.com/Underwood-Inc/idling.app__UI/issues) --- **Last Updated**: {{ site.time | date: \"%B %d, %Y\" }} **Version**: 1.0.0 > **Remember**: This Code of Conduct is a living document that evolves with our community. Your feedback and suggestions are always welcome to help us create the best possible environment for everyone. ",
    "./community/contributing/index.md": "--- layout: default title: 'ü§ù Contributing' description: 'How to contribute to the Idling.app project' nav_order: 1 parent: 'üë• Community' has_children: true --- # ü§ù Contributing Welcome to the Idling.app contributor community! We're excited to have you join us in building something amazing. ## Overview There are many ways to contribute to Idling.app, and we value all types of contributions: - **Code**: Bug fixes, new features, and improvements - **Documentation**: Writing, editing, and improving docs - **Testing**: Finding bugs and testing new features - **Community**: Helping others and sharing knowledge - **Design**: UI/UX improvements and accessibility enhancements ## Quick Start ### 1. **Get Familiar** üìö - Read our [Getting Started Guide](../../docs/getting-started/) - Review the [Development Guidelines](../../docs/getting-started/) - Set up your [Development Environment](../../docs/getting-started/installation/) ### 2. **Find Something to Work On** üîç - Browse [Good First Issues](https://github.com/Underwood-Inc/idling.app__UI/labels/good%20first%20issue) - Check our [Project Board](https://github.com/Underwood-Inc/idling.app__UI/projects) - Join discussions in [Discord](../communication/discord/) ### 3. **Make Your Contribution** üöÄ - Fork the repository - Create a feature branch - Make your changes - Submit a pull request ## Ways to Contribute ### üêõ Bug Reports Help us improve by reporting bugs you encounter: ```markdown **Bug Report Template**: - **Title**: Clear, descriptive title - **Description**: What happened? - **Steps to reproduce**: How to recreate the issue - **Expected behavior**: What should happen - **Environment**: OS, browser, versions - **Screenshots**: If applicable ``` ### üí° Feature Requests Suggest new features or improvements: ```markdown **Feature Request Template**: - **Title**: Clear feature description - **Problem**: What problem does this solve? - **Solution**: Your proposed solution - **Alternatives**: Other approaches considered - **Benefits**: Why this would be valuable ``` ### üîß Code Contributions Contribute code improvements: 1. **Fork the repository** 2. **Create a branch**: `git checkout -b feature/your-feature-name` 3. **Make changes**: Follow our [coding guidelines](../../docs/getting-started/) 4. **Write tests**: Ensure your changes are tested 5. **Submit PR**: Create a pull request with clear description ### üìö Documentation Help improve our documentation: - **Fix typos and errors** - **Add missing information** - **Create new guides and tutorials** - **Improve existing explanations** - **Add code examples** ### üé® Design Contributions Improve user experience: - **UI/UX improvements** - **Accessibility enhancements** - **Visual design updates - **User flow optimization** - **Mobile responsiveness** ## Contribution Process ### 1. **Planning Phase** ``` Issue Creation ‚Üí Discussion ‚Üí Consensus ‚Üí Assignment ``` - Create or find an issue to work on - Discuss approach with maintainers - Get consensus on the solution - Get assigned to the issue ### 2. **Development Phase** ``` Fork ‚Üí Branch ‚Üí Code ‚Üí Test ‚Üí Document ``` - Fork the repository to your account - Create a feature branch - Implement your changes - Write comprehensive tests - Update documentation ### 3. **Review Phase** ``` PR Creation ‚Üí Automated Checks ‚Üí Code Review ‚Üí Approval ``` - Create a pull request with clear description - Ensure all automated checks pass - Address feedback from code review - Get approval from maintainers ### 4. **Merge Phase** ``` Final Review ‚Üí Merge ‚Üí Cleanup ‚Üí Celebration ``` - Final review by maintainers - Merge into main branch - Clean up branch and close issue - Celebrate your contribution! üéâ ## Code of Conduct We are committed to providing a welcoming and inclusive environment for all contributors. Please read and follow our [Code of Conduct](./code-of-conduct/). ### Our Values - **Respect**: Treat everyone with kindness and respect - **Inclusion**: Welcome contributors from all backgrounds - **Collaboration**: Work together to achieve common goals - **Growth**: Support each other's learning and development - **Quality**: Strive for excellence in everything we do ## Recognition We believe in recognizing and celebrating contributions: ### üèÜ Contributor Levels - **First-time Contributor**: Welcome to the community! - **Regular Contributor**: Consistent, valuable contributions - **Core Contributor**: Significant impact on the project - **Maintainer**: Trusted with project governance ### üéñÔ∏è Recognition Programs - **Monthly Contributor Spotlight**: Featured in newsletter - **Annual Awards**: Outstanding contribution recognition - **Swag Program**: Exclusive contributor merchandise - **Conference Speakers**: Represent the project at events ## Getting Help ### üÜò Need Help? - **Discord**: Join our [Discord server](../communication/discord/) for real-time help - **GitHub Discussions**: Ask questions in [GitHub Discussions](../communication/github/) - **Mentorship**: Request a mentor for guidance - **Office Hours**: Weekly office hours with maintainers ### üìö Resources - **[Getting Started Guide](../../docs/getting-started/)**: Step-by-step setup instructions - **[Development Guidelines](../../docs/getting-started/)**: Coding standards and best practices - **[Setup Guide](../../docs/getting-started/installation/)**: Development environment configuration - **[Code of Conduct](./code-of-conduct/)**: Community guidelines ## Contribution Guidelines ### üìã Before You Start - [ ] Read the [Getting Started Guide](../../docs/getting-started/) - [ ] Set up your [Development Environment](../../docs/getting-started/installation/) - [ ] Review our [Development Guidelines](../../docs/getting-started/) - [ ] Join our [Discord community](../communication/discord/) ### üîÑ Development Workflow - [ ] Fork the repository - [ ] Create a feature branch - [ ] Follow coding standards - [ ] Write comprehensive tests - [ ] Update documentation - [ ] Submit a pull request ### ‚úÖ Pull Request Checklist - [ ] Clear, descriptive title - [ ] Detailed description of changes - [ ] Link to related issue - [ ] All tests passing - [ ] Documentation updated - [ ] Code follows style guidelines ## Common Contribution Areas ### üöÄ High-Impact Areas - **Performance Optimization**: Improve application speed - **Accessibility**: Make the app more inclusive - **Testing**: Increase test coverage and quality - **Documentation**: Improve developer and user docs - **Security**: Enhance application security ### üéØ Good First Issues Perfect for new contributors: - **Documentation fixes**: Typos, missing info, examples - **UI improvements**: Small visual enhancements - **Test additions**: Add missing test cases - **Refactoring**: Code cleanup and organization - **Bug fixes**: Simple, well-defined issues ## Technical Requirements ### üõ†Ô∏è Required Skills - **JavaScript/TypeScript**: Primary development language - **React/Next.js**: Frontend framework - **Git**: Version control system - **Testing**: Jest, Playwright, or similar - **Documentation**: Markdown, technical writing ### üìö Nice to Have - **PostgreSQL**: Database knowledge - **Docker**: Containerization - **CI/CD**: GitHub Actions experience - **Design**: UI/UX skills - **Security**: Security best practices ## Maintainer Responsibilities ### üîß What Maintainers Do - **Code Review**: Review and approve pull requests - **Issue Triage**: Prioritize and label issues - **Release Management**: Coordinate releases - **Community Management**: Foster inclusive community - **Technical Direction**: Guide project architecture ### üéØ Becoming a Maintainer - **Consistent Contributions**: Regular, high-quality contributions - **Community Involvement**: Active in discussions and helping others - **Technical Expertise**: Deep understanding of the codebase - **Leadership**: Mentoring other contributors - **Nomination**: Nominated by existing maintainers ## Next Steps Ready to contribute? Here's how to get started: 1. **Read the [Getting Started Guide](../../docs/getting-started/)** - Learn the basics 2. **Set up your [Development Environment](../../docs/getting-started/installation/)** - Get your tools ready 3. **Review [Development Guidelines](../../docs/getting-started/)** - Understand our standards 4. **Join our [Discord](../communication/discord/)** - Connect with the community 5. **Find your first issue** - Start with something manageable 6. **Make your contribution** - Submit your first pull request! We're excited to work with you and can't wait to see what you'll contribute to Idling.app! üöÄ ",
    "./community/index.md": "--- layout: default title: Community permalink: /community/ --- # üë• Community Welcome to the idling.app community! This section contains everything you need to know about contributing to the project, following development standards, and staying connected with the community. ## ü§ù Contributing Learn how to contribute to the project: - [Getting Started](contributing/getting-started/) - First steps for contributors - [Guidelines](contributing/guidelines/) - Contribution guidelines and standards - [Development Setup](contributing/setup/) - Setting up development environment ## üìù Standards Development standards and best practices: - [Code Standards](standards/code/) - Code quality and style guidelines - [Documentation](standards/docs/) - Documentation writing guidelines - [Design System](standards/design/) - Design and UI/UX guidelines ## üí¨ Communication Stay connected with the community: - [Discord](communication/discord/) - Join our Discord community - [GitHub](communication/github/) - GitHub discussions and issues - [Updates](communication/updates/) - Project updates and announcements ## üìä Project Info Project management and insights: - [Reports](project/reports/) - Development reports and analysis - [Roadmap](project/roadmap/) - Project roadmap and future plans - [News](project/news/) - Latest project news and updates ## üåü Get Involved Ready to contribute? Here's how to get started: 1. **Join the Discord** - Connect with other contributors 2. **Read the Guidelines** - Understand our development standards 3. **Set up Development** - Get your environment ready 4. **Pick an Issue** - Find something to work on 5. **Submit a PRODUCTION_PERFORMANCE_COMMANDS.txt PRODUCTION_PERFORMANCE_COMMANDS_WITH_PASSWORD.txt - Share your contribution ## üîó Quick Links - [GitHub Repository](https://github.com/Underwood-Inc/idling.app__UI) - Source code - [Issues](https://github.com/Underwood-Inc/idling.app__UI/issues) - Bug reports and feature requests - [Pull Requests](https://github.com/Underwood-Inc/idling.app__UI/pulls) - Code contributions - [Documentation](../docs/) - Technical documentation - [Development](../dev/) - Development resources --- _Community resources are continuously updated. Last updated: {{ site.time | date: \"%B %d, %Y\" }}_ ",
    "./community/project/index.md": "--- layout: default title: 'üìä Project Info' description: 'Project management and development reports' nav_order: 4 parent: 'üë• Community' has_children: true --- # üìä Project Info Project management information, development reports, and strategic planning for Idling.app. ## Overview Stay informed about the project's progress, future direction, and key metrics: - **Reports**: Development progress, code quality, and performance metrics - **Roadmap**: Feature planning and release schedules - **News**: Project updates, releases, and announcements ## Project Status ### Current Phase: **Beta Development** üöß We're actively developing core features and gathering feedback from early users. ### Key Metrics - **Contributors**: 12 active developers - **Commits**: 1,247 total commits - **Issues**: 23 open, 156 closed - **Test Coverage**: 85% overall coverage - **Performance**: 95+ Lighthouse score ## Development Workflow ### Sprint Planning We follow a **2-week sprint cycle** with the following structure: ``` Week 1: Planning & Development ‚îú‚îÄ‚îÄ Sprint Planning Meeting ‚îú‚îÄ‚îÄ Feature Development ‚îú‚îÄ‚îÄ Code Reviews ‚îî‚îÄ‚îÄ Testing Week 2: Integration & Release ‚îú‚îÄ‚îÄ Integration Testing ‚îú‚îÄ‚îÄ Bug Fixes ‚îú‚îÄ‚îÄ Documentation Updates ‚îî‚îÄ‚îÄ Release Preparation ``` ### Release Schedule - **Major Releases**: Quarterly (every 3 months) - **Minor Releases**: Monthly feature updates - **Patch Releases**: Weekly bug fixes and improvements - **Hotfixes**: As needed for critical issues ## Project Structure ### Repository Organization ``` idling.app__UI/ ‚îú‚îÄ‚îÄ src/ # Application source code ‚îÇ ‚îú‚îÄ‚îÄ app/ # Next.js App Router pages ‚îÇ ‚îú‚îÄ‚îÄ components/ # Reusable UI components ‚îÇ ‚îú‚îÄ‚îÄ lib/ # Utilities and services ‚îÇ ‚îî‚îÄ‚îÄ types/ # TypeScript type definitions ‚îú‚îÄ‚îÄ tests/ # Test files and utilities ‚îú‚îÄ‚îÄ docs/ # Documentation source ‚îú‚îÄ‚îÄ DOCS/ # Jekyll documentation site ‚îî‚îÄ‚îÄ .github/ # GitHub workflows and templates ``` ### Team Structure - **Core Team**: 4 full-time developers - **Contributors**: 8 part-time contributors - **Maintainers**: 2 project maintainers - **Community**: 50+ community members ## Quality Assurance ### Code Quality Metrics - **ESLint Score**: 98% compliance - **TypeScript Coverage**: 95% typed code - **Duplication**: < 5% code duplication - **Complexity**: Average cyclomatic complexity < 10 ### Testing Strategy - **Unit Tests**: 85% coverage with Jest - **Integration Tests**: API and component testing - **E2E Tests**: Critical user flows with Playwright - **Performance Tests**: Load testing and optimization ### Security Measures - **Dependency Scanning**: Automated vulnerability detection - **Code Analysis**: Static analysis with SonarCloud - **Security Headers**: HTTPS, CSP, and security best practices - **Access Control**: Role-based permissions and authentication ## Project Governance ### Decision Making Process 1. **Proposal**: Feature or change proposals via GitHub issues 2. **Discussion**: Community feedback and technical review 3. **Decision**: Core team consensus and approval 4. **Implementation**: Development and testing 5. **Review**: Code review and quality assurance ### Communication Channels - **GitHub Issues**: Bug reports and feature requests - **GitHub Discussions**: Technical discussions and Q&A - **Discord**: Real-time chat and community support - **Email**: Project announcements and updates ## Available Reports ### [üìã Development Reports](./reports/) Detailed insights into development progress: - **Sprint Reports**: Sprint progress and velocity metrics - **Code Quality Reports**: Static analysis and quality metrics - **Performance Reports**: Application performance and optimization - **Security Reports**: Vulnerability assessments and fixes ### [üìÖ Project Roadmap](./roadmap/) Strategic planning and feature development: - **Feature Roadmap**: Planned features and priorities - **Release Timeline**: Upcoming releases and milestones - **Technical Debt**: Refactoring and improvement plans - **Dependencies**: External dependencies and integrations ### [üì∞ Project News](./news/) Latest updates and announcements: - **Release Notes**: Detailed changelog for each release - **Feature Announcements**: New feature previews and launches - **Community Updates**: Contributor spotlights and achievements - **Technical Blog**: Deep dives into technical decisions ## Contributing to Project Management ### How to Get Involved 1. **Join Discussions**: Participate in GitHub discussions 2. **Report Issues**: Submit bug reports and feature requests 3. **Contribute Code**: Submit pull requests and improvements 4. **Write Documentation**: Help improve project documentation 5. **Test Features**: Provide feedback on new features ### Project Roles - **Contributor**: Submit code, documentation, or bug reports - **Reviewer**: Review pull requests and provide feedback - **Maintainer**: Manage releases and project direction - **Community Manager**: Facilitate discussions and onboarding ## Key Performance Indicators (KPIs) ### Development Metrics - **Velocity**: Average story points per sprint - **Cycle Time**: Time from development to deployment - **Lead Time**: Time from idea to production - **Defect Rate**: Bugs per feature or release ### Quality Metrics - **Test Coverage**: Percentage of code covered by tests - **Code Quality**: Static analysis scores and metrics - **Performance**: Application speed and responsiveness - **Security**: Vulnerability count and resolution time ### Community Metrics - **Contributors**: Active contributors per month - **Contributions**: Pull requests and issues per month - **Community Growth**: New contributors and community members - **Engagement**: Discussion participation and feedback ## Project Tools ### Development Tools - **Version Control**: Git with GitHub - **CI/CD**: GitHub Actions for automated testing and deployment - **Project Management**: GitHub Projects for issue tracking - **Documentation**: Jekyll for documentation site generation ### Communication Tools - **Chat**: Discord for real-time communication - **Discussions**: GitHub Discussions for technical topics - **Email**: Mailing list for announcements - **Social Media**: Twitter for project updates ### Monitoring Tools - **Performance**: Lighthouse CI for performance monitoring - **Error Tracking**: Sentry for error monitoring and alerting - **Analytics**: Google Analytics for usage insights - **Uptime**: Monitoring service for availability tracking ## Future Plans ### Short-term Goals (Next 3 months) - Complete core feature development - Improve test coverage to 90% - Launch public beta - Establish contributor onboarding process ### Medium-term Goals (Next 6 months) - Implement advanced features - Scale infrastructure for growth - Build community partnerships - Establish documentation standards ### Long-term Vision (Next 12 months) - Achieve production-ready status - Expand feature set based on user feedback - Build sustainable open-source community - Explore commercial opportunities ## Next Steps - Review [üìã Development Reports](./reports/) for detailed metrics - Check [üìÖ Project Roadmap](./roadmap/) for upcoming features - Read [üì∞ Project News](./news/) for latest updates - Join [üí¨ Communication](../communication/) channels to get involved ",
    "./community/standards/index.md": "--- layout: default title: 'üìù Standards' description: 'Development standards and best practices' nav_order: 2 parent: 'üë• Community' has_children: true --- # üìù Standards Development standards and best practices for the Idling.app project. ## Overview Our standards ensure consistency, maintainability, and quality across all aspects of the project: - **Code Standards**: Formatting, naming, and architectural patterns - **Documentation**: Writing guidelines and structure requirements - **Design System**: UI/UX consistency and accessibility standards ## Why Standards Matter ### 1. **Consistency** üéØ - Uniform code style across all contributors - Predictable project structure - Consistent user experience ### 2. **Maintainability** üîß - Easier code reviews and debugging - Reduced onboarding time for new contributors - Clear patterns for common tasks ### 3. **Quality** ‚ú® - Fewer bugs through consistent patterns - Better performance through established practices - Improved accessibility and user experience ## Standard Categories ### [üìù Code Standards](./code/) Comprehensive guidelines for writing clean, maintainable code: - **TypeScript/JavaScript**: ESLint rules, naming conventions, and patterns - **React**: Component structure, hooks usage, and state management - **CSS**: Styling conventions, responsive design, and performance - **Testing**: Unit, integration, and E2E testing standards ### [üìö Documentation](./docs/) Guidelines for writing clear, helpful documentation: - **README Files**: Structure and content requirements - **API Documentation**: Endpoint documentation and examples - **Code Comments**: When and how to comment code - **User Guides**: Writing for different skill levels ### [üé® Design System](./design/) UI/UX standards and component guidelines: - **Color Palette**: Brand colors and accessibility ratios - **Typography**: Font choices, sizing, and hierarchy - **Components**: Reusable UI components and patterns - **Accessibility**: WCAG compliance and inclusive design ## Quick Reference ### Code Formatting ```typescript // ‚úÖ Good - consistent formatting interface UserProfile { id: string; name: string; email: string; createdAt: Date; } export async function getUserProfile(id: string): Promise<UserProfile> { const user = await db.user.findUnique({ where: { id } }); if (!user) throw new Error('User not found'); return user; } ``` ### Documentation Structure ````markdown # Feature Name Brief description of what this feature does. ## Usage ### Basic Example ```typescript // Code example here ``` ```` ### Advanced Usage // More complex examples ## API Reference // Detailed API documentation ```` ### Component Standards ```typescript // ‚úÖ Good - consistent component structure interface ButtonProps { variant?: 'primary' | 'secondary' | 'danger' size?: 'sm' | 'md' | 'lg' disabled?: boolean onClick?: () => void children: React.ReactNode } export function Button({ variant = 'primary', size = 'md', disabled = false, onClick, children }: ButtonProps) { return ( <button className={cn( 'btn', `btn-${variant}`, `btn-${size}`, { 'btn-disabled': disabled } )} onClick={onClick} disabled={disabled} > {children} </button> ) } ```` ## Enforcement ### Automated Tools - **ESLint**: Code style and quality enforcement - **Prettier**: Automatic code formatting - **TypeScript**: Type safety and consistency - **Husky**: Pre-commit hooks for validation ### Code Review Process 1. **Automated Checks**: CI/CD pipeline validates standards 2. **Peer Review**: Team members review for adherence 3. **Documentation Review**: Ensure docs meet standards 4. **Design Review**: UI/UX consistency validation ## Contributing to Standards ### Proposing Changes 1. **Create Issue**: Discuss proposed standard changes 2. **Draft Document**: Write clear, actionable guidelines 3. **Team Review**: Get feedback from core contributors 4. **Implementation**: Update tooling and documentation 5. **Communication**: Announce changes to the team ### Standard Templates We provide templates for common documentation: - **Feature Documentation Template** - **API Documentation Template** - **Component Documentation Template** - **Testing Documentation Template** ## Tools and Configuration ### ESLint Configuration ```json { \"extends\": [ \"next/core-web-vitals\", \"@typescript-eslint/recommended\", \"prettier\" ], \"rules\": { \"prefer-const\": \"error\", \"no-unused-vars\": \"error\", \"@typescript-eslint/no-explicit-any\": \"warn\" } } ``` ### Prettier Configuration ```json { \"semi\": false, \"singleQuote\": true, \"tabWidth\": 2, \"trailingComma\": \"es5\", \"printWidth\": 80 } ``` ## Accessibility Standards ### WCAG Compliance - **Level AA**: Minimum standard for all components - **Color Contrast**: 4.5:1 ratio for normal text - **Keyboard Navigation**: All interactive elements accessible - **Screen Reader Support**: Proper ARIA labels and roles ### Testing Accessibility ```typescript // Example accessibility test import { render, screen } from '@testing-library/react' import { axe, toHaveNoViolations } from 'jest-axe' expect.extend(toHaveNoViolations) test('Button has no accessibility violations', async () => { const { container } = render(<Button>Click me</Button>) const results = await axe(container) expect(results).toHaveNoViolations() }) ``` ## Performance Standards ### Bundle Size Limits - **Initial Bundle**: < 500KB - **Route Chunks**: < 200KB - **Component Chunks**: < 50KB ### Performance Metrics - **First Contentful Paint**: < 1.5s - **Largest Contentful Paint**: < 2.5s - **Cumulative Layout Shift**: < 0.1 ## Security Standards ### Authentication - **JWT Tokens**: Short-lived access tokens - **Secure Cookies**: httpOnly, secure, sameSite - **Rate Limiting**: Prevent abuse and attacks ### Data Validation - **Input Sanitization**: All user inputs validated - **SQL Injection Prevention**: Parameterized queries - **XSS Protection**: Content Security Policy headers ## Next Steps - Review [üìù Code Standards](./code/) for detailed coding guidelines - Check [üìö Documentation](./docs/) standards for writing guidelines - Explore [üé® Design System](./design/) for UI/UX consistency - See [ü§ù Contributing](../contributing/) for how to get involved ",
    "./docs/architecture/index.md": "--- layout: default title: 'System Architecture' description: 'System design, architecture patterns, and technical documentation' permalink: /docs/architecture/ --- # üèóÔ∏è System Architecture Comprehensive documentation of the idling.app system architecture, design patterns, and technical implementation details. ## üèõÔ∏è System Design **[System Design](system/)** - High-level architecture overview: - Application architecture and component relationships - Data flow and system interactions - Scalability and performance considerations - Technology stack and infrastructure - Microservices and API design - Database architecture and data modeling ## üîê Security **[Security Architecture](security/)** - Security patterns and implementation: - Authentication and authorization systems - Data encryption and privacy protection - API security and rate limiting - Input validation and sanitization - Security monitoring and incident response - Compliance and regulatory requirements ## üìä Performance **[Performance Architecture](performance/)** - Optimization strategies: - Caching strategies and implementation - Database query optimization - Frontend performance optimization - CDN and asset delivery - Monitoring and alerting systems - Load balancing and scaling ## üîß Technical Stack ### Frontend Architecture - **Framework**: Next.js 14 with App Router - **Language**: TypeScript for type safety - **Styling**: CSS Modules with SCSS - **State Management**: React Context + Zustand - **UI Components**: Custom component library - **Testing**: Jest + React Testing Library + Playwright ### Backend Architecture - **Runtime**: Node.js with Express.js - **Database**: PostgreSQL with Prisma ORM - **Authentication**: NextAuth.js with JWT - **API**: RESTful API with OpenAPI documentation - **Caching**: Redis for session and data caching - **File Storage**: AWS S3 or local filesystem ### Infrastructure - **Containerization**: Docker and Docker Compose - **Deployment**: GitHub Actions CI/CD - **Monitoring**: Custom logging and metrics - **Database**: PostgreSQL with connection pooling - **Reverse Proxy**: Nginx for production ## üìê Design Patterns ### Frontend Patterns - **Component Composition** - Reusable, composable components - **Render Props** - Flexible component behavior - **Custom Hooks** - Shared stateful logic - **Context Providers** - Global state management - **Error Boundaries** - Graceful error handling ### Backend Patterns - **Repository Pattern** - Data access abstraction - **Service Layer** - Business logic separation - **Middleware Pattern** - Request/response processing - **Factory Pattern** - Object creation - **Observer Pattern** - Event handling ## üîÑ Data Flow ### Request Lifecycle 1. **Client Request** - User interaction or API call 2. **Authentication** - Verify user credentials 3. **Authorization** - Check permissions 4. **Validation** - Validate input data 5. **Business Logic** - Process request 6. **Data Access** - Database operations 7. **Response** - Return formatted data ### State Management - **Global State** - User session, theme, preferences - **Local State** - Component-specific data - **Server State** - API data with caching - **Form State** - Form validation and submission ## üöÄ Scalability Considerations ### Horizontal Scaling - **Load Balancing** - Distribute traffic across instances - **Database Sharding** - Partition data across databases - **Microservices** - Break down into smaller services - **CDN** - Global content delivery - **Caching** - Multiple layers of caching ### Performance Optimization - **Code Splitting** - Lazy load components - **Image Optimization** - Responsive images and formats - **Bundle Optimization** - Tree shaking and minification - **Database Indexing** - Optimize query performance - **Connection Pooling** - Efficient database connections ## üìä Monitoring & Observability ### Metrics - **Performance Metrics** - Response times, throughput - **Error Rates** - Application and API errors - **User Metrics** - Active users, engagement - **Infrastructure Metrics** - CPU, memory, disk usage ### Logging - **Structured Logging** - JSON format for analysis - **Log Levels** - Error, warn, info, debug - **Correlation IDs** - Track requests across services - **Security Logging** - Authentication and authorization events ## üîó Architecture Diagrams ### System Overview ```mermaid graph TB User[User] --> Frontend[Next.js Frontend] Frontend --> API[API Layer] API --> Auth[Authentication] API --> DB[(PostgreSQL)] API --> Cache[(Redis Cache)] API --> Storage[File Storage] ``` ### Component Architecture ```mermaid graph LR Components[UI Components] --> Hooks[Custom Hooks] Hooks --> Services[API Services] Services --> Store[State Store] Store --> Context[React Context] ``` ## üöÄ Getting Started 1. **[System Design](system/)** - Understand the overall architecture 2. **[Security](security/)** - Learn security implementations 3. **[Performance](performance/)** - Optimize for production ## üìã Architecture Checklist ### Design Principles - [ ] Single Responsibility Principle - [ ] Open/Closed Principle - [ ] Dependency Inversion - [ ] Separation of Concerns - [ ] DRY (Don't Repeat Yourself) ### Quality Attributes - [ ] Scalability - [ ] Maintainability - [ ] Testability - [ ] Security - [ ] Performance ## üîó Related Sections - **[API Documentation](../api/)** - API design and implementation - **[Development](../../dev/)** - Development practices - **[Deployment](../deployment/)** - Deployment strategies --- _Architecture documentation is continuously updated. Last updated: {{ site.time | date: \"%B %d, %Y\" }}_ ",
    "./docs/architecture/performance/index.md": "--- layout: default title: 'üìä Performance' description: 'Performance optimization strategies and implementation' nav_order: 3 parent: 'üèóÔ∏è Architecture' grand_parent: 'üìö Documentation' --- # üìä Performance Comprehensive performance optimization strategies for Idling.app covering frontend, backend, and infrastructure optimizations. ## Performance Overview Our performance strategy focuses on **Core Web Vitals** and **user experience metrics**: - **Largest Contentful Paint (LCP)**: < 2.5 seconds - **First Input Delay (FID)**: < 100 milliseconds - **Cumulative Layout Shift (CLS)**: < 0.1 - **Time to First Byte (TTFB)**: < 600 milliseconds ## Frontend Performance ### Next.js Optimizations #### Static Site Generation (SSG) ```typescript // Pre-generate pages at build time export async function getStaticProps() { const data = await fetchData(); return { props: { data }, revalidate: 3600 // Regenerate every hour }; } ``` #### Server-Side Rendering (SSR) ```typescript // Server-side rendering for dynamic content export async function getServerSideProps(context) { const data = await fetchUserData(context.req); return { props: { data } }; } ``` #### Incremental Static Regeneration (ISR) ```typescript // Hybrid approach for dynamic static content export async function getStaticProps() { return { props: { data: await fetchData() }, revalidate: 60 // Regenerate every minute }; } ``` ### Code Splitting & Lazy Loading #### Component-Level Splitting ```typescript import dynamic from 'next/dynamic' const DynamicComponent = dynamic(() => import('./HeavyComponent'), { loading: () => <Skeleton />, ssr: false }) ``` #### Route-Level Splitting ```typescript // Automatic code splitting with Next.js App Router // Each page is automatically split into separate bundles ``` ### Image Optimization #### Next.js Image Component ```typescript import Image from 'next/image' <Image src=\"/hero-image.jpg\" alt=\"Hero image\" width={800} height={600} priority // Load above-the-fold images first placeholder=\"blur\" blurDataURL=\"data:image/jpeg;base64,...\" /> ``` #### Responsive Images ```typescript <Image src=\"/hero.jpg\" alt=\"Hero\" fill sizes=\"(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw\" style={{ objectFit: 'cover' }} /> ``` ### Bundle Optimization #### Webpack Bundle Analyzer ```bash npm run build:analyze ``` #### Tree Shaking ```typescript // Import only what you need import { debounce } from 'lodash/debounce'; // Instead of: import _ from 'lodash' ``` ## Backend Performance ### Database Optimization #### Query Optimization ```sql -- Use indexes for frequently queried columns CREATE INDEX idx_users_email ON users(email); CREATE INDEX idx_posts_created_at ON posts(created_at DESC); -- Optimize complex queries EXPLAIN ANALYZE SELECT DOCUMENTATION_ARCHITECTURE.md Dockerfile Dockerfile.docs LINK_AUDIT.md LinkedIn_Documentation_Infrastructure_Report.md PRODUCTION_PERFORMANCE_COMMANDS.txt PRODUCTION_PERFORMANCE_COMMANDS_WITH_PASSWORD.txt README-DB-EXPLORER.md README.md TESTING.md __mocks__ changelog-preset.js commitlint.config.js commits community coverage custom-eslint-rules debug-content-parser.js docker-compose.dev.yml docker-compose.yml docker-postgres docs documentation-coverage.md e2e global.d.ts index.md jekyll jest.config.js jest.env.js jest.setup.js logs migrations next-env.d.ts next.config.js node_modules package-lock.json package.json playwright-report playwright.config.ts pnpm-lock.yaml public scripts seed-db-faker.js sonar-project.properties src swagger.config.js test-results test_output.txt tsconfig.json tsconfig.tsbuildinfo updates yarn.lock FROM users WHERE email = 'user@example.com'; ``` #### Connection Pooling ```typescript // PostgreSQL connection pool const pool = new Pool({ host: process.env.DB_HOST, port: parseInt(process.env.DB_PORT || '5432'), database: process.env.DB_NAME, user: process.env.DB_USER, password: process.env.DB_PASSWORD, max: 20, // Maximum connections idleTimeoutMillis: 30000, connectionTimeoutMillis: 2000 }); ``` #### Database Caching ```typescript // Redis caching layer const getCachedUser = async (id: string) => { const cached = await redis.get(`user:${id}`); if (cached) return JSON.parse(cached); const user = await db.user.findUnique({ where: { id } }); await redis.setex(`user:${id}`, 3600, JSON.stringify(user)); return user; }; ``` ### API Performance #### Response Caching ```typescript // Cache API responses export async function GET(request: Request) { const { searchParams } = new URL(request.url); const cacheKey = `api:${searchParams.toString()}`; const cached = await redis.get(cacheKey); if (cached) { return new Response(cached, { headers: { 'Cache-Control': 'public, max-age=3600' } }); } const data = await fetchData(); await redis.setex(cacheKey, 3600, JSON.stringify(data)); return Response.json(data); } ``` #### Compression ```typescript // Enable gzip compression app.use( compression({ level: 6, threshold: 1024, filter: (req, res) => { return compression.filter(req, res); } }) ); ``` ### Async Processing #### Background Jobs ```typescript // Queue heavy operations import { Queue } from 'bull'; const emailQueue = new Queue('email processing', { redis: { host: 'localhost', port: 6379 } }); // Add job to queue await emailQueue.add('send-welcome-email', { userId: user.id }); // Process jobs emailQueue.process('send-welcome-email', async (job) => { await sendWelcomeEmail(job.data.userId); }); ``` ## Caching Strategy ### Multi-Layer Caching #### Browser Caching ```typescript // Set appropriate cache headers export async function GET() { return new Response(data, { headers: { 'Cache-Control': 'public, max-age=3600, s-maxage=86400', ETag: generateETag(data), 'Last-Modified': new Date().toUTCString() } }); } ``` #### CDN Caching ```typescript // Cloudflare/CDN configuration const cdnConfig = { cacheTtl: 86400, // 24 hours browserTtl: 3600, // 1 hour edgeTtl: 86400, // 24 hours bypassCacheOnCookie: true }; ``` #### Application Caching ```typescript // In-memory caching with TTL const cache = new Map(); const getCachedData = (key: string) => { const item = cache.get(key); if (item && item.expires > Date.now()) { return item.data; } cache.delete(key); return null; }; const setCachedData = (key: string, data: any, ttl: number) => { cache.set(key, { data, expires: Date.now() + ttl }); }; ``` ## Performance Monitoring ### Core Web Vitals Tracking ```typescript // Track performance metrics import { getCLS, getFID, getFCP, getLCP, getTTFB } from 'web-vitals'; getCLS(console.log); getFID(console.log); getFCP(console.log); getLCP(console.log); getTTFB(console.log); ``` ### Real User Monitoring (RUM) ```typescript // Send performance data to analytics const sendToAnalytics = (metric) => { fetch('/api/analytics', { method: 'POST', body: JSON.stringify(metric) }); }; getCLS(sendToAnalytics); getFID(sendToAnalytics); getLCP(sendToAnalytics); ``` ### Server Performance Monitoring ```typescript // Monitor API response times const performanceMiddleware = (req, res, next) => { const start = Date.now(); res.on('finish', () => { const duration = Date.now() - start; console.log(`${req.method} ${req.url} - ${duration}ms`); // Send to monitoring service metrics.timing('api.response_time', duration, { method: req.method, route: req.route?.path }); }); next(); }; ``` ## Infrastructure Performance ### Load Balancing ```nginx # NGINX load balancer configuration upstream app_servers { server app1:3000 weight=3; server app2:3000 weight=2; server app3:3000 weight=1; } server { listen 80; location / { proxy_pass http://app_servers; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; } } ``` ### Database Scaling ```typescript // Read/write splitting const readDB = new Pool({ host: 'read-replica' }); const writeDB = new Pool({ host: 'master' }); const getUser = (id: string) => readDB.query('SELECT DOCUMENTATION_ARCHITECTURE.md Dockerfile Dockerfile.docs LINK_AUDIT.md LinkedIn_Documentation_Infrastructure_Report.md PRODUCTION_PERFORMANCE_COMMANDS.txt PRODUCTION_PERFORMANCE_COMMANDS_WITH_PASSWORD.txt README-DB-EXPLORER.md README.md TESTING.md __mocks__ changelog-preset.js commitlint.config.js commits community coverage custom-eslint-rules debug-content-parser.js docker-compose.dev.yml docker-compose.yml docker-postgres docs documentation-coverage.md e2e global.d.ts index.md jekyll jest.config.js jest.env.js jest.setup.js logs migrations next-env.d.ts next.config.js node_modules package-lock.json package.json playwright-report playwright.config.ts pnpm-lock.yaml public scripts seed-db-faker.js sonar-project.properties src swagger.config.js test-results test_output.txt tsconfig.json tsconfig.tsbuildinfo updates yarn.lock FROM users WHERE id = $1', [id]); const createUser = (data: any) => writeDB.query('INSERT INTO users ...', data); ``` ### CDN Configuration ```typescript // Static asset optimization const cdnConfig = { domains: ['cdn.idling.app'], paths: ['/images/*', '/css/*', '/js/*'], compression: true, minify: true, cacheControl: { images: 'max-age=31536000', // 1 year css: 'max-age=31536000', js: 'max-age=31536000' } }; ``` ## Performance Budgets ### Bundle Size Limits ```json { \"budgets\": [ { \"type\": \"initial\", \"maximumWarning\": \"500kb\", \"maximumError\": \"1mb\" }, { \"type\": \"anyComponentStyle\", \"maximumWarning\": \"2kb\", \"maximumError\": \"4kb\" } ] } ``` ### Performance Metrics - **First Contentful Paint**: < 1.5s - **Largest Contentful Paint**: < 2.5s - **Time to Interactive**: < 3.5s - **Total Blocking Time**: < 200ms - **Cumulative Layout Shift**: < 0.1 ## Optimization Checklist ### Frontend - [ ] Enable Next.js Image optimization - [ ] Implement code splitting - [ ] Use lazy loading for components - [ ] Optimize bundle size - [ ] Enable compression - [ ] Set up proper caching headers ### Backend - [ ] Optimize database queries - [ ] Implement connection pooling - [ ] Add Redis caching - [ ] Enable response compression - [ ] Set up background job processing - [ ] Monitor API performance ### Infrastructure - [ ] Configure CDN - [ ] Set up load balancing - [ ] Implement database replication - [ ] Monitor server metrics - [ ] Set up alerts for performance issues ## Performance Testing ### Load Testing ```bash # Apache Bench ab -n 1000 -c 10 http://localhost:3000/api/users # Artillery.js artillery run load-test.yml ``` ### Lighthouse CI ```yaml # .github/workflows/lighthouse.yml - name: Lighthouse CI run: | npm install -g @lhci/cli lhci autorun ``` ## Next Steps - Review [System Design](../system/) for architecture context - Check [Security](../security/) performance implications - Explore [Deployment](../../deployment/) performance configurations - Monitor [API Reference](../../api/) response times ",
    "./docs/architecture/security/index.md": "--- layout: default title: 'üîê Security' description: 'Security patterns and implementation details' nav_order: 2 parent: 'üèóÔ∏è Architecture' grand_parent: 'üìö Documentation' --- # üîê Security Comprehensive security implementation for Idling.app covering authentication, authorization, and data protection. ## Security Overview Our security architecture follows **defense-in-depth** principles with multiple layers of protection: - **Authentication**: Multi-factor authentication with JWT tokens - **Authorization**: Role-based access control (RBAC) - **Data Protection**: Encryption at rest and in transit - **Infrastructure**: Network security and monitoring ## Authentication System ### JWT Token Strategy - **Access Tokens**: Short-lived (15 minutes) for API access - **Refresh Tokens**: Long-lived (7 days) for token renewal - **Secure Storage**: httpOnly cookies with SameSite protection ### Multi-Factor Authentication - **TOTP Support**: Time-based one-time passwords - **Backup Codes**: Recovery codes for account access - **Device Registration**: Trusted device management ## Authorization Framework ### Role-Based Access Control (RBAC) ```typescript interface Role { id: string; name: string; permissions: Permission[]; } interface Permission { resource: string; action: string; conditions?: Record<string, any>; } ``` ### Permission Matrix | Role | Users | Content | Admin | System | | ----------- | --------- | -------- | -------- | -------- | | User | Read Self | CRUD Own | - | - | | Moderator | Read All | CRUD All | Read | - | | Admin | CRUD All | CRUD All | CRUD | Read | | Super Admin | CRUD All | CRUD All | CRUD All | CRUD All | ## Data Protection ### Encryption - **At Rest**: AES-256 encryption for sensitive data - **In Transit**: TLS 1.3 for all communications - **Database**: Encrypted database connections - **Secrets**: Environment variables with rotation ### Data Validation - **Input Sanitization**: XSS prevention - **SQL Injection**: Parameterized queries - **Schema Validation**: Zod runtime validation - **File Upload**: Type and size validation ## Security Headers ### Content Security Policy (CSP) ``` Content-Security-Policy: default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self'; connect-src 'self' https://api.example.com; ``` ### Additional Headers - **HSTS**: HTTP Strict Transport Security - **X-Frame-Options**: Clickjacking protection - **X-Content-Type-Options**: MIME type sniffing prevention - **Referrer-Policy**: Referrer information control ## Rate Limiting ### API Rate Limits - **Authenticated**: 1000 requests/hour - **Anonymous**: 100 requests/hour - **Admin**: 500 requests/hour - **Upload**: 50 requests/hour ### Implementation ```typescript const rateLimiter = new RateLimiter({ windowMs: 60 DOCUMENTATION_ARCHITECTURE.md Dockerfile Dockerfile.docs LINK_AUDIT.md LinkedIn_Documentation_Infrastructure_Report.md PRODUCTION_PERFORMANCE_COMMANDS.txt PRODUCTION_PERFORMANCE_COMMANDS_WITH_PASSWORD.txt README-DB-EXPLORER.md README.md TESTING.md __mocks__ changelog-preset.js commitlint.config.js commits community coverage custom-eslint-rules debug-content-parser.js docker-compose.dev.yml docker-compose.yml docker-postgres docs documentation-coverage.md e2e global.d.ts index.md jekyll jest.config.js jest.env.js jest.setup.js logs migrations next-env.d.ts next.config.js node_modules package-lock.json package.json playwright-report playwright.config.ts pnpm-lock.yaml public scripts seed-db-faker.js sonar-project.properties src swagger.config.js test-results test_output.txt tsconfig.json tsconfig.tsbuildinfo updates yarn.lock 60 DOCUMENTATION_ARCHITECTURE.md Dockerfile Dockerfile.docs LINK_AUDIT.md LinkedIn_Documentation_Infrastructure_Report.md PRODUCTION_PERFORMANCE_COMMANDS.txt PRODUCTION_PERFORMANCE_COMMANDS_WITH_PASSWORD.txt README-DB-EXPLORER.md README.md TESTING.md __mocks__ changelog-preset.js commitlint.config.js commits community coverage custom-eslint-rules debug-content-parser.js docker-compose.dev.yml docker-compose.yml docker-postgres docs documentation-coverage.md e2e global.d.ts index.md jekyll jest.config.js jest.env.js jest.setup.js logs migrations next-env.d.ts next.config.js node_modules package-lock.json package.json playwright-report playwright.config.ts pnpm-lock.yaml public scripts seed-db-faker.js sonar-project.properties src swagger.config.js test-results test_output.txt tsconfig.json tsconfig.tsbuildinfo updates yarn.lock 1000, // 1 hour max: (req) => { if (req.user?.role === 'admin') return 500; if (req.user) return 1000; return 100; } }); ``` ## Session Management ### Session Security - **Secure Cookies**: httpOnly, secure, SameSite - **Session Timeout**: Automatic logout after inactivity - **Concurrent Sessions**: Limit active sessions per user - **Session Invalidation**: Logout invalidates all sessions ### Implementation ```typescript const sessionConfig = { secret: process.env.SESSION_SECRET, resave: false, saveUninitialized: false, cookie: { secure: process.env.NODE_ENV === 'production', httpOnly: true, maxAge: 24 DOCUMENTATION_ARCHITECTURE.md Dockerfile Dockerfile.docs LINK_AUDIT.md LinkedIn_Documentation_Infrastructure_Report.md PRODUCTION_PERFORMANCE_COMMANDS.txt PRODUCTION_PERFORMANCE_COMMANDS_WITH_PASSWORD.txt README-DB-EXPLORER.md README.md TESTING.md __mocks__ changelog-preset.js commitlint.config.js commits community coverage custom-eslint-rules debug-content-parser.js docker-compose.dev.yml docker-compose.yml docker-postgres docs documentation-coverage.md e2e global.d.ts index.md jekyll jest.config.js jest.env.js jest.setup.js logs migrations next-env.d.ts next.config.js node_modules package-lock.json package.json playwright-report playwright.config.ts pnpm-lock.yaml public scripts seed-db-faker.js sonar-project.properties src swagger.config.js test-results test_output.txt tsconfig.json tsconfig.tsbuildinfo updates yarn.lock 60 DOCUMENTATION_ARCHITECTURE.md Dockerfile Dockerfile.docs LINK_AUDIT.md LinkedIn_Documentation_Infrastructure_Report.md PRODUCTION_PERFORMANCE_COMMANDS.txt PRODUCTION_PERFORMANCE_COMMANDS_WITH_PASSWORD.txt README-DB-EXPLORER.md README.md TESTING.md __mocks__ changelog-preset.js commitlint.config.js commits community coverage custom-eslint-rules debug-content-parser.js docker-compose.dev.yml docker-compose.yml docker-postgres docs documentation-coverage.md e2e global.d.ts index.md jekyll jest.config.js jest.env.js jest.setup.js logs migrations next-env.d.ts next.config.js node_modules package-lock.json package.json playwright-report playwright.config.ts pnpm-lock.yaml public scripts seed-db-faker.js sonar-project.properties src swagger.config.js test-results test_output.txt tsconfig.json tsconfig.tsbuildinfo updates yarn.lock 60 DOCUMENTATION_ARCHITECTURE.md Dockerfile Dockerfile.docs LINK_AUDIT.md LinkedIn_Documentation_Infrastructure_Report.md PRODUCTION_PERFORMANCE_COMMANDS.txt PRODUCTION_PERFORMANCE_COMMANDS_WITH_PASSWORD.txt README-DB-EXPLORER.md README.md TESTING.md __mocks__ changelog-preset.js commitlint.config.js commits community coverage custom-eslint-rules debug-content-parser.js docker-compose.dev.yml docker-compose.yml docker-postgres docs documentation-coverage.md e2e global.d.ts index.md jekyll jest.config.js jest.env.js jest.setup.js logs migrations next-env.d.ts next.config.js node_modules package-lock.json package.json playwright-report playwright.config.ts pnpm-lock.yaml public scripts seed-db-faker.js sonar-project.properties src swagger.config.js test-results test_output.txt tsconfig.json tsconfig.tsbuildinfo updates yarn.lock 1000, // 24 hours sameSite: 'strict' } }; ``` ## Vulnerability Prevention ### Common Vulnerabilities - **XSS**: Content Security Policy + input sanitization - **CSRF**: SameSite cookies + CSRF tokens - **SQL Injection**: Parameterized queries + ORM - **Path Traversal**: Input validation + sandboxing ### Security Middleware ```typescript // Security middleware stack app.use(helmet()); // Security headers app.use(cors(corsOptions)); // CORS configuration app.use(rateLimiter); // Rate limiting app.use(validator); // Input validation ``` ## Monitoring & Logging ### Security Events - **Authentication failures** - **Authorization violations** - **Suspicious activity patterns** - **Rate limit violations** ### Log Structure ```json { \"timestamp\": \"2024-01-01T00:00:00Z\", \"level\": \"WARN\", \"event\": \"auth_failure\", \"user_id\": \"user123\", \"ip\": \"192.168.1.1\", \"user_agent\": \"Mozilla/5.0...\", \"details\": { \"reason\": \"invalid_password\", \"attempts\": 3 } } ``` ## Compliance & Standards ### Security Standards - **OWASP Top 10**: Protection against common vulnerabilities - **GDPR**: Data protection and privacy compliance - **SOC 2**: Security controls and procedures - **ISO 27001**: Information security management ### Data Privacy - **Data Minimization**: Collect only necessary data - **Right to Erasure**: User data deletion - **Data Portability**: Export user data - **Consent Management**: Explicit user consent ## Security Testing ### Automated Testing - **SAST**: Static Application Security Testing - **DAST**: Dynamic Application Security Testing - **Dependency Scanning**: Vulnerable package detection - **Container Scanning**: Docker image security ### Manual Testing - **Penetration Testing**: Quarterly security assessments - **Code Reviews**: Security-focused code reviews - **Threat Modeling**: Risk assessment and mitigation - **Security Audits**: Regular security evaluations ## Incident Response ### Response Plan 1. **Detection**: Automated monitoring alerts 2. **Assessment**: Severity and impact evaluation 3. **Containment**: Immediate threat mitigation 4. **Eradication**: Root cause elimination 5. **Recovery**: System restoration 6. **Lessons Learned**: Post-incident analysis ### Emergency Contacts - **Security Team**: security@idling.app - **On-Call Engineer**: Available 24/7 - **Legal Team**: For compliance issues - **External Partners**: Security consultants ## Security Configuration ### Environment Variables ```bash # Authentication NEXTAUTH_SECRET=your-secret-key NEXTAUTH_URL=https://yourdomain.com # Database DATABASE_URL=postgresql://user:pass@host:5432/db # Redis REDIS_URL=redis://localhost:6379 # Security RATE_LIMIT_WINDOW=3600 RATE_LIMIT_MAX=1000 ``` ## Next Steps - Review [System Design](../system/) for overall architecture - Check [Performance](../performance/) security implications - Explore [Deployment](../../deployment/) security configurations - See [API Reference](../../api/) for security implementation details ",
    "./docs/architecture/system/index.md": "--- layout: default title: 'üèõÔ∏è System Design' description: 'High-level system architecture and design patterns' nav_order: 1 parent: 'üèóÔ∏è Architecture' grand_parent: 'üìö Documentation' --- # üèõÔ∏è System Design High-level system architecture and design patterns for Idling.app. ## Architecture Overview Idling.app follows a modern **microservices-oriented** architecture with clear separation of concerns: ``` ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îÇ Frontend ‚îÇ ‚îÇ API Gateway ‚îÇ ‚îÇ Backend ‚îÇ ‚îÇ (Next.js) ‚îÇ‚óÑ‚îÄ‚îÄ‚ñ∫‚îÇ (Next.js) ‚îÇ‚óÑ‚îÄ‚îÄ‚ñ∫‚îÇ Services ‚îÇ ‚îÇ ‚îÇ ‚îÇ ‚îÇ ‚îÇ ‚îÇ ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îÇ ‚îÇ ‚îÇ ‚ñº ‚ñº ‚ñº ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îÇ Static Assets ‚îÇ ‚îÇ Authentication‚îÇ ‚îÇ Database ‚îÇ ‚îÇ (CDN) ‚îÇ ‚îÇ (NextAuth.js) ‚îÇ ‚îÇ (PostgreSQL) ‚îÇ ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ``` ## Core Components ### 1. Frontend Layer - **Framework**: Next.js 14 with App Router - **Styling**: Tailwind CSS with custom design system - **State Management**: React Query + Zustand - **Type Safety**: TypeScript with strict configuration ### 2. API Layer - **Framework**: Next.js API Routes - **Authentication**: NextAuth.js with JWT - **Validation**: Zod schemas - **Rate Limiting**: Redis-based rate limiting ### 3. Data Layer - **Primary Database**: PostgreSQL with connection pooling - **Caching**: Redis for session storage and caching - **File Storage**: Local filesystem with CDN integration - **Search**: Full-text search with PostgreSQL ## Design Patterns ### 1. Repository Pattern Abstraction layer for data access: ```typescript interface UserRepository { findById(id: string): Promise<User | null>; create(data: CreateUserData): Promise<User>; update(id: string, data: UpdateUserData): Promise<User>; delete(id: string): Promise<void>; } ``` ### 2. Service Layer Pattern Business logic encapsulation: ```typescript class UserService { constructor( private userRepo: UserRepository, private authService: AuthService ) {} async createUser(data: CreateUserData): Promise<User> { // Validation, business rules, etc. } } ``` ### 3. Factory Pattern For creating service instances: ```typescript class ServiceFactory { static createUserService(): UserService { return new UserService(new UserRepository(), new AuthService()); } } ``` ## Data Flow ### 1. Request Lifecycle ``` User Request ‚Üí Middleware ‚Üí Route Handler ‚Üí Service ‚Üí Repository ‚Üí Database ‚Üì ‚Üì ‚Üì ‚Üì ‚Üì ‚Üì Response ‚Üê Serialization ‚Üê Business Logic ‚Üê Data Access ‚Üê Query ‚Üê Result ``` ### 2. Authentication Flow ``` 1. User Login ‚Üí NextAuth.js 2. JWT Token Generation 3. Token Storage (httpOnly cookie) 4. Request Authentication (middleware) 5. Session Validation ``` ### 3. Error Handling ``` Error ‚Üí Error Boundary ‚Üí Logging ‚Üí User Notification ‚Üí Recovery ``` ## Scalability Considerations ### Horizontal Scaling - **Load Balancing**: NGINX or cloud load balancer - **Database Replication**: Read replicas for scaling reads - **CDN**: Static asset distribution - **Caching**: Multi-layer caching strategy ### Vertical Scaling - **Connection Pooling**: Efficient database connections - **Memory Management**: Optimized React components - **Bundle Optimization**: Code splitting and tree shaking ## Security Architecture ### 1. Authentication & Authorization - JWT tokens with short expiration - Role-based access control (RBAC) - Multi-factor authentication support - Session management with secure cookies ### 2. Data Protection - Input validation and sanitization - SQL injection prevention - XSS protection with CSP headers - CSRF protection ### 3. Infrastructure Security - HTTPS everywhere - Security headers (HSTS, CSP, etc.) - Rate limiting and DDoS protection - Regular security audits ## Performance Optimization ### 1. Frontend Performance - Server-side rendering (SSR) - Static site generation (SSG) where applicable - Image optimization and lazy loading - Bundle splitting and code optimization ### 2. Backend Performance - Database query optimization - Caching strategies (Redis) - Connection pooling - Async processing for heavy operations ### 3. Monitoring & Observability - Application performance monitoring - Error tracking and logging - Database performance metrics - User experience monitoring ## Technology Stack | Layer | Technology | Purpose | | -------------- | ----------------- | ------------------------------------- | | Frontend | Next.js 14 | React framework with SSR/SSG | | Styling | Tailwind CSS | Utility-first CSS framework | | Language | TypeScript | Type-safe JavaScript | | Database | PostgreSQL | Primary data storage | | Cache | Redis | Session storage and caching | | Authentication | NextAuth.js | Authentication and session management | | Validation | Zod | Runtime type validation | | Testing | Jest + Playwright | Unit and E2E testing | | Deployment | Docker | Containerization | ## Development Principles ### 1. Code Quality - TypeScript for type safety - ESLint and Prettier for code formatting - Comprehensive test coverage - Code review process ### 2. Maintainability - Clear separation of concerns - Consistent naming conventions - Documentation and comments - Modular architecture ### 3. Performance - Lazy loading and code splitting - Efficient database queries - Caching strategies - Performance monitoring ## Next Steps - Review [Security](../security/) architecture details - Check [Performance](../performance/) optimization strategies - Explore [Deployment](../../deployment/) configurations - See [API Reference](../../api/) for implementation details ",
    "./docs/deployment/index.md": "--- layout: default title: 'Deployment Guide' description: 'Production deployment procedures and documentation site deployment' permalink: /docs/deployment/ --- # üöÄ Deployment Guide Comprehensive deployment documentation covering production setup, documentation site deployment, and release management. ## üåê Production Setup **[Production Setup](production/)** - Server deployment guide: - Production environment configuration - Docker containerization and orchestration - Database setup and migrations - SSL/TLS certificate configuration - Load balancing and reverse proxy setup - Environment variables and secrets management - Monitoring and logging setup - Backup and disaster recovery procedures ## üìÑ Documentation Site **[Documentation Site](docs/)** - Deploy this documentation: - Jekyll setup and configuration - GitHub Pages deployment - Custom domain configuration - Continuous deployment with GitHub Actions - Theme customization and branding - Search functionality setup - Analytics and monitoring integration ## üì¶ Release Process **[Release Process](releases/)** - Version management and releases: - Semantic versioning strategy - Release branching and tagging - Automated release pipeline - Changelog generation - Database migration deployment - Rollback procedures - Release communication and documentation ## üîß Infrastructure Overview ### Production Architecture ```mermaid graph TB Internet[Internet] --> LB[Load Balancer] LB --> App1[App Instance 1] LB --> App2[App Instance 2] App1 --> DB[(PostgreSQL)] App2 --> DB App1 --> Cache[(Redis)] App2 --> Cache App1 --> Storage[File Storage] App2 --> Storage ``` ### Deployment Pipeline ```mermaid graph LR Code[Code Push] --> CI[CI Tests] CI --> Build[Build Image] Build --> Deploy[Deploy to Staging] Deploy --> Test[Integration Tests] Test --> Prod[Deploy to Production] Prod --> Monitor[Monitor & Alert] ``` ## üõ†Ô∏è Deployment Tools ### Container Orchestration - Dockerfile Dockerfile.docs - Application containerization - **Docker Compose** - Multi-container orchestration - **Kubernetes** - Production orchestration (optional) ### CI/CD Pipeline - **GitHub Actions** - Automated testing and deployment - **Docker Hub** - Container image registry - **Staging Environment** - Pre-production testing ### Monitoring & Observability - **Application Logs** - Structured logging with rotation - **Performance Metrics** - Response times and throughput - **Error Tracking** - Exception monitoring and alerting - **Uptime Monitoring** - Service availability checks ## üîê Security Considerations ### Production Security - **HTTPS/TLS** - Encrypted communication - **Firewall Rules** - Network access control - **Security Headers** - Browser security policies - **Rate Limiting** - API protection - **Input Validation** - Data sanitization - **Secrets Management** - Secure credential storage ### Database Security - **Connection Encryption** - SSL/TLS for database connections - **Access Control** - Role-based permissions - **Backup Encryption** - Secure backup storage - **Audit Logging** - Database activity monitoring ## üìä Performance Optimization ### Application Performance - **Code Splitting** - Lazy loading and bundle optimization - **Image Optimization** - Responsive images and formats - **Caching Strategy** - Multiple layers of caching - **Database Indexing** - Query optimization - **CDN Integration** - Global content delivery ### Infrastructure Performance - **Load Balancing** - Traffic distribution - **Connection Pooling** - Database connection management - **Resource Scaling** - Auto-scaling based on demand - **Monitoring Alerts** - Proactive issue detection ## üîÑ Deployment Strategies ### Blue-Green Deployment - **Zero Downtime** - Seamless production updates - **Instant Rollback** - Quick recovery from issues - **Environment Parity** - Identical staging and production ### Rolling Updates - **Gradual Deployment** - Incremental instance updates - **Health Checks** - Automated deployment validation - **Automatic Rollback** - Failure detection and recovery ## üìã Deployment Checklist ### Pre-Deployment - [ ] All tests passing - [ ] Database migrations tested - [ ] Environment variables configured - [ ] SSL certificates valid - [ ] Backup procedures verified - [ ] Monitoring alerts configured ### During Deployment - [ ] Application health checks - [ ] Database connectivity verified - [ ] Cache warming completed - [ ] Performance metrics normal - [ ] Error rates acceptable ### Post-Deployment - [ ] Smoke tests completed - [ ] User acceptance testing - [ ] Performance benchmarks met - [ ] Monitoring dashboards updated - [ ] Documentation updated - [ ] Team notified ## üö® Troubleshooting ### Common Issues 1. **Database Connection Failures** - Check connection strings and credentials - Verify network connectivity - Review firewall rules 2. **Application Startup Errors** - Check environment variables - Verify file permissions - Review application logs 3. **Performance Degradation** - Monitor resource usage - Check database query performance - Review caching effectiveness ## üîó Environment Configuration ### Development ```bash NODE_ENV=development DATABASE_URL=postgresql://localhost:5432/idling_dev REDIS_URL=redis://localhost:6379 ``` ### Production ```bash NODE_ENV=production DATABASE_URL=postgresql://prod-db:5432/idling_prod REDIS_URL=redis://prod-cache:6379 SSL_CERT_PATH=/etc/ssl/certs/idling.crt SSL_KEY_PATH=/etc/ssl/private/idling.key ``` ## üöÄ Getting Started 1. **[Production Setup](production/)** - Configure production environment 2. **[Documentation Site](docs/)** - Deploy documentation 3. **[Release Process](releases/)** - Set up release pipeline ## üîó Related Sections - **[Architecture](../architecture/)** - System design and infrastructure - **[API Documentation](../api/)** - API deployment considerations - **[Development](../../dev/)** - Development environment setup --- _Deployment documentation is continuously updated. Last updated: {{ site.time | date: \"%B %d, %Y\" }}_ ",
    "./docs/getting-started/docker/index.md": "--- layout: default title: 'Docker Development Setup' description: 'Complete guide to containerized development with Docker' permalink: /docs/getting-started/docker/ --- # üê≥ Docker Development Setup Complete guide to setting up a containerized development environment for Idling.app. ## üéØ Why Docker? Docker provides: - **Consistent Environment**: Same setup across all machines - **Easy Database Management**: PostgreSQL runs in a container - **Isolated Dependencies**: No conflicts with your system - **Quick Setup**: One command to start everything ## üìã Prerequisites - **Docker Desktop** (Windows/Mac) or **Docker Engine** (Linux) - **Docker Compose** (usually included with Docker Desktop) - **Git** for cloning the repository ## üöÄ Quick Start ```bash # Clone the repository git clone https://github.com/Underwood-Inc/idling.app__UI.git cd idling.app__UI # Start all services docker-compose up -d # Install dependencies (on host) yarn install # Run database migrations yarn db:migrate # Start development server yarn dev ``` ## üìÅ Docker Configuration ### docker-compose.yml Our Docker setup includes: ```yaml version: '3.8' services: postgres: image: postgres:15-alpine environment: POSTGRES_DB: idling_app POSTGRES_USER: postgres POSTGRES_PASSWORD: postgres ports: - '5432:5432' volumes: - postgres_data:/var/lib/postgresql/data - ./src/lib/scripts:/docker-entrypoint-initdb.d healthcheck: test: ['CMD-SHELL', 'pg_isready -U postgres'] interval: 10s timeout: 5s retries: 5 redis: image: redis:7-alpine ports: - '6379:6379' volumes: - redis_data:/data volumes: postgres_data: redis_data: ``` ### Environment Variables Create a `.env` file: ```env # Database (matches docker-compose.yml) POSTGRES_HOST=localhost POSTGRES_PORT=5432 POSTGRES_USER=postgres POSTGRES_PASSWORD=postgres POSTGRES_DB=idling_app # Redis REDIS_URL=redis://localhost:6379 # Application NEXTAUTH_URL=http://localhost:3000 NEXTAUTH_SECRET=your-development-secret NODE_ENV=development ``` ## üîß Docker Commands ### Basic Operations ```bash # Start all services docker-compose up -d # Stop all services docker-compose down # View logs docker-compose logs -f # View specific service logs docker-compose logs -f postgres ``` ### Database Management ```bash # Access PostgreSQL shell docker-compose exec postgres psql -U postgres -d idling_app # Run SQL file docker-compose exec postgres psql -U postgres -d idling_app -f /docker-entrypoint-initdb.d/000-init.sql # Backup database docker-compose exec postgres pg_dump -U postgres idling_app > backup.sql # Restore database docker-compose exec -T postgres psql -U postgres idling_app < backup.sql ``` ### Container Management ```bash # Rebuild containers docker-compose build # Remove containers and volumes docker-compose down -v # View running containers docker-compose ps # Execute command in container docker-compose exec postgres bash ``` ## üóÑÔ∏è Database Initialization ### Automatic Initialization The Docker setup automatically runs initialization scripts from `src/lib/scripts/`: 1. `000-init.sql` - Creates tables and initial schema 2. `001-seed.sql` - Inserts sample data (optional) ### Manual Database Setup ```bash # Run migrations yarn db:migrate # Seed with sample data yarn db:seed # Reset database (careful!) yarn db:reset ``` ## üîç Monitoring & Debugging ### Health Checks ```bash # Check container health docker-compose ps # Check database connection docker-compose exec postgres pg_isready -U postgres # Test application connection curl http://localhost:3000/api/health ``` ### Logs and Debugging ```bash # View all logs docker-compose logs -f # View specific service logs docker-compose logs -f postgres docker-compose logs -f redis # Follow logs with timestamps docker-compose logs -f -t postgres ``` ### Database Inspection ```bash # Connect to database docker-compose exec postgres psql -U postgres -d idling_app # List tables \dt # Describe table \d table_name # Run query SELECT DOCUMENTATION_ARCHITECTURE.md Dockerfile Dockerfile.docs LINK_AUDIT.md LinkedIn_Documentation_Infrastructure_Report.md PRODUCTION_PERFORMANCE_COMMANDS.txt PRODUCTION_PERFORMANCE_COMMANDS_WITH_PASSWORD.txt README-DB-EXPLORER.md README.md TESTING.md __mocks__ changelog-preset.js commitlint.config.js commits community coverage custom-eslint-rules debug-content-parser.js docker-compose.dev.yml docker-compose.yml docker-postgres docs documentation-coverage.md e2e global.d.ts index.md jekyll jest.config.js jest.env.js jest.setup.js logs migrations next-env.d.ts next.config.js node_modules package-lock.json package.json playwright-report playwright.config.ts pnpm-lock.yaml public scripts seed-db-faker.js sonar-project.properties src swagger.config.js test-results test_output.txt tsconfig.json tsconfig.tsbuildinfo updates yarn.lock FROM users LIMIT 5; ``` ## üêõ Troubleshooting ### Common Issues **Port Already in Use** ```bash # Check what's using port 5432 lsof -i :5432 # Kill process kill -9 <PID> # Or use different port in docker-compose.yml ports: - \"5433:5432\" ``` **Database Connection Refused** ```bash # Check if PostgreSQL is running docker-compose ps # Check logs docker-compose logs postgres # Restart PostgreSQL docker-compose restart postgres ``` **Permission Issues** ```bash # Fix volume permissions sudo chown -R $USER:$USER postgres_data/ # Or reset volumes docker-compose down -v docker-compose up -d ``` **Container Won't Start** ```bash # Check Docker daemon docker info # Clean up Docker docker system prune -a # Rebuild containers docker-compose build --no-cache ``` ## üöÄ Advanced Configuration ### Custom Docker Setup Create `docker-compose.override.yml` for local customizations: ```yaml version: '3.8' services: postgres: environment: POSTGRES_DB: my_custom_db ports: - '5433:5432' pgadmin: image: dpage/pgadmin4 environment: PGADMIN_DEFAULT_EMAIL: admin@example.com PGADMIN_DEFAULT_PASSWORD: admin ports: - '5050:80' ``` ### Development Tools Add useful development tools: ```yaml services: mailhog: image: mailhog/mailhog ports: - '1025:1025' - '8025:8025' minio: image: minio/minio command: server /data --console-address \":9001\" environment: MINIO_ROOT_USER: minioadmin MINIO_ROOT_PASSWORD: minioadmin ports: - '9000:9000' - '9001:9001' ``` ## üìä Performance Optimization ### Resource Limits ```yaml services: postgres: deploy: resources: limits: memory: 1G reservations: memory: 512M ``` ### Volume Optimization ```yaml volumes: postgres_data: driver: local driver_opts: type: none o: bind device: /path/to/fast/storage ``` ## üîó Integration with Development ### VS Code Integration Install Docker extension and add to `.vscode/settings.json`: ```json { \"docker.defaultRegistryPath\": \"your-registry\", \"docker.commands.build\": \"docker-compose build\", \"docker.commands.up\": \"docker-compose up -d\" } ``` ### GitHub Actions ```yaml name: Test with Docker on: [push, pull_request] jobs: test: runs-on: ubuntu-latest steps: - uses: actions/checkout@v3 - name: Start services run: docker-compose up -d - name: Run tests run: yarn test ``` ## üìö Next Steps 1. üèóÔ∏è Learn about [Architecture](../../architecture/) 2. üß© Explore [Components](../../../../src/components/) 3. üß™ Set up [Testing](../../../dev/testing/) 4. üöÄ Deploy to [Production](../../deployment/) ## üí° Pro Tips - Use `docker-compose.override.yml` for local customizations - Keep your Docker images updated regularly - Use named volumes for persistent data - Monitor resource usage with `docker stats` - Use `.dockerignore` to exclude unnecessary files --- Happy containerized development! üê≥‚ú® ",
    "./docs/getting-started/index.md": "--- layout: default title: 'üöÄ Getting Started' description: 'Setup and initial configuration for Idling.app' nav_order: 1 parent: 'üìö Documentation' has_children: true --- # üöÄ Getting Started Welcome to Idling.app! This section will help you get up and running quickly with our application. ## Quick Navigation ### üîß Installation Get Idling.app installed and configured on your system. [View Installation Guide ‚Üí](installation/) ### üèÉ Quick Start Jump right in and start using Idling.app in minutes. [View Quick Start ‚Üí](quickstart/) ### üê≥ Docker Setup Set up a containerized development environment. [View Docker Setup ‚Üí](docker/) ## What You'll Learn - How to install and configure Idling.app - Basic usage patterns and workflows - Development environment setup - Docker containerization options ## Prerequisites Before getting started, make sure you have: - Node.js 18+ installed - Git for version control - A code editor (VS Code recommended) - Basic familiarity with command line ## Need Help? If you run into any issues during setup: - Check our [Community Forums](../../community/) - Join our [Discord](../../community/communication/discord/) - Review the [Troubleshooting Guide](../troubleshooting/) --- Ready to begin? Start with the [Installation Guide](installation/) or jump to the [Quick Start](quickstart/) if you're already set up! ",
    "./docs/getting-started/installation/index.md": "--- layout: default title: 'Installation Guide' description: 'Complete installation and setup guide for Idling.app development environment' permalink: /docs/getting-started/installation/ --- # üîß Installation Guide Complete guide to setting up your Idling.app development environment. ## Prerequisites Before you begin, ensure you have the following installed: - **Node.js** (LTS version recommended) - **Yarn** package manager - Dockerfile Dockerfile.docs (for containerized development) - **PostgreSQL** (if not using Docker) - **Git** for version control ## Quick Installation ### Option 1: Docker Development (Recommended) ```bash # Clone the repository git clone https://github.com/Underwood-Inc/idling.app__UI.git cd idling.app__UI # Start the development environment docker-compose up -d # Install dependencies yarn install # Run database migrations yarn db:migrate # Start the development server yarn dev ``` ### Option 2: Local Development ```bash # Clone the repository git clone https://github.com/Underwood-Inc/idling.app__UI.git cd idling.app__UI # Install dependencies yarn install # Set up environment variables cp .env.example .env # Configure your database connection in .env # POSTGRES_HOST=localhost # POSTGRES_PORT=5432 # POSTGRES_USER=your_username # POSTGRES_DB=idling_app # POSTGRES_PASSWORD=your_password # Run database migrations yarn db:migrate # Start the development server yarn dev ``` ## Environment Variables Create a `.env` file in the root directory with the following variables: ```env # Database Configuration POSTGRES_HOST=localhost POSTGRES_PORT=5432 POSTGRES_USER=your_username POSTGRES_DB=idling_app POSTGRES_PASSWORD=your_password # Authentication NEXTAUTH_URL=http://localhost:3000 NEXTAUTH_SECRET=your-secret-key # Development Settings NODE_ENV=development PORT=3000 ``` ## Database Setup ### Using Docker The Docker setup automatically configures PostgreSQL. No additional setup required. ### Local PostgreSQL 1. Install PostgreSQL on your system 2. Create a new database: ```sql CREATE DATABASE idling_app; ``` 3. Run the initialization script: ```bash psql -d idling_app -f src/lib/scripts/000-init.sql ``` ## Verification After installation, verify your setup: 1. **Application**: Visit `http://localhost:3000` 2. **API**: Visit `http://localhost:3000/api/swagger` 3. **Database**: Check connection with `yarn db:status` ## Troubleshooting ### Common Issues **Port Already in Use** ```bash # Find and kill process using port 3000 lsof -ti:3000 | xargs kill -9 ``` **Database Connection Issues** ```bash # Check PostgreSQL service sudo systemctl status postgresql # Test database connection psql -h localhost -U your_username -d idling_app ``` **Node Module Issues** ```bash # Clean install rm -rf node_modules yarn.lock yarn install ``` ## Next Steps Once installation is complete: 1. üìñ Read the [Quick Start Guide](../quickstart/) 2. üê≥ Set up [Docker Development](../docker/) 3. üèóÔ∏è Learn about the [Architecture](../../architecture/) 4. üß™ Run the [Test Suite](../../../dev/testing/) ## Need Help? - üí¨ [Join our Discord](https://discord.gg/idling-app) - üêô [GitHub Discussions](https://github.com/Underwood-Inc/idling.app__UI/discussions) - üìß [Create an Issue](https://github.com/Underwood-Inc/idling.app__UI/issues) ",
    "./docs/getting-started/quickstart/index.md": "--- layout: default title: 'Quick Start Guide' description: 'Get up and running with Idling.app in minutes' permalink: /docs/getting-started/quickstart/ --- # üöÄ Quick Start Guide Get up and running with Idling.app in under 5 minutes! ## üéØ Prerequisites - Node.js (LTS version) - Yarn package manager - Docker (recommended) ## ‚ö° 1-Minute Setup ```bash # Clone and enter the project git clone https://github.com/Underwood-Inc/idling.app__UI.git cd idling.app__UI # Quick Docker setup docker-compose up -d && yarn install && yarn dev ``` That's it! Your app should be running at `http://localhost:3000` üéâ ## üìã Step-by-Step Guide ### 1. Clone the Repository ```bash git clone https://github.com/Underwood-Inc/idling.app__UI.git cd idling.app__UI ``` ### 2. Start Services ```bash # Start PostgreSQL and other services docker-compose up -d ``` ### 3. Install Dependencies ```bash # Install all project dependencies yarn install ``` ### 4. Set Up Environment ```bash # Copy environment template cp .env.example .env # The defaults work with Docker setup # No changes needed for quick start! ``` ### 5. Initialize Database ```bash # Run database migrations yarn db:migrate # (Optional) Seed with sample data yarn db:seed ``` ### 6. Start Development Server ```bash # Start the Next.js development server yarn dev ``` ## üîó Quick Links After setup, visit these URLs: - **üè† Main App**: [http://localhost:3000](http://localhost:3000) - **üìö API Docs**: [http://localhost:3000/api/swagger](http://localhost:3000/api/swagger) - **üóÑÔ∏è Database**: `localhost:5432` (if using local PostgreSQL) ## üß™ Verify Your Setup Run these commands to ensure everything is working: ```bash # Check application health curl http://localhost:3000/api/health # Run tests yarn test # Check database connection yarn db:status ``` ## üé® First Steps ### Create Your First Post 1. Navigate to the app at `http://localhost:3000` 2. Sign up or log in 3. Create your first post 4. Explore the rich text editor features ### Explore the API 1. Visit the Swagger UI at `/api/swagger` 2. Try out the interactive API documentation 3. Test different endpoints ### Check Out the Code Key files to explore: - `src/app/page.tsx` - Main homepage - `src/app/api/` - API routes - `src/components/` - React components - `src/lib/` - Utility functions and services ## üöÄ Next Steps Now that you're up and running: 1. üìñ Read the [Installation Guide](../installation/) for detailed setup 2. üê≥ Learn about [Docker Development](../docker/) 3. üèóÔ∏è Understand the [Architecture](../../architecture/) 4. üß© Explore [Components](../../../../src/components/) 5. üß™ Set up [Testing](../../../dev/testing/) ## üîß Common Commands ```bash # Development yarn dev # Start development server yarn build # Build for production yarn start # Start production server # Database yarn db:migrate # Run database migrations yarn db:seed # Seed database with sample data yarn db:reset # Reset database (careful!) # Testing yarn test # Run unit tests yarn test:e2e # Run end-to-end tests yarn test:coverage # Run tests with coverage # Code Quality yarn lint # Run ESLint yarn format # Format code with Prettier yarn type-check # Run TypeScript checks ``` ## üí° Pro Tips - **Hot Reload**: Changes to your code will automatically reload the browser - **API Development**: Use the Swagger UI for testing API endpoints - **Database Changes**: Always create migrations for schema changes - **Environment Variables**: Use `.env.local` for local overrides ## üÜò Need Help? **Something not working?** 1. Check the [Troubleshooting Guide](../installation/#troubleshooting) 2. Look at [GitHub Issues](https://github.com/Underwood-Inc/idling.app__UI/issues) 3. Ask on [Discord](https://discord.gg/idling-app) 4. Create a [GitHub Discussion](https://github.com/Underwood-Inc/idling.app__UI/discussions) **Want to contribute?** 1. Read the [Contributing Guide](../../../community/contributing/) 2. Check out [Development Standards](../../../community/standards/) 3. Join our [Discord Community](../../../community/communication/discord/) --- Welcome to the Idling.app community! üéâ ",
    "./docs/index.md": "--- layout: default title: Documentation permalink: /docs/ --- # üìö Documentation Welcome to the comprehensive documentation for the idling.app project. This documentation covers everything from getting started to advanced development topics. ## üöÄ Getting Started New to the project? Start here: - [Installation Guide](getting-started/installation/) - Set up your development environment - [Quick Start](getting-started/quickstart/) - Get up and running in minutes - [Docker Setup](getting-started/docker/) - Containerized development environment ## üîå API Reference Complete API documentation and interactive tools: - [API Overview](api/overview/) - Introduction to the API - [Interactive Tools](api/interactive/) - Swagger UI and testing tools - [Core Endpoints](api/core/) - Main application endpoints - [Admin Endpoints](api/admin/) - Administrative functionality ## üèóÔ∏è Architecture Understand the system design and architecture: - [System Design](architecture/system/) - High-level architecture overview - [Security](architecture/security/) - Security patterns and implementation - [Performance](architecture/performance/) - Performance optimization strategies ## üöÄ Deployment Production deployment guides: - [Production Setup](deployment/production/) - Server deployment guide - [Documentation Site](deployment/docs/) - Deploy this documentation - [Release Process](deployment/releases/) - Version management and releases ## üìã Need Help? - Check the [Development](../dev/) section for technical details - Visit the [Community](../community/) section for support and contributions - Browse the [Project Info](../community/project/) for reports and roadmap --- _This documentation is continuously updated. Last updated: {{ site.time | date: \"%B %d, %Y\" }}_ ",
    "./documentation-coverage.md": "--- layout: default title: Documentation Coverage Badge description: Auto-generated documentation coverage badge --- # Documentation Coverage Badge ![Documentation Coverage](https://img.shields.io/badge/Documentation%20Coverage-90%25-brightgreen?style=flatDOC_BADGE_URL_PLACEHOLDERlogo=gitbookDOC_BADGE_URL_PLACEHOLDERlogoColor=white) **Current Coverage:** 90% (96/106 files) *Last updated: Thu Jul 3 18:56:58 NDT 2025* ## Badge URL ``` https://img.shields.io/badge/Documentation%20Coverage-90%25-brightgreen?style=flatDOC_BADGE_URL_PLACEHOLDERlogo=gitbookDOC_BADGE_URL_PLACEHOLDERlogoColor=white ``` ## Usage in Markdown ```markdown ![Documentation Coverage](https://img.shields.io/badge/Documentation%20Coverage-90%25-brightgreen?style=flatDOC_BADGE_URL_PLACEHOLDERlogo=gitbookDOC_BADGE_URL_PLACEHOLDERlogoColor=white) ``` ## Usage in HTML ```html <img src=\"https://img.shields.io/badge/Documentation%20Coverage-90%25-brightgreen?style=flatDOC_BADGE_URL_PLACEHOLDERlogo=gitbookDOC_BADGE_URL_PLACEHOLDERlogoColor=white\" alt=\"Documentation Coverage 90%\" /> ``` --- *This file is automatically updated by the pre-commit hook* ",
    "./index.md": "--- layout: default title: 'Project Management' description: 'Project management documentation, guidelines, and standards' permalink: /project/ --- # üìù Project Management Project management documentation covering development standards, commit guidelines, and project updates. ## üìã Development Standards ### [Commit Guidelines](commits/) Standardized commit message format and conventions: - **Conventional Commits**: Semantic commit message format - **Commit Types**: feat, fix, docs, style, refactor, test, chore - **Breaking Changes**: Proper documentation of breaking changes - **Scope Guidelines**: Component and module scoping - **Examples**: Real-world commit message examples ### [Project Updates](updates/) Latest project developments and announcements: - **Release Notes**: Version updates and new features - **Development Progress**: Sprint updates and milestones - **Team Updates**: Team changes and announcements - **Technical Decisions**: Architecture and technology choices ## üéØ Project Standards ### Code Quality - **TypeScript**: Strict type checking enabled - **ESLint**: Comprehensive linting rules - **Prettier**: Consistent code formatting - **Testing**: Minimum 80% code coverage - **Documentation**: Inline docs and README files ### Development Workflow 1. **Feature Branches**: Create feature branches from main 2. **Pull Requests**: Required for all changes 3. **Code Review**: Minimum one reviewer required 4. **Testing**: All tests must pass 5. **Documentation**: Update docs for new features ### Release Process 1. **Version Bumping**: Semantic versioning (semver) 2. **Changelog**: Auto-generated from commit messages 3. **Testing**: Full test suite execution 4. **Deployment**: Automated deployment pipeline 5. **Monitoring**: Post-deployment health checks ## üìä Project Metrics ### Development Metrics - **Velocity**: Sprint velocity tracking - **Quality**: Bug rates and resolution times - **Coverage**: Test coverage percentages - **Performance**: Build and test execution times ### Team Metrics - **Contributions**: Individual and team contributions - **Reviews**: Code review turnaround times - **Issues**: Issue resolution and response times - **Documentation**: Documentation coverage and quality ## üîó Related Sections - **[Development](../dev/)** - Development tools and practices - **[Community](../community/)** - Community guidelines and standards - **[Testing](../dev/testing/)** - Testing strategies and requirements --- _Project management documentation is continuously updated. Last updated: {{ site.time | date: \"%B %d, %Y\" }}_ ",
    "./src/app/api/README.md": "# üîå idling.app API Documentation Welcome to the idling.app API documentation. This directory contains all API endpoints and their documentation. ## üìñ Quick Links - **[Interactive Swagger UI](./swagger.md)** - Interactive API documentation - **[OpenAPI Specification](./openapi.json)** - Machine-readable API specification - **[Authentication Guide](../../DOCS/docs/getting-started/#authentication)** - How to authenticate with the API - **[Rate Limiting](../lib/services/RateLimitService.md)** - API rate limiting documentation - **[Development Setup](../../DOCS/docs/getting-started/)** - Set up your development environment ## üöÄ Getting Started ### Base URL ``` https://api.idling.app/v1 ``` For development: ``` http://localhost:3000/api ``` ### Authentication All API requests require authentication using Bearer tokens: ```bash curl -H \"Authorization: Bearer YOUR_TOKEN\" \ http://localhost:3000/api/emojis ``` ### Rate Limiting - **Authenticated**: 1000 requests per hour - **Unauthenticated**: 100 requests per hour Rate limit headers are included in all responses: ``` X-RateLimit-Limit: 1000 X-RateLimit-Remaining: 999 X-RateLimit-Reset: 1640995200 ``` ## üöÄ API Endpoints ### Core Endpoints - **[/api/version](./version/)** - API version information - **[/api/emojis](./emojis/)** - Emoji management and retrieval - **[/api/upload](./upload/)** - File upload endpoints - **[/api/profile](./profile/)** - User profile management ### Authentication - **[/api/auth](./auth/)** - Authentication endpoints (NextAuth.js) - **[/api/user](./user/)** - User account management ### Admin Endpoints - **[/api/admin](./admin/)** - Administrative functions ([Documentation](./admin/README.md)) - User management - System monitoring - Rate limit management ### Utilities - **[/api/alerts](./alerts/)** - System alerts and notifications - **[/api/link-preview](./link-preview/)** - URL preview generation - **[/api/og-image](./og-image/)** - Open Graph image generation ### Real-time - **[/api/simple-sse](./simple-sse/)** - Server-sent events - **[/api/test-sse](./test-sse/)** - SSE testing endpoints ## üîß Development ### Testing Endpoints - **[/api/test](./test/)** - Development and testing utilities - **[/api/debug](./debug/)** - Debug information endpoints ### Rate Limiting All API endpoints are protected by a comprehensive rate limiting system: - **Standard API**: 100 requests per minute - **Authentication**: 500 requests per minute - **File Uploads**: 5 requests per minute - **Search/Filter**: 200 requests per minute - **Admin Actions**: 50 requests per minute See the [RateLimitService documentation](../lib/services/RateLimitService.md) for complete details. ### Error Handling All API endpoints return standardized error responses: ```json { \"error\": \"Error message\", \"code\": \"ERROR_CODE\", \"details\": \"Additional details if available\" } ``` ### Response Format Successful responses follow this structure: ```json { \"success\": true, \"data\": \"Response data\", \"meta\": { \"timestamp\": \"2024-01-01T00:00:00Z\", \"requestId\": \"unique-request-id\" } } ``` ## üìä Interactive Documentation Visit the [Swagger UI](./swagger.md) for interactive API documentation where you can: - Explore all endpoints - Test API calls directly - View request/response schemas - Understand authentication requirements ## üîê Authentication Most endpoints require authentication. See the [Authentication Guide](../../DOCS/getting-started.md#authentication) for details on: - Session-based authentication - API key usage - Permission levels - Admin access requirements --- _This documentation is co-located with the API source code for better maintainability._ ",
    "./src/app/api/admin.md": "--- layout: default title: 'Admin API Documentation' description: 'Administrative API endpoints and functionality' permalink: /docs/api/admin/ --- # üîê Admin API Documentation Administrative API endpoints for managing users, content, and platform operations. These endpoints require elevated permissions and are restricted to authorized administrators. ## üõ°Ô∏è Authentication & Authorization ### Required Permissions All admin endpoints require: - **Valid JWT token** with admin privileges - **Admin role** assigned to the user account - **Specific permissions** for each endpoint category ### Admin Token Format ```bash Authorization: Bearer ADMIN_JWT_TOKEN_HERE ``` ### Permission Levels | Permission | Description | Endpoints | | -------------- | ----------------- | -------------------------- | | `admin:read` | View admin data | GET endpoints | | `admin:write` | Modify admin data | POST, PUT, PATCH endpoints | | `admin:delete` | Delete admin data | DELETE endpoints | | `admin:super` | Full admin access | All admin endpoints | ## üë• User Management ### List All Users **GET** `/api/v1/admin/users` Retrieve a paginated list of all platform users. #### Query Parameters | Parameter | Type | Default | Description | | --------- | -------- | ------------ | ------------------------------------------------ | | `limit` | `number` | `50` | Maximum users per page | | `offset` | `number` | `0` | Number of users to skip | | `status` | `string` | `all` | Filter by status: `active`, `inactive`, `banned` | | `role` | `string` | `all` | Filter by role: `user`, `admin`, `moderator` | | `search` | `string` | - | Search by username or email | | `sort` | `string` | `created_at` | Sort field | | `order` | `string` | `desc` | Sort order: `asc`, `desc` | #### Example Request ```bash curl -X GET \"https://api.idling.app/api/v1/admin/users?limit=20&status=active\" \ -H \"Authorization: Bearer ADMIN_TOKEN\" \ -H \"Accept: application/json\" ``` #### Response ```json { \"success\": true, \"data\": [ { \"id\": \"user_123\", \"username\": \"johndoe\", \"email\": \"john@example.com\", \"status\": \"active\", \"role\": \"user\", \"createdAt\": \"2024-01-01T00:00:00.000Z\", \"lastLoginAt\": \"2024-01-15T10:30:00.000Z\", \"postCount\": 25, \"isVerified\": true } ], \"meta\": { \"pagination\": { \"total\": 1000, \"limit\": 20, \"offset\": 0, \"hasMore\": true } } } ``` ### Get User Details **GET** `/api/v1/admin/users/{userId}` Retrieve detailed information about a specific user. #### Path Parameters | Parameter | Type | Description | | --------- | -------- | ------------------- | | `userId` | `string` | User ID to retrieve | #### Example Request ```bash curl -X GET \"https://api.idling.app/api/v1/admin/users/user_123\" \ -H \"Authorization: Bearer ADMIN_TOKEN\" ``` ### Update User **PUT** `/api/v1/admin/users/{userId}` Update user information and settings. #### Request Body ```json { \"status\": \"active\", \"role\": \"moderator\", \"isVerified\": true, \"notes\": \"Promoted to moderator\" } ``` ### Ban/Unban User **POST** `/api/v1/admin/users/{userId}/ban` Ban or unban a user account. #### Request Body ```json { \"action\": \"ban\", \"reason\": \"Violation of community guidelines\", \"duration\": \"7d\", \"notes\": \"Temporary ban for spam\" } ``` ## üìù Content Management ### List All Posts **GET** `/api/v1/admin/posts` Retrieve all posts across the platform with admin metadata. #### Query Parameters | Parameter | Type | Default | Description | | ---------- | --------- | ------------ | ----------------------------------------------------------- | | `limit` | `number` | `50` | Maximum posts per page | | `offset` | `number` | `0` | Number of posts to skip | | `status` | `string` | `all` | Filter by status: `published`, `draft`, `hidden`, `flagged` | | `author` | `string` | - | Filter by author user ID | | `reported` | `boolean` | - | Show only reported posts | | `sort` | `string` | `created_at` | Sort field | | `order` | `string` | `desc` | Sort order | #### Example Request ```bash curl -X GET \"https://api.idling.app/api/v1/admin/posts?reported=true&limit=10\" \ -H \"Authorization: Bearer ADMIN_TOKEN\" ``` #### Response ```json { \"success\": true, \"data\": [ { \"id\": \"post_456\", \"title\": \"Example Post\", \"content\": \"Post content...\", \"author\": { \"id\": \"user_123\", \"username\": \"johndoe\" }, \"status\": \"flagged\", \"reportCount\": 3, \"reports\": [ { \"reason\": \"spam\", \"reportedBy\": \"user_789\", \"reportedAt\": \"2024-01-15T09:00:00.000Z\" } ], \"createdAt\": \"2024-01-14T15:30:00.000Z\", \"updatedAt\": \"2024-01-15T09:00:00.000Z\" } ], \"meta\": { \"pagination\": { \"total\": 150, \"limit\": 10, \"offset\": 0, \"hasMore\": true } } } ``` ### Moderate Post **POST** `/api/v1/admin/posts/{postId}/moderate` Take moderation action on a post. #### Request Body ```json { \"action\": \"hide\", \"reason\": \"Inappropriate content\", \"notes\": \"Hidden pending review\", \"notifyAuthor\": true } ``` #### Available Actions - `approve` - Approve flagged post - `hide` - Hide post from public view - `delete` - Permanently delete post - `flag` - Flag for further review ## üìä Analytics & Reports ### Platform Analytics **GET** `/api/v1/admin/analytics` Retrieve platform-wide analytics and metrics. #### Query Parameters | Parameter | Type | Default | Description | | --------- | ---------- | ------- | ------------------------------------------- | | `period` | `string` | `7d` | Time period: `1d`, `7d`, `30d`, `90d`, `1y` | | `metrics` | `string[]` | `all` | Specific metrics to include | #### Example Request ```bash curl -X GET \"https://api.idling.app/api/v1/admin/analytics?period=30d\" \ -H \"Authorization: Bearer ADMIN_TOKEN\" ``` #### Response ```json { \"success\": true, \"data\": { \"period\": \"30d\", \"users\": { \"total\": 10000, \"active\": 7500, \"new\": 250, \"growth\": \"+2.5%\" }, \"content\": { \"totalPosts\": 50000, \"newPosts\": 1200, \"moderatedPosts\": 45, \"flaggedPosts\": 23 }, \"engagement\": { \"avgSessionDuration\": \"15m 30s\", \"dailyActiveUsers\": 2500, \"postsPerUser\": 6.7 }, \"moderation\": { \"reportsReceived\": 67, \"reportsResolved\": 62, \"averageResolutionTime\": \"2h 15m\" } } } ``` ### User Activity Report **GET** `/api/v1/admin/reports/user-activity` Generate detailed user activity reports. #### Query Parameters | Parameter | Type | Description | | ---------------- | --------- | ------------------------------ | | `userId` | `string` | Specific user ID (optional) | | `startDate` | `string` | Start date (ISO format) | | `endDate` | `string` | End date (ISO format) | | `includeDetails` | `boolean` | Include detailed activity logs | ### Content Moderation Report **GET** `/api/v1/admin/reports/moderation` Generate content moderation reports and statistics. ## üîß Administrative Actions ### System Maintenance **POST** `/api/v1/admin/system/maintenance` Trigger system maintenance tasks. #### Request Body ```json { \"action\": \"cache_clear\", \"scope\": \"all\", \"notify\": true } ``` #### Available Actions - `cache_clear` - Clear application cache - `rebuild_search` - Rebuild search indexes - `cleanup_uploads` - Clean up orphaned files - `backup_database` - Trigger database backup ### Send Platform Notification **POST** `/api/v1/admin/notifications/broadcast` Send platform-wide notifications to users. #### Request Body ```json { \"title\": \"Platform Update\", \"message\": \"We've released new features!\", \"type\": \"info\", \"targets\": [\"all\"], \"schedule\": \"immediate\" } ``` ### Feature Flags **GET** `/api/v1/admin/feature-flags` Manage platform feature flags and toggles. **PUT** `/api/v1/admin/feature-flags/{flagName}` Update feature flag settings. ## üö¶ Rate Limiting ### Admin Rate Limits - **General Admin**: 5000 requests per hour - **Super Admin**: 10000 requests per hour - **System Actions**: 100 requests per hour ### Rate Limit Headers ``` X-RateLimit-Limit: 5000 X-RateLimit-Remaining: 4999 X-RateLimit-Reset: 1640995200 X-Admin-Tier: general ``` ## üîç Audit Logging All admin actions are automatically logged with: - **Timestamp** - When the action occurred - **Admin User** - Who performed the action - **Action Type** - What was done - **Target** - What was affected - **IP Address** - Where the action originated - **User Agent** - Client information ### View Audit Logs **GET** `/api/v1/admin/audit-logs` Retrieve admin action audit logs. #### Query Parameters | Parameter | Type | Description | | ----------- | -------- | --------------------- | | `adminId` | `string` | Filter by admin user | | `action` | `string` | Filter by action type | | `startDate` | `string` | Start date filter | | `endDate` | `string` | End date filter | | `limit` | `number` | Results per page | | `offset` | `number` | Results offset | ## üö® Error Handling ### Admin-Specific Errors #### 403 Insufficient Permissions ```json { \"success\": false, \"error\": { \"code\": \"INSUFFICIENT_ADMIN_PERMISSIONS\", \"message\": \"This action requires super admin privileges\", \"requiredPermission\": \"admin:super\" } } ``` #### 423 Resource Locked ```json { \"success\": false, \"error\": { \"code\": \"RESOURCE_LOCKED\", \"message\": \"This resource is currently being modified by another admin\", \"lockedBy\": \"admin_user_456\", \"lockedAt\": \"2024-01-15T10:30:00.000Z\" } } ``` ## üîó Related Documentation - **[API Overview](../index.md)** - General API documentation - **[Authentication Guide](../../getting-started/#authentication)** - Auth setup - **[Rate Limiting](../../../dev/libraries/services/#rate-limiting)** - Rate limiting details - **[Security Architecture](../../architecture/security/)** - Security patterns ## üí° Best Practices ### 1. Audit Trail Always include meaningful notes when taking moderation actions: ```json { \"action\": \"ban\", \"reason\": \"Spam violation\", \"notes\": \"User posted 50+ promotional links in 1 hour\" } ``` ### 2. Batch Operations Use batch endpoints for bulk operations when available: ```bash POST /api/v1/admin/users/bulk-update ``` ### 3. Monitoring Monitor admin actions and set up alerts for: - High-frequency admin actions - Failed admin requests - Unusual admin activity patterns ### 4. Security - Use dedicated admin accounts - Enable 2FA for admin accounts - Regularly rotate admin tokens - Monitor admin access logs ## üìû Admin Support ### Emergency Contacts - **Security Issues**: security@idling.app - **Platform Issues**: admin-support@idling.app - **On-call Admin**: +1-555-ADMIN-24 ### Admin Resources - **Admin Dashboard**: admin.idling.app - **Admin Documentation**: Internal admin wiki - **Admin Training**: Quarterly training sessions --- **Last Updated**: {{ site.time | date: \"%B %d, %Y\" }} **Admin API Version**: v1.0.0 > **‚ö†Ô∏è Security Notice**: Admin endpoints are logged and monitored. All actions are subject to audit and review. ",
    "./src/app/api/admin/README.md": "--- title: 'üîß Admin Endpoints' description: 'Administrative endpoints for system management' --- # üîß Admin Endpoints Administrative endpoints for system management and configuration. These endpoints require elevated permissions. ## Authentication All admin endpoints require: - Valid authentication token - Admin role permissions - Additional rate limiting applies ## User Administration ### GET /api/v1/admin/users List all users with admin details. **Query Parameters:** - `page` - Page number - `limit` - Results per page - `status` - Filter by user status (active, suspended, deleted) - `role` - Filter by user role **Response:** ```json { \"status\": \"success\", \"data\": { \"users\": [...], \"pagination\": { \"page\": 1, \"limit\": 20, \"total\": 150, \"pages\": 8 } } } ``` ### POST /api/v1/admin/users Create new user account. ### PUT /api/v1/admin/users/:id Update any user account. ### DELETE /api/v1/admin/users/:id Delete user account (soft delete). ### POST /api/v1/admin/users/:id/suspend Suspend user account. ### POST /api/v1/admin/users/:id/restore Restore suspended user account. ## Content Management ### GET /api/v1/admin/content List all content with moderation details. ### PUT /api/v1/admin/content/:id/moderate Moderate content item. **Request:** ```json { \"action\": \"approve|reject|flag\", \"reason\": \"Optional moderation reason\" } ``` ### DELETE /api/v1/admin/content/:id Permanently delete content. ## System Configuration ### GET /api/v1/admin/config Get system configuration. ### PUT /api/v1/admin/config Update system configuration. **Request:** ```json { \"maintenance_mode\": false, \"registration_enabled\": true, \"max_upload_size\": 10485760, \"rate_limits\": { \"authenticated\": 1000, \"anonymous\": 100 } } ``` ## Analytics & Reporting ### GET /api/v1/admin/analytics/overview Get system analytics overview. **Response:** ```json { \"status\": \"success\", \"data\": { \"users\": { \"total\": 1250, \"active_today\": 45, \"new_this_week\": 12 }, \"content\": { \"total\": 5670, \"created_today\": 23, \"pending_moderation\": 8 }, \"system\": { \"uptime\": \"99.9%\", \"response_time\": \"120ms\", \"error_rate\": \"0.1%\" } } } ``` ### GET /api/v1/admin/analytics/users Detailed user analytics. ### GET /api/v1/admin/analytics/content Content creation and engagement analytics. ### GET /api/v1/admin/logs System logs with filtering. **Query Parameters:** - `level` - Log level (error, warn, info, debug) - `service` - Filter by service name - `from` - Start date (ISO 8601) - `to` - End date (ISO 8601) ## Maintenance ### POST /api/v1/admin/maintenance/enable Enable maintenance mode. ### POST /api/v1/admin/maintenance/disable Disable maintenance mode. ### POST /api/v1/admin/cache/clear Clear application cache. ### GET /api/v1/admin/health Comprehensive system health check. **Response:** ```json { \"status\": \"success\", \"data\": { \"database\": \"healthy\", \"cache\": \"healthy\", \"storage\": \"healthy\", \"external_apis\": \"healthy\", \"memory_usage\": \"65%\", \"disk_usage\": \"42%\" } } ``` ## Permissions Required | Endpoint Category | Required Role | Additional Permissions | | ------------------ | ------------- | ---------------------- | | User Management | `admin` | `users:manage` | | Content Moderation | `moderator` | `content:moderate` | | System Config | `super_admin` | `system:configure` | | Analytics | `admin` | `analytics:read` | | Maintenance | `super_admin` | `system:maintain` | ## Rate Limiting Admin endpoints have stricter rate limits: - **Super Admin**: 500 requests per hour - **Admin**: 300 requests per hour - **Moderator**: 200 requests per hour ## Security Notes - All admin actions are logged - IP address restrictions may apply - Multi-factor authentication recommended - Session timeouts are shorter for admin accounts ## Next Steps - Review [Core Endpoints](../README.md) for regular API functionality - Check [API Overview](../README.md) for authentication setup - Use [Interactive Tools](../swagger.md) for testing (admin token required) ",
    "./src/app/api/admin/alerts/README.md": "--- title: route category: api_route tags: [documentation-needed] status: draft --- # route > ‚ö†Ô∏è **Documentation Needed**: This file was automatically generated and needs content. ## Overview TODO: Describe what this api_route does. ## Usage TODO: Provide usage examples. ## API Reference TODO: Document the public interface. --- *File: `src/app/api/admin/alerts/route.ts`* *Auto-generated on: 2025-07-01 11:33:14* ",
    "./src/app/api/admin/alerts/[id]/README.md": "--- title: route category: api_route tags: [documentation-needed] status: draft --- # route > ‚ö†Ô∏è **Documentation Needed**: This file was automatically generated and needs content. ## Overview TODO: Describe what this api_route does. ## Usage TODO: Provide usage examples. ## API Reference TODO: Document the public interface. --- *File: `src/app/api/admin/alerts/[id]/route.ts`* *Auto-generated on: 2025-07-01 11:33:14* ",
    "./src/app/api/admin/emojis/README.md": "--- title: route category: api_route tags: [documentation-needed] status: draft --- # route > ‚ö†Ô∏è **Documentation Needed**: This file was automatically generated and needs content. ## Overview TODO: Describe what this api_route does. ## Usage TODO: Provide usage examples. ## API Reference TODO: Document the public interface. --- *File: `src/app/api/admin/emojis/route.ts`* *Auto-generated on: 2025-07-01 11:33:14* ",
    "./src/app/api/admin/quotas/global/README.md": "--- title: route category: api_route tags: [documentation-needed] status: draft --- # route > ‚ö†Ô∏è **Documentation Needed**: This file was automatically generated and needs content. ## Overview TODO: Describe what this api_route does. ## Usage TODO: Provide usage examples. ## API Reference TODO: Document the public interface. --- *File: `src/app/api/admin/quotas/global/route.ts`* *Auto-generated on: 2025-07-01 11:33:14* ",
    "./src/app/api/admin/quotas/global/[id]/README.md": "--- title: route category: api_route tags: [documentation-needed] status: draft --- # route > ‚ö†Ô∏è **Documentation Needed**: This file was automatically generated and needs content. ## Overview TODO: Describe what this api_route does. ## Usage TODO: Provide usage examples. ## API Reference TODO: Document the public interface. --- *File: `src/app/api/admin/quotas/global/[id]/route.ts`* *Auto-generated on: 2025-07-01 11:33:14* ",
    "./src/app/api/admin/rate-limit/README.md": "--- title: route category: api_route tags: [documentation-needed] status: draft --- # route > ‚ö†Ô∏è **Documentation Needed**: This file was automatically generated and needs content. ## Overview TODO: Describe what this api_route does. ## Usage TODO: Provide usage examples. ## API Reference TODO: Document the public interface. --- *File: `src/app/api/admin/rate-limit/route.ts`* *Auto-generated on: 2025-07-01 11:33:14* ",
    "./src/app/api/admin/refresh-views/README.md": "--- title: route category: api_route tags: [documentation-needed] status: draft --- # route > ‚ö†Ô∏è **Documentation Needed**: This file was automatically generated and needs content. ## Overview TODO: Describe what this api_route does. ## Usage TODO: Provide usage examples. ## API Reference TODO: Document the public interface. --- *File: `src/app/api/admin/refresh-views/route.ts`* *Auto-generated on: 2025-07-01 11:33:14* ",
    "./src/app/api/admin/roles/README.md": "--- title: route category: api_route tags: [documentation-needed] status: draft --- # route > ‚ö†Ô∏è **Documentation Needed**: This file was automatically generated and needs content. ## Overview TODO: Describe what this api_route does. ## Usage TODO: Provide usage examples. ## API Reference TODO: Document the public interface. --- *File: `src/app/api/admin/roles/route.ts`* *Auto-generated on: 2025-07-01 11:33:14* ",
    "./src/app/api/admin/subscription-plans/README.md": "--- title: route category: api_route tags: [documentation-needed] status: draft --- # route > ‚ö†Ô∏è **Documentation Needed**: This file was automatically generated and needs content. ## Overview TODO: Describe what this api_route does. ## Usage TODO: Provide usage examples. ## API Reference TODO: Document the public interface. --- *File: `src/app/api/admin/subscription-plans/route.ts`* *Auto-generated on: 2025-07-01 11:33:14* ",
    "./src/app/api/admin/users/README.md": "--- title: route category: api_route tags: [documentation-needed] status: draft --- # route > ‚ö†Ô∏è **Documentation Needed**: This file was automatically generated and needs content. ## Overview TODO: Describe what this api_route does. ## Usage TODO: Provide usage examples. ## API Reference TODO: Document the public interface. --- *File: `src/app/api/admin/users/route.ts`* *Auto-generated on: 2025-07-01 11:33:14* ",
    "./src/app/api/admin/users/[id]/README.md": "--- title: route category: api_route tags: [documentation-needed] status: draft --- # route > ‚ö†Ô∏è **Documentation Needed**: This file was automatically generated and needs content. ## Overview TODO: Describe what this api_route does. ## Usage TODO: Provide usage examples. ## API Reference TODO: Document the public interface. --- *File: `src/app/api/admin/users/[id]/route.ts`* *Auto-generated on: 2025-07-01 11:33:14* ",
    "./src/app/api/admin/users/[id]/assign-role/README.md": "--- title: route category: api_route tags: [documentation-needed] status: draft --- # route > ‚ö†Ô∏è **Documentation Needed**: This file was automatically generated and needs content. ## Overview TODO: Describe what this api_route does. ## Usage TODO: Provide usage examples. ## API Reference TODO: Document the public interface. --- *File: `src/app/api/admin/users/[id]/assign-role/route.ts`* *Auto-generated on: 2025-07-01 11:33:14* ",
    "./src/app/api/admin/users/[id]/assign-subscription/README.md": "--- title: route category: api_route tags: [documentation-needed] status: draft --- # route > ‚ö†Ô∏è **Documentation Needed**: This file was automatically generated and needs content. ## Overview TODO: Describe what this api_route does. ## Usage TODO: Provide usage examples. ## API Reference TODO: Document the public interface. --- *File: `src/app/api/admin/users/[id]/assign-subscription/route.ts`* *Auto-generated on: 2025-07-01 11:33:14* ",
    "./src/app/api/admin/users/[id]/quotas/README.md": "--- title: route category: api_route tags: [documentation-needed] status: draft --- # route > ‚ö†Ô∏è **Documentation Needed**: This file was automatically generated and needs content. ## Overview TODO: Describe what this api_route does. ## Usage TODO: Provide usage examples. ## API Reference TODO: Document the public interface. --- *File: `src/app/api/admin/users/[id]/quotas/route.ts`* *Auto-generated on: 2025-07-01 11:33:14* ",
    "./src/app/api/admin/users/[id]/quotas/reset/README.md": "--- title: route category: api_route tags: [documentation-needed] status: draft --- # route > ‚ö†Ô∏è **Documentation Needed**: This file was automatically generated and needs content. ## Overview TODO: Describe what this api_route does. ## Usage TODO: Provide usage examples. ## API Reference TODO: Document the public interface. --- *File: `src/app/api/admin/users/[id]/quotas/reset/route.ts`* *Auto-generated on: 2025-07-01 11:33:14* ",
    "./src/app/api/admin/users/[id]/timeout/README.md": "--- title: route category: api_route tags: [documentation-needed] status: draft --- # route > ‚ö†Ô∏è **Documentation Needed**: This file was automatically generated and needs content. ## Overview TODO: Describe what this api_route does. ## Usage TODO: Provide usage examples. ## API Reference TODO: Document the public interface. --- *File: `src/app/api/admin/users/[id]/timeout/route.ts`* *Auto-generated on: 2025-07-01 11:33:14* ",
    "./src/app/api/admin/users/search/README.md": "--- title: route category: api_route tags: [documentation-needed] status: draft --- # route > ‚ö†Ô∏è **Documentation Needed**: This file was automatically generated and needs content. ## Overview TODO: Describe what this api_route does. ## Usage TODO: Provide usage examples. ## API Reference TODO: Document the public interface. --- *File: `src/app/api/admin/users/search/route.ts`* *Auto-generated on: 2025-07-01 11:33:14* ",
    "./src/app/api/admin/users/timeout/README.md": "--- title: route category: api_route tags: [documentation-needed] status: draft --- # route > ‚ö†Ô∏è **Documentation Needed**: This file was automatically generated and needs content. ## Overview TODO: Describe what this api_route does. ## Usage TODO: Provide usage examples. ## API Reference TODO: Document the public interface. --- *File: `src/app/api/admin/users/timeout/route.ts`* *Auto-generated on: 2025-07-01 11:33:14* ",
    "./src/app/api/admin/users/timeout/revoke/README.md": "--- title: route category: api_route tags: [documentation-needed] status: draft --- # route > ‚ö†Ô∏è **Documentation Needed**: This file was automatically generated and needs content. ## Overview TODO: Describe what this api_route does. ## Usage TODO: Provide usage examples. ## API Reference TODO: Document the public interface. --- *File: `src/app/api/admin/users/timeout/revoke/route.ts`* *Auto-generated on: 2025-07-01 11:33:14* ",
    "./src/app/api/alerts/[id]/dismiss/README.md": "--- title: route category: api_route tags: [documentation-needed] status: draft --- # route > ‚ö†Ô∏è **Documentation Needed**: This file was automatically generated and needs content. ## Overview TODO: Describe what this api_route does. ## Usage TODO: Provide usage examples. ## API Reference TODO: Document the public interface. --- *File: `src/app/api/alerts/[id]/dismiss/route.ts`* *Auto-generated on: 2025-07-01 11:33:14* ",
    "./src/app/api/alerts/active/README.md": "--- title: route category: api_route tags: [documentation-needed] status: draft --- # route > ‚ö†Ô∏è **Documentation Needed**: This file was automatically generated and needs content. ## Overview TODO: Describe what this api_route does. ## Usage TODO: Provide usage examples. ## API Reference TODO: Document the public interface. --- *File: `src/app/api/alerts/active/route.ts`* *Auto-generated on: 2025-07-01 11:33:14* ",
    "./src/app/api/alerts/dismiss/README.md": "--- title: route category: api_route tags: [documentation-needed] status: draft --- # route > ‚ö†Ô∏è **Documentation Needed**: This file was automatically generated and needs content. ## Overview TODO: Describe what this api_route does. ## Usage TODO: Provide usage examples. ## API Reference TODO: Document the public interface. --- *File: `src/app/api/alerts/dismiss/route.ts`* *Auto-generated on: 2025-07-01 11:33:14* ",
    "./src/app/api/alerts/stream/README.md": "--- title: route category: api_route tags: [documentation-needed] status: draft --- # route > ‚ö†Ô∏è **Documentation Needed**: This file was automatically generated and needs content. ## Overview TODO: Describe what this api_route does. ## Usage TODO: Provide usage examples. ## API Reference TODO: Document the public interface. --- *File: `src/app/api/alerts/stream/route.ts`* *Auto-generated on: 2025-07-01 11:33:14* ",
    "./src/app/api/auth/[...nextauth]/README.md": "--- title: route category: api_route tags: [documentation-needed] status: draft --- # route > ‚ö†Ô∏è **Documentation Needed**: This file was automatically generated and needs content. ## Overview TODO: Describe what this api_route does. ## Usage TODO: Provide usage examples. ## API Reference TODO: Document the public interface. --- *File: `src/app/api/auth/[...nextauth]/route.ts`* *Auto-generated on: 2025-07-01 11:33:14* ",
    "./src/app/api/auth/unlink-account/README.md": "--- title: route category: api_route tags: [documentation-needed] status: draft --- # route > ‚ö†Ô∏è **Documentation Needed**: This file was automatically generated and needs content. ## Overview TODO: Describe what this api_route does. ## Usage TODO: Provide usage examples. ## API Reference TODO: Document the public interface. --- *File: `src/app/api/auth/unlink-account/route.ts`* *Auto-generated on: 2025-07-01 11:33:14* ",
    "./src/app/api/avatar-image/README.md": "--- layout: default title: Avatar Image API description: Generate unique avatar images using @dicebear adventurer collection --- # üë§ Avatar Image API The Avatar Image API generates unique, consistent avatar images using the @dicebear adventurer collection. These avatars are perfect for user profiles, placeholder images, and any application requiring distinctive character representations. ## üéØ What are Avatar Images? Avatar images are visual representations of users or entities, commonly used for: - **User profiles** - Profile pictures and account representations - **Comment systems** - Visual identification in discussions - **Placeholder content** - Default images before user uploads - **Game characters** - Unique character representations - **Social features** - Visual elements in user interactions ## üì° Endpoint ``` GET /api/avatar-image ``` **Response Format:** SVG image (image/svg+xml) **Cache:** No cache (dynamic generation) ## üîß Parameters ### Query Parameters | Parameter | Type | Required | Description | Example | | --------- | ------ | -------- | ----------------------------------- | ------------------- | | `seed` | string | **Yes** | Unique seed for avatar generation | `seed=john-doe-123` | | `size` | number | No | Image size in pixels (default: 200) | `size=400` | ## üé® Features ### Adventurer Collection The API uses the **@dicebear adventurer collection** which provides: - **Unique characters** - Each seed generates a distinct adventurer - **Consistent results** - Same seed always produces same avatar - **Rich details** - Multiple customizable features and accessories - **SVG format** - Scalable vector graphics for any size - **Diverse representation** - Wide variety of character appearances ### Deterministic Generation - **Seed-based** - Identical seeds produce identical avatars - **Reproducible** - Perfect for user profile consistency - **Collision-resistant** - Different seeds create different avatars - **Scalable** - Generate avatars for millions of users ## üìñ Usage Examples ### Basic Usage Generate an avatar with a specific seed: ```bash curl \"https://idling.app/api/avatar-image?seed=user-123\" ``` ### Custom Size Generate a larger avatar: ```bash curl \"https://idling.app/api/avatar-image?seed=user-123&size=400\" ``` ### User-Specific Avatars Generate avatars based on user data: ```bash # Using username as seed curl \"https://idling.app/api/avatar-image?seed=jane-doe\" # Using user ID as seed curl \"https://idling.app/api/avatar-image?seed=user-12345\" # Using email hash as seed curl \"https://idling.app/api/avatar-image?seed=a1b2c3d4e5f6\" ``` ## üåê Integration ### HTML Implementation Use in HTML img tags: ```html <!-- Basic avatar --> <img src=\"https://idling.app/api/avatar-image?seed=user-123\" alt=\"User Avatar\" width=\"200\" height=\"200\" /> <!-- High-resolution avatar --> <img src=\"https://idling.app/api/avatar-image?seed=user-123&size=400\" alt=\"User Avatar\" width=\"200\" height=\"200\" style=\"border-radius: 50%;\" /> ``` ### React Component ```jsx function Avatar({ userId, size = 200, className = '' }) { const avatarUrl = `https://idling.app/api/avatar-image?seed=${encodeURIComponent(userId)}&size=${size}`; return ( <img src={avatarUrl} alt={`Avatar for ${userId}`} width={size} height={size} className={`avatar ${className}`} /> ); } // Usage <Avatar userId=\"user-123\" size={100} className=\"rounded-full\" />; ``` ### CSS Styling ```css .avatar { border-radius: 50%; border: 2px solid #ff6b35; box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1); } .avatar:hover { transform: scale(1.05); transition: transform 0.2s ease; } ``` ## üìä Response Format ### Success Response **Content-Type:** `image/svg+xml` **Status:** `200 OK` The response is a complete SVG image featuring: - **Adventurer character** - Unique design based on seed - **Scalable vector graphics** - Crisp at any resolution - **Rich details** - Hair, clothing, accessories, facial features - **Consistent styling** - Cohesive art style across all avatars ### Error Response **Status:** `400 Bad Request` (if seed is missing) ```json { \"error\": \"Seed parameter is required\", \"status\": 400 } ``` **Status:** `500 Internal Server Error` (if generation fails) ```json { \"error\": \"Avatar generation failed\", \"status\": 500 } ``` ## üîß Technical Details ### Seed Requirements - **Required parameter** - Must provide a seed value - **String format** - Any string value is acceptable - **Deterministic** - Same seed always produces same result - **Case sensitive** - \"User123\" and \"user123\" produce different avatars ### Size Specifications - **Default size:** 200x200 pixels - **Minimum size:** 50x50 pixels - **Maximum size:** 1000x1000 pixels - **Square format:** Always generates square images - **SVG scaling:** Can be resized in CSS without quality loss ### Performance - **Fast generation** - Typically responds in under 100ms - **No caching** - Fresh generation for each request - **Edge runtime** - Low latency globally - **Lightweight** - SVG format keeps file sizes small ## üé® Customization ### Seed Strategies **Username-based:** ```javascript const seed = username.toLowerCase().replace(/[^a-z0-9]/g, ''); ``` **User ID-based:** ```javascript const seed = `user-${userId}`; ``` **Email-based:** ```javascript const seed = btoa(email).replace(/[^a-zA-Z0-9]/g, ''); ``` **Random but persistent:** ```javascript // Generate once, store in database const seed = crypto.randomUUID(); ``` ### Display Options **Circular avatars:** ```css .avatar { border-radius: 50%; overflow: hidden; } ``` **Rounded corners:** ```css .avatar { border-radius: 12px; } ``` **With borders:** ```css .avatar { border: 3px solid #ff6b35; padding: 2px; } ``` ## üöÄ Best Practices ### For User Profiles - **Use consistent seeds** - Same user should always get same avatar - **Include fallbacks** - Handle API errors gracefully - **Optimize sizes** - Request appropriate resolution for display size - **Cache in browser** - Let browser cache the SVG responses ### For Performance - **Batch requests** - Don't make simultaneous requests for same seed - **Appropriate sizing** - Don't request 1000px avatars for 50px displays - **Error handling** - Provide fallback images for failed requests - **Progressive loading** - Show placeholder while avatar loads ### For Accessibility ```html <img src=\"/api/avatar-image?seed=user-123\" alt=\"Profile picture for John Doe\" role=\"img\" loading=\"lazy\" /> ``` ## üîó Related APIs - **[OG Image API](./og-image)** - Uses avatars in social media images - **[Upload APIs](./upload)** - Alternative custom avatar uploads ## üìã Common Use Cases ### User Registration ```javascript // Generate avatar during user signup async function createUser(userData) { const avatarSeed = `user-${userData.username}-${Date.now()}`; const user = await db.users.create({ ...userData, avatarSeed: avatarSeed }); // Avatar URL is constructed when needed user.avatarUrl = `/api/avatar-image?seed=${avatarSeed}`; return user; } ``` ### Comment Systems ```jsx function Comment({ comment, author }) { return ( <div className=\"comment\"> <img src={`/api/avatar-image?seed=${author.id}&size=40`} alt={`${author.name}'s avatar`} className=\"comment-avatar\" /> <div className=\"comment-content\"> <strong>{author.name}</strong> <p>{comment.text}</p> </div> </div> ); } ``` ### Profile Lists ```jsx function UserList({ users }) { return ( <div className=\"user-grid\"> {users.map((user) => ( <div key={user.id} className=\"user-card\"> <img src={`/api/avatar-image?seed=${user.id}&size=120`} alt={`${user.name}'s profile`} className=\"profile-avatar\" /> <h3>{user.name}</h3> <p>{user.bio}</p> </div> ))} </div> ); } ``` --- _The Avatar Image API provides consistent, unique visual identity for users without requiring custom image uploads._ ",
    "./src/app/api/emojis/README.md": "--- layout: default title: Emoji APIs description: Complete guide to emoji-related API endpoints for browsing, using, and tracking emojis --- # üòÄ Emoji APIs This guide explains how to work with emojis in the idling.app through our API endpoints. Whether you want to browse emojis, track usage, or manage custom emojis, this documentation has you covered. ## üéØ What Are Emoji APIs? Our emoji system lets users: - **Browse available emojis** (built-in and custom) - **Use emojis in posts** and comments - **Upload custom emojis** for approval - **Track popular emojis** to see what people use most Think of it like a digital sticker collection that everyone can share and use! ## üìö Available Endpoints ### GET /api/emojis - Browse All Emojis **What it does:** Get a list of all available emojis (both system emojis and approved custom ones) **Who can use it:** Everyone (no login required) **How to use it:** ```bash curl https://yourdomain.com/api/emojis ``` **Query Parameters:** - `page` - Which page of results (default: 1) - `per_page` - How many emojis per page (default: 50, max: 100) - `category` - Filter by category (e.g., \"smileys\", \"animals\") - `search` - Search for specific emojis by name - `os` - Your operating system (\"windows\", \"mac\", \"linux\") for best compatibility **Example requests:** ```bash # Get first 20 emojis curl \"https://yourdomain.com/api/emojis?per_page=20\" # Search for heart emojis curl \"https://yourdomain.com/api/emojis?search=heart\" # Get animal emojis for Windows curl \"https://yourdomain.com/api/emojis?category=animals&os=windows\" ``` **Success Response (200):** ```json { \"emojis\": [ { \"id\": 1, \"emoji_id\": \"grinning-face\", \"unicode_char\": \"üòÄ\", \"name\": \"grinning face\", \"description\": \"A happy, grinning face\", \"category\": { \"id\": 1, \"name\": \"smileys\", \"display_name\": \"Smileys & Emotion\" }, \"tags\": [\"happy\", \"smile\", \"joy\"], \"aliases\": [\"grinning\", \"happy\"], \"usage_count\": 150, \"is_custom\": false }, { \"id\": 2, \"emoji_id\": \"custom-celebration\", \"name\": \"celebration\", \"description\": \"Custom celebration emoji\", \"category\": { \"id\": 10, \"name\": \"custom\", \"display_name\": \"Custom\" }, \"tags\": [\"party\", \"celebrate\"], \"custom_image_url\": \"/uploads/emojis/celebration.png\", \"usage_count\": 25, \"is_custom\": true, \"is_approved\": true } ], \"categories\": [ { \"id\": 1, \"name\": \"smileys\", \"display_name\": \"Smileys & Emotion\", \"emoji_count\": 156 } ], \"os_info\": { \"os\": \"windows\", \"version\": \"10\", \"is_supported\": true, \"emoji_support\": { \"supports_unicode\": true, \"supports_custom\": true, \"max_emoji_version\": \"15.0\", \"recommended_format\": \"unicode\" } }, \"total_count\": 1247, \"page\": 1, \"per_page\": 50 } ``` **What each field means:** - **emoji_id**: Unique identifier for the emoji - **unicode_char**: The actual emoji character (for system emojis) - **name**: Human-readable name - **description**: What the emoji represents - **category**: What group it belongs to - **tags**: Keywords for searching - **aliases**: Other names for the same emoji - **usage_count**: How many times it's been used - **is_custom**: Whether it's a user-uploaded emoji - **custom_image_url**: URL to the custom emoji image - **is_approved**: Whether custom emoji is approved for use ### POST /api/emojis/usage - Track Emoji Usage **What it does:** Record that someone used a specific emoji (for statistics and recommendations) **Who can use it:** Everyone (no login required) **How to use it:** ```bash curl -X POST https://yourdomain.com/api/emojis/usage \ -H \"Content-Type: application/json\" \ -d '{ \"emoji_id\": \"grinning-face\", \"emoji_type\": \"windows\" }' ``` **Required Data:** - `emoji_id` - The ID of the emoji that was used - `emoji_type` - Type of emoji: \"windows\", \"mac\", or \"custom\" **Success Response (200):** ```json { \"success\": true, \"message\": \"Emoji usage tracked successfully\" } ``` **Error Responses:** **400 Bad Request:** ```json { \"error\": \"Missing required fields: emoji_id and emoji_type\" } ``` **400 Bad Request:** ```json { \"error\": \"Invalid emoji_type. Must be one of: windows, mac, custom\" } ``` ## üîß How to Use Emojis in Your App ### 1. Display Emojis in a Picker ```javascript // Fetch emojis for your emoji picker async function loadEmojis() { try { const response = await fetch('/api/emojis?per_page=100'); const data = await response.json(); // Group emojis by category const emojisByCategory = {}; data.emojis.forEach((emoji) => { const categoryName = emoji.category.name; if (!emojisByCategory[categoryName]) { emojisByCategory[categoryName] = []; } emojisByCategory[categoryName].push(emoji); }); return emojisByCategory; } catch (error) { console.error('Failed to load emojis:', error); return {}; } } ``` ### 2. Search for Specific Emojis ```javascript // Search for emojis as user types async function searchEmojis(query) { try { const response = await fetch( `/api/emojis?search=${encodeURIComponent(query)}&per_page=20` ); const data = await response.json(); return data.emojis; } catch (error) { console.error('Search failed:', error); return []; } } ``` ### 3. Track Emoji Usage ```javascript // Track when user selects an emoji async function trackEmojiUsage(emojiId, emojiType) { try { await fetch('/api/emojis/usage', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ emoji_id: emojiId, emoji_type: emojiType }) }); } catch (error) { console.error('Failed to track emoji usage:', error); } } ``` ### 4. Handle Different Operating Systems ```javascript // Detect user's operating system for best emoji support function detectOS() { const userAgent = navigator.userAgent.toLowerCase(); if (userAgent.includes('win')) return 'windows'; if (userAgent.includes('mac')) return 'mac'; return 'linux'; } // Load emojis optimized for user's OS async function loadOptimizedEmojis() { const os = detectOS(); const response = await fetch(`/api/emojis?os=${os}&per_page=100`); return response.json(); } ``` ## üé® Emoji Categories Our emojis are organized into these categories: ### System Categories (Unicode Emojis) - **Smileys & Emotion** - üòÄüòäüòÇü•∞üòç - **People & Body** - üëãüëçüëéüôèüí™ - **Animals & Nature** - üê∂üê±üå≥üå∏üåü - **Food & Drink** - üçéüçïüç∞‚òïüç∫ - **Travel & Places** - üöóüè†üåçüèñÔ∏è‚õ∞Ô∏è - **Activities** - ‚öΩüéÆüéµüé®üìö - **Objects** - üì±üíª‚åöüéÅüí° - **Symbols** - ‚ù§Ô∏è‚≠ê‚úÖ‚ùåüíØ - **Flags** - üá∫üá∏üá¨üáßüáØüáµüá®üá¶üá¶üá∫ ### Custom Categories - **Community** - User-uploaded emojis approved by moderators - **Seasonal** - Holiday and season-specific emojis - **Brand** - App-specific and branded emojis ## üîç Search Tips ### Effective Search Queries - **By emotion**: \"happy\", \"sad\", \"angry\", \"excited\" - **By object**: \"heart\", \"star\", \"car\", \"house\" - **By activity**: \"dance\", \"eat\", \"sleep\", \"work\" - **By color**: \"red\", \"blue\", \"green\" (for custom emojis) ### Search Examples ```bash # Find all heart-related emojis curl \"https://yourdomain.com/api/emojis?search=heart\" # Find celebration emojis curl \"https://yourdomain.com/api/emojis?search=party\" # Find food emojis curl \"https://yourdomain.com/api/emojis?category=food\" ``` ## üìä Usage Statistics ### Popular Emojis The API automatically tracks which emojis are used most frequently. This helps with: - **Showing popular emojis first** in pickers - **Recommending emojis** to users - **Understanding community preferences** ### How Usage Tracking Works 1. **User selects an emoji** in the app 2. **App calls the usage API** to record it 3. **Usage count increases** for that emoji 4. **Popular emojis appear higher** in results ## üö® Common Issues and Solutions ### Emoji Not Displaying Correctly **Problem:** Emoji shows as a square or question mark **Solution:** - Check if the user's system supports that emoji version - Use the OS-specific endpoint to get compatible emojis - Provide fallback custom images for newer emojis ### Slow Emoji Loading **Problem:** Emoji picker takes too long to load **Solution:** - Use pagination (`per_page` parameter) - Cache emoji data in localStorage - Load most popular emojis first ### Search Not Finding Emojis **Problem:** Users can't find the emoji they want **Solution:** - Search in both `name` and `tags` fields - Use partial matching (the API handles this automatically) - Provide category filtering options ## üí° Best Practices ### For App Developers **Caching:** ```javascript // Cache emojis for better performance const EMOJI_CACHE_KEY = 'emojis_cache'; const CACHE_DURATION = 24 DOCUMENTATION_ARCHITECTURE.md Dockerfile Dockerfile.docs LINK_AUDIT.md LinkedIn_Documentation_Infrastructure_Report.md PRODUCTION_PERFORMANCE_COMMANDS.txt PRODUCTION_PERFORMANCE_COMMANDS_WITH_PASSWORD.txt README-DB-EXPLORER.md README.md TESTING.md __mocks__ changelog-preset.js commitlint.config.js commits community coverage custom-eslint-rules debug-content-parser.js docker-compose.dev.yml docker-compose.yml docker-postgres docs documentation-coverage.md e2e global.d.ts index.md jekyll jest.config.js jest.env.js jest.setup.js logs migrations next-env.d.ts next.config.js node_modules package-lock.json package.json playwright-report playwright.config.ts pnpm-lock.yaml public scripts seed-db-faker.js sonar-project.properties src swagger.config.js test-results test_output.txt tsconfig.json tsconfig.tsbuildinfo updates yarn.lock 60 DOCUMENTATION_ARCHITECTURE.md Dockerfile Dockerfile.docs LINK_AUDIT.md LinkedIn_Documentation_Infrastructure_Report.md PRODUCTION_PERFORMANCE_COMMANDS.txt PRODUCTION_PERFORMANCE_COMMANDS_WITH_PASSWORD.txt README-DB-EXPLORER.md README.md TESTING.md __mocks__ changelog-preset.js commitlint.config.js commits community coverage custom-eslint-rules debug-content-parser.js docker-compose.dev.yml docker-compose.yml docker-postgres docs documentation-coverage.md e2e global.d.ts index.md jekyll jest.config.js jest.env.js jest.setup.js logs migrations next-env.d.ts next.config.js node_modules package-lock.json package.json playwright-report playwright.config.ts pnpm-lock.yaml public scripts seed-db-faker.js sonar-project.properties src swagger.config.js test-results test_output.txt tsconfig.json tsconfig.tsbuildinfo updates yarn.lock 60 DOCUMENTATION_ARCHITECTURE.md Dockerfile Dockerfile.docs LINK_AUDIT.md LinkedIn_Documentation_Infrastructure_Report.md PRODUCTION_PERFORMANCE_COMMANDS.txt PRODUCTION_PERFORMANCE_COMMANDS_WITH_PASSWORD.txt README-DB-EXPLORER.md README.md TESTING.md __mocks__ changelog-preset.js commitlint.config.js commits community coverage custom-eslint-rules debug-content-parser.js docker-compose.dev.yml docker-compose.yml docker-postgres docs documentation-coverage.md e2e global.d.ts index.md jekyll jest.config.js jest.env.js jest.setup.js logs migrations next-env.d.ts next.config.js node_modules package-lock.json package.json playwright-report playwright.config.ts pnpm-lock.yaml public scripts seed-db-faker.js sonar-project.properties src swagger.config.js test-results test_output.txt tsconfig.json tsconfig.tsbuildinfo updates yarn.lock 1000; // 24 hours function getCachedEmojis() { const cached = localStorage.getItem(EMOJI_CACHE_KEY); if (cached) { const data = JSON.parse(cached); if (Date.now() - data.timestamp < CACHE_DURATION) { return data.emojis; } } return null; } function setCachedEmojis(emojis) { localStorage.setItem( EMOJI_CACHE_KEY, JSON.stringify({ emojis, timestamp: Date.now() }) ); } ``` **Error Handling:** ```javascript async function safeEmojiRequest(url) { try { const response = await fetch(url); if (!response.ok) { throw new Error(`HTTP ${response.status}: ${response.statusText}`); } return await response.json(); } catch (error) { console.error('Emoji API error:', error); // Return fallback emojis or empty array return { emojis: [], total_count: 0 }; } } ``` **Performance:** - Load emojis in chunks (use pagination) - Implement virtual scrolling for large lists - Preload popular emojis - Use image optimization for custom emojis ### For Users **Finding the Right Emoji:** 1. **Search by feeling** - \"happy\", \"sad\", \"excited\" 2. **Search by object** - \"heart\", \"star\", \"food\" 3. **Browse by category** - Look in the right section 4. **Use aliases** - Many emojis have multiple names --- ## üîó Related Documentation - **[Upload APIs](./upload)** - Uploading custom emoji images - **[Getting Started Guide](../getting-started)** - How to use emojis in the app - **Admin Emoji APIs** - Managing and approving custom emojis _(coming soon)_ --- _The emoji system makes communication more fun and expressive. These APIs help you build rich emoji experiences for your users!_ ",
    "./src/app/api/emojis/usage/README.md": "--- title: route category: api_route tags: [documentation-needed] status: draft --- # route > ‚ö†Ô∏è **Documentation Needed**: This file was automatically generated and needs content. ## Overview TODO: Describe what this api_route does. ## Usage TODO: Provide usage examples. ## API Reference TODO: Document the public interface. --- *File: `src/app/api/emojis/usage/route.ts`* *Auto-generated on: 2025-07-01 11:33:14* ",
    "./src/app/api/index.md": "--- layout: default title: 'API Reference' description: 'Complete API documentation and interactive tools' permalink: /docs/api/ --- # üîå API Reference Complete API documentation for the Idling.app project, including interactive tools and comprehensive endpoint references. ## üìñ API Overview Welcome to the Idling.app API! Our REST API provides programmatic access to all platform features with comprehensive rate limiting, authentication, and error handling. ### Base URL ``` https://api.idling.app ``` ### API Version Current version: **v1** All API endpoints are prefixed with `/api/v1/` ## üöÄ Quick Start ### Authentication All API requests require authentication using a Bearer token: ```bash curl -X GET \"https://api.idling.app/api/v1/user/profile\" \ -H \"Authorization: Bearer YOUR_TOKEN_HERE\" ``` ### Response Format All responses follow a consistent JSON structure: ```json { \"success\": true, \"data\": { // Response data here }, \"meta\": { \"timestamp\": \"2024-01-01T00:00:00.000Z\", \"version\": \"v1\" } } ``` ## üîß Interactive Tools ### Swagger UI Explore and test API endpoints directly in your browser: **[Open Swagger UI ‚Üí](swagger/)** Features: - Interactive endpoint testing - Request/response examples - Authentication testing - Schema validation - Real-time API exploration ### API Testing Tools - **Postman Collection**: Import our complete API collection - **OpenAPI Spec**: Download the OpenAPI 3.0 specification - **SDK Examples**: Code examples in multiple languages ## üìö Core Endpoints ### Authentication Endpoints - **POST /api/v1/auth/login** - User authentication - **POST /api/v1/auth/logout** - Session termination - **POST /api/v1/auth/refresh** - Token refresh - **GET /api/v1/auth/me** - Current user info ### User Management - **GET /api/v1/user/profile** - Get user profile - **PUT /api/v1/user/profile** - Update user profile - **GET /api/v1/user/settings** - Get user settings - **PUT /api/v1/user/settings** - Update user settings ### Content Endpoints - **GET /api/v1/posts** - List posts - **POST /api/v1/posts** - Create new post - **GET /api/v1/posts/:id** - Get specific post - **PUT /api/v1/posts/:id** - Update post - **DELETE /api/v1/posts/:id** - Delete post ### Upload Endpoints - **POST /api/v1/upload/image** - Upload image - **POST /api/v1/upload/avatar** - Upload avatar - **GET /api/v1/upload/signed-url** - Get signed upload URL ## üîê Administrative Endpoints ### Admin Authentication Administrative endpoints require elevated permissions: ```bash curl -X GET \"https://api.idling.app/api/v1/admin/users\" \ -H \"Authorization: Bearer ADMIN_TOKEN_HERE\" ``` ### Admin Endpoints - **GET /api/v1/admin/users** - List all users - **GET /api/v1/admin/posts** - List all posts - **GET /api/v1/admin/analytics** - Platform analytics - **POST /api/v1/admin/actions** - Administrative actions **[View Admin Documentation ‚Üí](admin/)** ## üõ°Ô∏è Rate Limiting ### Rate Limits - **Authenticated Users**: 1000 requests per hour - **Anonymous Users**: 100 requests per hour - **Admin Users**: 5000 requests per hour ### Rate Limit Headers All responses include rate limit information: ``` X-RateLimit-Limit: 1000 X-RateLimit-Remaining: 999 X-RateLimit-Reset: 1640995200 ``` ### Rate Limit Exceeded When rate limits are exceeded: ```json { \"success\": false, \"error\": { \"code\": \"RATE_LIMIT_EXCEEDED\", \"message\": \"Rate limit exceeded. Try again later.\", \"retryAfter\": 3600 } } ``` ## üìù Request/Response Examples ### Successful Response ```json { \"success\": true, \"data\": { \"id\": \"user_123\", \"name\": \"John Doe\", \"email\": \"john@example.com\" }, \"meta\": { \"timestamp\": \"2024-01-01T00:00:00.000Z\" } } ``` ### Error Response ```json { \"success\": false, \"error\": { \"code\": \"VALIDATION_ERROR\", \"message\": \"Invalid request data\", \"details\": [ { \"field\": \"email\", \"message\": \"Valid email address required\" } ] } } ``` ## üö¶ Status Codes | Code | Status | Description | | ---- | --------------------- | ----------------------------- | | 200 | OK | Request successful | | 201 | Created | Resource created successfully | | 400 | Bad Request | Invalid request data | | 401 | Unauthorized | Authentication required | | 403 | Forbidden | Insufficient permissions | | 404 | Not Found | Resource not found | | 429 | Too Many Requests | Rate limit exceeded | | 500 | Internal Server Error | Server error | ## üìä Pagination List endpoints support pagination: ```bash curl \"https://api.idling.app/api/v1/posts?limit=20&offset=0\" ``` ### Pagination Response ```json { \"success\": true, \"data\": [ // Array of items ], \"meta\": { \"pagination\": { \"total\": 1000, \"limit\": 20, \"offset\": 0, \"hasMore\": true } } } ``` ## üîç Filtering and Sorting ### Filtering ```bash curl \"https://api.idling.app/api/v1/posts?status=published&author=user_123\" ``` ### Sorting ```bash curl \"https://api.idling.app/api/v1/posts?sort=created_at&order=desc\" ``` ## üåê CORS and Security ### CORS Policy - **Allowed Origins**: Configured per environment - **Allowed Methods**: GET, POST, PUT, DELETE, PATCH - **Allowed Headers**: Authorization, Content-Type - **Credentials**: Supported for authenticated requests ### Security Headers All responses include security headers: - **X-Content-Type-Options**: nosniff - **X-Frame-Options**: DENY - **X-XSS-Protection**: 1; mode=block - **Strict-Transport-Security**: max-age=31536000 ## üß™ Testing ### Test Environment Test API endpoints in our sandbox environment: ``` https://api-test.idling.app ``` ### Test Data - Use test API keys for development - Test data is reset daily - No rate limits in test environment ## üìö SDKs and Libraries ### Official SDKs - **JavaScript/TypeScript**: `@idling/api-client` - **Python**: `idling-api-python` - **PHP**: `idling-api-php` ### Community Libraries - **Ruby**: `idling-ruby` (community maintained) - **Go**: `go-idling` (community maintained) ## üîó Related Documentation - **[Authentication Guide](../getting-started/#authentication)** - Detailed auth setup - **[Rate Limiting](../../dev/libraries/services/#rate-limiting)** - Rate limiting implementation - **[Security Architecture](../architecture/security/)** - Security patterns - **[Admin Documentation](admin/)** - Administrative endpoints ## üìû Support ### Getting Help - **GitHub Issues**: Report bugs and request features - **Discord**: Real-time community support - **Email**: api-support@idling.app ### API Status Check API status and uptime: - **Status Page**: status.idling.app - **Incident Reports**: Real-time incident updates --- **Last Updated**: {{ site.time | date: \"%B %d, %Y\" }} **API Version**: v1.0.0 > **Need help?** Join our [Discord community](../../community/communication/discord/) or check our [GitHub discussions](../../community/communication/github/) for API support. ",
    "./src/app/api/link-preview/README.md": "--- title: route category: api_route tags: [documentation-needed] status: draft --- # route > ‚ö†Ô∏è **Documentation Needed**: This file was automatically generated and needs content. ## Overview TODO: Describe what this api_route does. ## Usage TODO: Provide usage examples. ## API Reference TODO: Document the public interface. --- *File: `src/app/api/link-preview/route.ts`* *Auto-generated on: 2025-07-01 11:33:14* ",
    "./src/app/api/og-image/README.md": "--- layout: default title: OG Image API description: Generate dynamic Open Graph images with quotes and avatars --- # üñºÔ∏è OG Image API The OG Image API generates beautiful Open Graph images dynamically with inspirational quotes, procedural backgrounds, and unique avatars. These images are used when sharing links to idling.app on social media platforms. ## üéØ What are OG Images? Open Graph images are the preview images you see when sharing links on: - **Facebook** - Shows in post previews - **Twitter** - Displays as card images - LinkedIn_Documentation_Infrastructure_Report.md - Appears in shared content - **Discord** - Shows in link embeds - **Slack** - Displays in message previews ## üì° Endpoint ``` GET /api/og-image ``` **Response Format:** - **Browser requests:** Redirects to interactive viewer (`/og-image-viewer`) - **Bot/Crawler requests:** Direct image response (PNG by default, SVG with `?type=svg`) - **Direct API access:** Use `?direct=true` to bypass browser redirect **Cache:** No caching - fresh content every request ## üîß Parameters All parameters are optional. If not provided, the API will generate random content. ### Query Parameters | Parameter | Type | Description | Example | | --------- | ------ | --------------------------------- | --------------------- | | `seed` | string | Custom seed for avatar generation | `seed=john-doe-123` | | `quote` | string | Custom quote text | `quote=Hello%20World` | | `author` | string | Custom quote author | `author=Jane%20Doe` | | `random` | string | Force randomization (true/false) | `random=true` | | `type` | string | Image format (png/svg) | `type=svg` | | `direct` | string | Bypass browser redirect | `direct=true` | ## üé® Features ### Dynamic Quote System The API uses a **weighted round-robin system** to fetch quotes from multiple sources: - **DummyJSON** (40% weight) - 100+ real quotes from historical figures - **Quotable API** (30% weight) - Large database of authentic quotes - **ZenQuotes** (20% weight) - 3,237+ quotes from influential people - **API-Ninjas** (10% weight) - Premium quote database (requires API key) ### Procedural Backgrounds Each image features a unique procedural background with: - **3-8 random pattern layers** - Circles, lines, polygons, grids, waves - **Seeded randomness** - Same seed always produces same pattern - **Dynamic colors** - 8 vibrant colors that contrast with dark background - **Predominant color borders** - Border color matches most-used pattern color ### Avatar Integration - **@dicebear adventurer avatars** - Unique character for each generation - **Fade mask effects** - Smooth transition from center to edges - **SVG embedding** - Crisp, scalable avatar graphics - **Random seeding** - Each request gets a unique avatar ### Text Rendering - **Dynamic font sizing** - Adjusts based on quote length - **Smart text wrapping** - Proper line breaks for readability - **Glass background effect** - Dark semi-transparent background with blur - **Responsive layout** - Text positioning adapts to content ## üñ•Ô∏è Interactive Viewer When you access the OG Image API from a browser, you'll be redirected to an interactive viewer at `/og-image-viewer`. This viewer provides: - **Visual preview** of the generated image - **Right-click context menu** with save options - **Download buttons** for PNG and SVG formats - **Client-side SVG-to-PNG conversion** for perfect quality - **Responsive design** that works on all devices ### Features of the Interactive Viewer - **Context Menu**: Right-click on the image to save as PNG or SVG - **Fallback Buttons**: Click the download buttons if right-click doesn't work - **High Quality**: Client-side conversion preserves all details and patterns - **Fast Performance**: No server-side processing for downloads - **Mobile Friendly**: Touch-friendly interface for mobile devices ## üìñ Usage Examples ### Browser Usage Open in your browser for interactive viewer: ``` https://idling.app/api/og-image ``` ### Basic API Usage Generate a random OG image (direct API): ```bash curl https://idling.app/api/og-image?direct=true ``` ### Custom Quote Generate an image with your own quote: ```bash curl \"https://idling.app/api/og-image?quote=Hello%20World&author=Jane%20Doe\" ``` ### Seeded Generation Generate a consistent image using a seed: ```bash curl \"https://idling.app/api/og-image?seed=my-unique-seed\" ``` ### Force Random Generate a completely random image: ```bash curl \"https://idling.app/api/og-image?random=true\" ``` ## üåê Integration ### HTML Meta Tags The OG image is automatically used in the site's meta tags: ```html <!-- Open Graph --> <meta property=\"og:image\" content=\"https://idling.app/api/og-image\" /> <meta property=\"og:image:width\" content=\"1200\" /> <meta property=\"og:image:height\" content=\"630\" /> <meta property=\"og:image:alt\" content=\"Idling.app - Wisdom & Community\" /> <!-- Twitter --> <meta name=\"twitter:card\" content=\"summary_large_image\" /> <meta name=\"twitter:image\" content=\"https://idling.app/api/og-image\" /> ``` ### Custom Implementation You can use the API to generate images for specific content: ```javascript // Generate OG image for a specific post const ogImageUrl = `https://idling.app/api/og-image?quote=${encodeURIComponent(postTitle)}&author=${encodeURIComponent(postAuthor)}`; // Use in meta tags document.querySelector('meta[property=\"og:image\"]').content = ogImageUrl; ``` ## üìä Response Format ### Success Response **Content-Type:** `image/svg+xml` **Status:** `200 OK` **Cache-Control:** `no-cache, no-store, must-revalidate` The response is a complete SVG image with: - **1200x630 dimensions** - Standard OG image size - **Embedded avatar** - Base64-encoded SVG avatar - **Procedural patterns** - Dynamic background elements - **Styled text** - Quote and author with proper formatting - **Glass effects** - Modern UI elements with blur and transparency ### Error Response If generation fails, a fallback SVG is returned: ```svg <svg width=\"1200\" height=\"630\" xmlns=\"http://www.w3.org/2000/svg\"> <rect width=\"1200\" height=\"630\" fill=\"#0a0a0a\"/> <!-- Fallback pattern --> <text x=\"600\" y=\"280\" text-anchor=\"middle\" fill=\"white\" font-family=\"system-ui, sans-serif\" font-size=\"48px\">Idling.app</text> <text x=\"600\" y=\"350\" text-anchor=\"middle\" fill=\"rgba(255,255,255,0.8)\" font-family=\"system-ui, sans-serif\" font-size=\"24px\">Wisdom &amp; Community</text> </svg> ``` ## üîß Technical Details ### Quote API Fallback System If external quote APIs fail, the system uses these fallback quotes: 1. \"The mind is everything. What you think you become.\" ‚Äî Buddha 2. \"Peace comes from within. Do not seek it without.\" ‚Äî Buddha 3. \"Idling is the art of being present in the moment.\" ‚Äî Idling.app 4. \"Every moment is a fresh beginning.\" ‚Äî T.S. Eliot 5. \"The journey of a thousand miles begins with one step.\" ‚Äî Lao Tzu 6. \"Believe you can and you're halfway there.\" ‚Äî Theodore Roosevelt ### Environment Variables To enable API-Ninjas quotes (optional): ```bash # Add to .env.local API_NINJAS_API_KEY=your_api_key_here ``` Get a free API key at [api-ninjas.com/api/quotes](https://api-ninjas.com/api/quotes) ### Performance - **Edge Runtime** - Fast response times globally - **SVG Format** - Lightweight, scalable images - **No Caching** - Fresh, dynamic content every request - **Fallback System** - Always returns a valid image ## üé® Customization ### Pattern Generation The procedural background uses these pattern types: 1. **Scattered Circles** - Random circles of varying sizes 2. **Random Lines** - Lines at various angles and positions 3. **Random Polygons** - Triangular and geometric shapes 4. **Grid Patterns** - Organized grids with rotation 5. **Wave Patterns** - Flowing curved lines ### Color Palette The system uses 8 vibrant colors: - `#ff6b35` - Orange (brand color) - `#118ab2` - Blue (brand color) - `#06d6a0` - Green - `#f72585` - Pink - `#7209b7` - Purple - `#ffd60a` - Yellow - `#f77f00` - Amber - `#d00000` - Red ## üöÄ Best Practices ### For Social Sharing - **Use custom quotes** for specific content - **Include meaningful authors** for credibility - **Test on multiple platforms** to ensure compatibility - **Use consistent seeding** for repeated shares of same content ### For Performance - **Cache images** when possible - **Use appropriate seeds** to avoid regeneration - **Don't make rapid requests** to respect rate limits - **Handle fallbacks gracefully** in case of API errors ## üîó Related APIs - **[Avatar Image API](./avatar-image)** - Standalone avatar generation _(coming soon)_ - **[Upload APIs](./upload)** - Custom image uploads --- _The OG Image API helps make your shared content more engaging and visually appealing across all social media platforms._ ",
    "./src/app/api/og-image/services/AvatarService.md": "--- title: AvatarService category: service tags: [documentation-needed] status: draft --- # AvatarService > ‚ö†Ô∏è **Documentation Needed**: This file was automatically generated and needs content. ## Overview TODO: Describe what this service does. ## Usage TODO: Provide usage examples. ## API Reference TODO: Document the public interface. --- *File: `src/app/api/og-image/services/AvatarService.ts`* *Auto-generated on: 2025-07-01 11:33:14* ",
    "./src/app/api/og-image/services/DatabaseService.md": "--- title: DatabaseService category: service tags: [documentation-needed] status: draft --- # DatabaseService > ‚ö†Ô∏è **Documentation Needed**: This file was automatically generated and needs content. ## Overview TODO: Describe what this service does. ## Usage TODO: Provide usage examples. ## API Reference TODO: Document the public interface. --- *File: `src/app/api/og-image/services/DatabaseService.ts`* *Auto-generated on: 2025-07-01 11:33:14* ",
    "./src/app/api/og-image/services/MachineFingerprint.md": "--- title: MachineFingerprint category: service tags: [documentation-needed] status: draft --- # MachineFingerprint > ‚ö†Ô∏è **Documentation Needed**: This file was automatically generated and needs content. ## Overview TODO: Describe what this service does. ## Usage TODO: Provide usage examples. ## API Reference TODO: Document the public interface. --- *File: `src/app/api/og-image/services/MachineFingerprint.ts`* *Auto-generated on: 2025-07-01 11:33:14* ",
    "./src/app/api/og-image/services/OGImageService.md": "--- title: OGImageService category: service tags: [documentation-needed] status: draft --- # OGImageService > ‚ö†Ô∏è **Documentation Needed**: This file was automatically generated and needs content. ## Overview TODO: Describe what this service does. ## Usage TODO: Provide usage examples. ## API Reference TODO: Document the public interface. --- *File: `src/app/api/og-image/services/OGImageService.ts`* *Auto-generated on: 2025-07-01 11:33:14* ",
    "./src/app/api/og-image/services/QuoteService.md": "--- title: QuoteService category: service tags: [documentation-needed] status: draft --- # QuoteService > ‚ö†Ô∏è **Documentation Needed**: This file was automatically generated and needs content. ## Overview TODO: Describe what this service does. ## Usage TODO: Provide usage examples. ## API Reference TODO: Document the public interface. --- *File: `src/app/api/og-image/services/QuoteService.ts`* *Auto-generated on: 2025-07-01 11:33:14* ",
    "./src/app/api/og-image/services/SVGGenerator.md": "--- title: SVGGenerator category: service tags: [documentation-needed] status: draft --- # SVGGenerator > ‚ö†Ô∏è **Documentation Needed**: This file was automatically generated and needs content. ## Overview TODO: Describe what this service does. ## Usage TODO: Provide usage examples. ## API Reference TODO: Document the public interface. --- *File: `src/app/api/og-image/services/SVGGenerator.ts`* *Auto-generated on: 2025-07-01 11:33:14* ",
    "./src/app/api/og-image/services/patterns/BasePatternGenerator.md": "--- title: BasePatternGenerator category: service tags: [documentation-needed] status: draft --- # BasePatternGenerator > ‚ö†Ô∏è **Documentation Needed**: This file was automatically generated and needs content. ## Overview TODO: Describe what this service does. ## Usage TODO: Provide usage examples. ## API Reference TODO: Document the public interface. --- *File: `src/app/api/og-image/services/patterns/BasePatternGenerator.ts`* *Auto-generated on: 2025-07-01 11:33:14* ",
    "./src/app/api/og-image/services/patterns/LinePatternGenerator.md": "--- title: LinePatternGenerator category: service tags: [documentation-needed] status: draft --- # LinePatternGenerator > ‚ö†Ô∏è **Documentation Needed**: This file was automatically generated and needs content. ## Overview TODO: Describe what this service does. ## Usage TODO: Provide usage examples. ## API Reference TODO: Document the public interface. --- *File: `src/app/api/og-image/services/patterns/LinePatternGenerator.ts`* *Auto-generated on: 2025-07-01 11:33:14* ",
    "./src/app/api/og-image/services/patterns/OrganicPatternGenerator.md": "--- title: OrganicPatternGenerator category: service tags: [documentation-needed] status: draft --- # OrganicPatternGenerator > ‚ö†Ô∏è **Documentation Needed**: This file was automatically generated and needs content. ## Overview TODO: Describe what this service does. ## Usage TODO: Provide usage examples. ## API Reference TODO: Document the public interface. --- *File: `src/app/api/og-image/services/patterns/OrganicPatternGenerator.ts`* *Auto-generated on: 2025-07-01 11:33:14* ",
    "./src/app/api/og-image/services/patterns/ShapePatternGenerator.md": "--- title: ShapePatternGenerator category: service tags: [documentation-needed] status: draft --- # ShapePatternGenerator > ‚ö†Ô∏è **Documentation Needed**: This file was automatically generated and needs content. ## Overview TODO: Describe what this service does. ## Usage TODO: Provide usage examples. ## API Reference TODO: Document the public interface. --- *File: `src/app/api/og-image/services/patterns/ShapePatternGenerator.ts`* *Auto-generated on: 2025-07-01 11:33:14* ",
    "./src/app/api/profile/[username]/README.md": "--- title: route category: api_route tags: [documentation-needed] status: draft --- # route > ‚ö†Ô∏è **Documentation Needed**: This file was automatically generated and needs content. ## Overview TODO: Describe what this api_route does. ## Usage TODO: Provide usage examples. ## API Reference TODO: Document the public interface. --- *File: `src/app/api/profile/[username]/route.ts`* *Auto-generated on: 2025-07-01 11:33:14* ",
    "./src/app/api/profile/id/[id]/README.md": "--- title: route category: api_route tags: [documentation-needed] status: draft --- # route > ‚ö†Ô∏è **Documentation Needed**: This file was automatically generated and needs content. ## Overview TODO: Describe what this api_route does. ## Usage TODO: Provide usage examples. ## API Reference TODO: Document the public interface. --- *File: `src/app/api/profile/id/[id]/route.ts`* *Auto-generated on: 2025-07-01 11:33:14* ",
    "./src/app/api/swagger.md": "--- layout: default title: 'Swagger UI - Interactive API Documentation' description: 'Interactive API documentation and testing interface' permalink: /docs/api/swagger/ --- # üß™ Swagger UI - Interactive API Documentation Explore and test the Idling.app API directly in your browser with our interactive Swagger UI interface. ## üöÄ Interactive API Explorer <div class=\"swagger-container\"> <div class=\"swagger-notice\"> <h3>üîß Development Mode</h3> <p>This Swagger UI is configured for development. In production, it will connect to the live API endpoints.</p> </div> <div class=\"swagger-ui-container\"> <!-- Swagger UI will be embedded here --> <div id=\"swagger-ui\"></div> </div> </div> ## üìö Getting Started with Swagger UI ### 1. Authentication Before testing endpoints: 1. Click **\"Authorize\"** button at the top 2. Enter your Bearer token: `Bearer YOUR_TOKEN_HERE` 3. Click **\"Authorize\"** to save ### 2. Testing Endpoints 1. **Expand** any endpoint section 2. **Click** \"Try it out\" button 3. **Fill index.md required parameters 4. **Click** \"Execute\" to test ### 3. Response Analysis - **Response Body**: JSON response data - **Response Headers**: HTTP headers returned - **Status Code**: HTTP status code - **Curl Command**: Copy as cURL command ## üîê Authentication Setup ### Getting Your API Token 1. **Login** to your Idling.app account 2. **Navigate** to Settings ‚Üí API Keys 3. **Generate** a new API key 4. **Copy** the token for use in Swagger UI ### Token Format ``` Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9... ``` ## üìã Available Endpoints ### Authentication Endpoints - **POST /api/v1/auth/login** - User login - **POST /api/v1/auth/logout** - User logout - **POST /api/v1/auth/refresh** - Refresh token - **GET /api/v1/auth/me** - Get current user ### User Management - **GET /api/v1/user/profile** - Get user profile - **PUT /api/v1/user/profile** - Update profile - **GET /api/v1/user/settings** - Get user settings - **PUT /api/v1/user/settings** - Update settings ### Content Management - **GET /api/v1/posts** - List posts - **POST /api/v1/posts** - Create post - **GET /api/v1/posts/{id}** - Get specific post - **PUT /api/v1/posts/{id}** - Update post - **DELETE /api/v1/posts/{id}** - Delete post ### File Upload - **POST /api/v1/upload/image** - Upload image - **POST /api/v1/upload/avatar** - Upload avatar - **GET /api/v1/upload/signed-url** - Get signed URL ### Administrative (Admin Only) - **GET /api/v1/admin/users** - List all users - **GET /api/v1/admin/posts** - List all posts - **GET /api/v1/admin/analytics** - Get analytics - **POST /api/v1/admin/actions** - Admin actions ## üõ†Ô∏è Testing Examples ### Example 1: Get User Profile ```bash # Using the generated cURL command curl -X 'GET' \ 'https://api.idling.app/api/v1/user/profile' \ -H 'accept: application/json' \ -H 'Authorization: Bearer YOUR_TOKEN' ``` ### Example 2: Create a Post ```bash curl -X 'POST' \ 'https://api.idling.app/api/v1/posts' \ -H 'accept: application/json' \ -H 'Content-Type: application/json' \ -H 'Authorization: Bearer YOUR_TOKEN' \ -d '{ \"title\": \"My New Post\", \"content\": \"This is the content of my post\", \"tags\": [\"example\", \"test\"] }' ``` ## üö¶ Response Codes ### Success Codes - **200 OK** - Request successful - **201 Created** - Resource created - **204 No Content** - Successful deletion ### Error Codes - **400 Bad Request** - Invalid request data - **401 Unauthorized** - Authentication required - **403 Forbidden** - Insufficient permissions - **404 Not Found** - Resource not found - **429 Too Many Requests** - Rate limit exceeded - **500 Internal Server Error** - Server error ## üîç Advanced Features ### Schema Validation Swagger UI automatically validates: - **Request schemas** - Ensures proper data format - **Response schemas** - Validates API responses - **Parameter types** - Checks parameter formats ### Code Generation Generate client code in multiple languages: - **JavaScript/TypeScript** - **Python** - **PHP** - **Java** - **C#** - **Ruby** ### Export Options - **Download OpenAPI Spec** - Get the raw OpenAPI 3.0 specification - **Export Postman Collection** - Import into Postman - **Generate SDK** - Create client libraries ## üß™ Testing Environment ### Development API ``` Base URL: http://localhost:3000/api/v1 ``` ### Staging API ``` Base URL: https://api-staging.idling.app/api/v1 ``` ### Production API ``` Base URL: https://api.idling.app/api/v1 ``` ## üîó Related Resources - **[API Overview](../index.md)** - Complete API documentation - **[Authentication Guide](../../getting-started/#authentication)** - Detailed auth setup - **[Rate Limiting](../../../dev/libraries/services/#rate-limiting)** - Rate limiting details - **[Admin Documentation](../admin/)** - Administrative endpoints ## üí° Tips and Tricks ### 1. Save Responses Right-click on responses to save them for later reference. ### 2. Copy as cURL Use the \"Copy as cURL\" feature to test endpoints in your terminal. ### 3. Batch Testing Test multiple endpoints in sequence to verify workflows. ### 4. Schema Exploration Click on schema examples to understand data structures. ### 5. Error Testing Test error scenarios by providing invalid data. ## üêõ Troubleshooting ### Common Issues **401 Unauthorized** - Verify your token is correct - Check token hasn't expired - Ensure \"Bearer \" prefix is included **CORS Errors** - Use the correct base URL for your environment - Ensure your domain is whitelisted **Rate Limiting** - Wait for rate limit reset - Use appropriate delays between requests ### Getting Help - **GitHub Issues**: Report API bugs - **Discord**: Real-time support - **Documentation**: Check the [API docs](../index.md) --- **Last Updated**: {{ site.time | date: \"%B %d, %Y\" }} <script src=\"https://unpkg.com/swagger-ui-dist@4.15.5/swagger-ui-bundle.js\"></script> <script src=\"https://unpkg.com/swagger-ui-dist@4.15.5/swagger-ui-standalone-preset.js\"></script> <link rel=\"stylesheet\" type=\"text/css\" href=\"https://unpkg.com/swagger-ui-dist@4.15.5/swagger-ui.css\" /> <script> window.onload = function() { // Determine the OpenAPI spec URL based on environment const isProduction = window.location.hostname === 'underwood-inc.github.io'; const isDevelopment = window.location.hostname === 'localhost'; let specUrl; if (isDevelopment) { specUrl = 'http://localhost:3000/api/openapi.json'; } else if (isProduction) { specUrl = 'https://api.idling.app/api/openapi.json'; } else { specUrl = 'https://api-staging.idling.app/api/openapi.json'; } // Initialize Swagger UI const ui = SwaggerUIBundle({ url: specUrl, dom_id: '#swagger-ui', deepLinking: true, presets: [ SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset ], plugins: [ SwaggerUIBundle.plugins.DownloadUrl ], layout: \"StandaloneLayout\", tryItOutEnabled: true, supportedSubmitMethods: ['get', 'post', 'put', 'delete', 'patch'], onComplete: function() { console.log('Swagger UI loaded successfully'); }, onFailure: function(error) { console.error('Failed to load Swagger UI:', error); document.getElementById('swagger-ui').innerHTML = '<div class=\"swagger-error\">' + '<h3>‚ö†Ô∏è Unable to Load API Specification</h3>' + '<p>The API specification could not be loaded. This might be because:</p>' + '<ul>' + '<li>The API server is not running</li>' + '<li>CORS is not configured properly</li>' + '<li>The OpenAPI spec URL is incorrect</li>' + '</ul>' + '<p>Please check the console for more details or contact support.</p>' + '</div>'; } }); }; </script> <style> .swagger-container { margin: 2rem 0; } .swagger-notice { background: #f8f9fa; border: 1px solid #dee2e6; border-radius: 8px; padding: 1rem; margin-bottom: 2rem; } .swagger-notice h3 { margin-top: 0; color: #495057; } .swagger-ui-container { border: 1px solid #dee2e6; border-radius: 8px; overflow: hidden; } .swagger-error { background: #f8d7da; border: 1px solid #f5c6cb; border-radius: 8px; padding: 2rem; text-align: center; color: #721c24; } .swagger-error h3 { margin-top: 0; } .swagger-error ul { text-align: left; display: inline-block; } /Docker /app /bin /bin.usr-is-merged /boot /dev /etc /home /init /lib /lib.usr-is-merged /lib64 /lost+found /media /mnt /opt /proc /root /run /sbin /sbin.usr-is-merged /snap /srv /sys /tmp /usr /var /wslAOHfEh /wslFgieig /wslGiDGlg /wslHdGhjg /wslMEKAlg /wslOFllck /wslPFkBGh /wslaamLFh /wslajcDlg /wslcLijck /wsldLlHck /wsliANAGh /wsllKaoFh /wslmHHock /wsloLDFbk Customize Swagger UI theme __mocks__/ commits/ community/ coverage/ custom-eslint-rules/ docker-postgres/ docs/ e2e/ jekyll/ logs/ migrations/ node_modules/ playwright-report/ public/ scripts/ src/ test-results/ updates/ .swagger-ui .topbar { display: none; } .swagger-ui .info { margin: 2rem 0; } .swagger-ui .scheme-container { background: #f8f9fa; padding: 1rem; border-radius: 4px; margin-bottom: 1rem; } </style> ",
    "./src/app/api/upload/README.md": "--- layout: default title: Upload APIs description: File and image upload endpoints for the idling.app API --- # üìÅ Upload APIs This guide explains how to upload files and images using the idling.app API. Whether you're uploading profile pictures, post images, or custom emojis, this documentation covers everything you need to know. ## üéØ What Are Upload APIs? Upload APIs let you send files from your device to the server. Think of it like: - **Email attachments** - you attach files to messages - **Social media photos** - you upload pictures to share - **Profile pictures** - you set an avatar image Our upload system handles: - **Image files** (JPG, PNG, WebP, GIF) - **Size limits** (to keep the site running smoothly) - **Security checks** (to prevent harmful files) - **Automatic optimization** (to make images load faster) ## üìö Available Endpoints ### POST /api/upload/image - Upload an Image **What it does:** Upload an image file to the server **Who can use it:** Logged-in users only **File requirements:** - **Allowed formats**: JPG, JPEG, PNG, WebP, GIF - **Maximum size**: 5MB (can be configured) - **Minimum size**: 1KB - **Maximum dimensions**: 4096x4096 pixels **How to use it:** **Using HTML form:** ```html <form action=\"/api/upload/image\" method=\"POST\" enctype=\"multipart/form-data\"> <input type=\"file\" name=\"file\" accept=\"image/*\" required /> <button type=\"submit\">Upload Image</button> </form> ``` **Using JavaScript:** ```javascript async function uploadImage(file) { const formData = new FormData(); formData.append('file', file); try { const response = await fetch('/api/upload/image', { method: 'POST', body: formData }); if (response.ok) { const result = await response.json(); console.log('Upload successful:', result); return result; } else { throw new Error('Upload failed'); } } catch (error) { console.error('Upload error:', error); } } ``` **Using curl:** ```bash curl -X POST https://yourdomain.com/api/upload/image \ -F \"file=@/path/to/your/image.jpg\" \ -H \"Cookie: your-session-cookie\" ``` **Success Response (200):** ```json { \"success\": true, \"message\": \"File uploaded successfully\", \"file\": { \"filename\": \"image-1234567890.jpg\", \"originalName\": \"my-photo.jpg\", \"size\": 245760, \"mimeType\": \"image/jpeg\", \"url\": \"/uploads/images/image-1234567890.jpg\", \"publicUrl\": \"https://yourdomain.com/uploads/images/image-1234567890.jpg\", \"dimensions\": { \"width\": 1920, \"height\": 1080 } }, \"metadata\": { \"uploadedAt\": \"2024-01-15T10:30:00Z\", \"uploadedBy\": \"user123\", \"fileHash\": \"abc123def456\", \"processed\": true } } ``` **What each field means:** - **filename**: The name of the file on the server (unique) - **originalName**: The original name of your file - **size**: File size in bytes - **mimeType**: The type of file (image/jpeg, image/png, etc.) - **url**: Relative path to access the image - **publicUrl**: Complete URL to view the image - **dimensions**: Width and height of the image in pixels - **uploadedAt**: When the file was uploaded - **uploadedBy**: Which user uploaded it - **fileHash**: Unique identifier for the file content - **processed**: Whether the image has been optimized **Error Responses:** **401 Unauthorized:** ```json { \"error\": \"Authentication required\", \"message\": \"You must be logged in to upload files\" } ``` **400 Bad Request - No File:** ```json { \"error\": \"No file provided\", \"message\": \"Please select a file to upload\" } ``` **400 Bad Request - Invalid File Type:** ```json { \"error\": \"Invalid file type\", \"message\": \"Only image files (JPG, PNG, WebP, GIF) are allowed\", \"allowedTypes\": [\"image/jpeg\", \"image/png\", \"image/webp\", \"image/gif\"] } ``` **400 Bad Request - File Too Large:** ```json { \"error\": \"File too large\", \"message\": \"File size exceeds maximum limit of 5MB\", \"maxSize\": 5242880, \"receivedSize\": 7340032 } ``` **500 Internal Server Error:** ```json { \"error\": \"Upload failed\", \"message\": \"Server error occurred during upload. Please try again.\" } ``` ## üîß How to Use Upload APIs ### 1. Simple File Upload with HTML ```html <!DOCTYPE html> <html> <head> <title>Image Upload</title> </head> <body> <h1>Upload an Image</h1> <form id=\"uploadForm\" enctype=\"multipart/form-data\"> <div> <label for=\"fileInput\">Choose image:</label> <input type=\"file\" id=\"fileInput\" name=\"file\" accept=\"image/*\" required /> </div> <div> <button type=\"submit\">Upload Image</button> </div> </form> <div id=\"result\"></div> <script> document .getElementById('uploadForm') .addEventListener('submit', async (e) => { e.preventDefault(); const fileInput = document.getElementById('fileInput'); const file = fileInput.files[0]; if (!file) { alert('Please select a file'); return; } const formData = new FormData(); formData.append('file', file); try { const response = await fetch('/api/upload/image', { method: 'POST', body: formData }); const result = await response.json(); if (response.ok) { document.getElementById('result').innerHTML = ` <p>Upload successful!</p> <img src=\"${result.file.url}\" alt=\"Uploaded image\" style=\"max-width: 300px;\"> <p>File URL: <a href=\"${result.file.publicUrl}\" target=\"_blank\">${result.file.publicUrl}</a></p> `; } else { document.getElementById('result').innerHTML = ` <p style=\"color: red;\">Upload failed: ${result.message}</p> `; } } catch (error) { document.getElementById('result').innerHTML = ` <p style=\"color: red;\">Error: ${error.message}</p> `; } }); </script> </body> </html> ``` ### 2. Advanced Upload with Progress ```javascript async function uploadWithProgress(file, onProgress) { return new Promise((resolve, reject) => { const formData = new FormData(); formData.append('file', file); const xhr = new XMLHttpRequest(); // Handle upload progress xhr.upload.addEventListener('progress', (e) => { if (e.lengthComputable) { const percentComplete = (e.loaded / e.total) DOCUMENTATION_ARCHITECTURE.md Dockerfile Dockerfile.docs LINK_AUDIT.md LinkedIn_Documentation_Infrastructure_Report.md PRODUCTION_PERFORMANCE_COMMANDS.txt PRODUCTION_PERFORMANCE_COMMANDS_WITH_PASSWORD.txt README-DB-EXPLORER.md README.md TESTING.md __mocks__ changelog-preset.js commitlint.config.js commits community coverage custom-eslint-rules debug-content-parser.js docker-compose.dev.yml docker-compose.yml docker-postgres docs documentation-coverage.md e2e global.d.ts index.md jekyll jest.config.js jest.env.js jest.setup.js logs migrations next-env.d.ts next.config.js node_modules package-lock.json package.json playwright-report playwright.config.ts pnpm-lock.yaml public scripts seed-db-faker.js sonar-project.properties src swagger.config.js test-results test_output.txt tsconfig.json tsconfig.tsbuildinfo updates yarn.lock 100; onProgress(Math.round(percentComplete)); } }); // Handle completion xhr.addEventListener('load', () => { if (xhr.status === 200) { resolve(JSON.parse(xhr.responseText)); } else { reject(new Error(`Upload failed: ${xhr.statusText}`)); } }); // Handle errors xhr.addEventListener('error', () => { reject(new Error('Upload failed')); }); // Start upload xhr.open('POST', '/api/upload/image'); xhr.send(formData); }); } // Usage example const fileInput = document.getElementById('fileInput'); const progressBar = document.getElementById('progressBar'); fileInput.addEventListener('change', async (e) => { const file = e.target.files[0]; if (!file) return; try { const result = await uploadWithProgress(file, (progress) => { progressBar.style.width = progress + '%'; progressBar.textContent = progress + '%'; }); console.log('Upload complete:', result); } catch (error) { console.error('Upload failed:', error); } }); ``` ### 3. File Validation Before Upload ```javascript function validateImage(file) { const errors = []; // Check file type const allowedTypes = [ 'image/jpeg', 'image/jpg', 'image/png', 'image/webp', 'image/gif' ]; if (!allowedTypes.includes(file.type)) { errors.push('Only JPG, PNG, WebP, and GIF images are allowed'); } // Check file size (5MB = 5,242,880 bytes) const maxSize = 5 DOCUMENTATION_ARCHITECTURE.md Dockerfile Dockerfile.docs LINK_AUDIT.md LinkedIn_Documentation_Infrastructure_Report.md PRODUCTION_PERFORMANCE_COMMANDS.txt PRODUCTION_PERFORMANCE_COMMANDS_WITH_PASSWORD.txt README-DB-EXPLORER.md README.md TESTING.md __mocks__ changelog-preset.js commitlint.config.js commits community coverage custom-eslint-rules debug-content-parser.js docker-compose.dev.yml docker-compose.yml docker-postgres docs documentation-coverage.md e2e global.d.ts index.md jekyll jest.config.js jest.env.js jest.setup.js logs migrations next-env.d.ts next.config.js node_modules package-lock.json package.json playwright-report playwright.config.ts pnpm-lock.yaml public scripts seed-db-faker.js sonar-project.properties src swagger.config.js test-results test_output.txt tsconfig.json tsconfig.tsbuildinfo updates yarn.lock 1024 DOCUMENTATION_ARCHITECTURE.md Dockerfile Dockerfile.docs LINK_AUDIT.md LinkedIn_Documentation_Infrastructure_Report.md PRODUCTION_PERFORMANCE_COMMANDS.txt PRODUCTION_PERFORMANCE_COMMANDS_WITH_PASSWORD.txt README-DB-EXPLORER.md README.md TESTING.md __mocks__ changelog-preset.js commitlint.config.js commits community coverage custom-eslint-rules debug-content-parser.js docker-compose.dev.yml docker-compose.yml docker-postgres docs documentation-coverage.md e2e global.d.ts index.md jekyll jest.config.js jest.env.js jest.setup.js logs migrations next-env.d.ts next.config.js node_modules package-lock.json package.json playwright-report playwright.config.ts pnpm-lock.yaml public scripts seed-db-faker.js sonar-project.properties src swagger.config.js test-results test_output.txt tsconfig.json tsconfig.tsbuildinfo updates yarn.lock 1024; if (file.size > maxSize) { errors.push( `File is too large. Maximum size is ${maxSize / 1024 / 1024}MB` ); } // Check minimum size const minSize = 1024; // 1KB if (file.size < minSize) { errors.push('File is too small'); } return errors; } // Usage example function handleFileSelect(event) { const file = event.target.files[0]; if (!file) return; const errors = validateImage(file); if (errors.length > 0) { alert('Upload errors:\n' + errors.join('\n')); event.target.value = ''; // Clear the input return; } // File is valid, proceed with upload uploadImage(file); } ``` ### 4. Image Preview Before Upload ```javascript function previewImage(file, previewElement) { const reader = new FileReader(); reader.onload = (e) => { previewElement.src = e.target.result; previewElement.style.display = 'block'; }; reader.readAsDataURL(file); } // Usage example const fileInput = document.getElementById('fileInput'); const preview = document.getElementById('imagePreview'); fileInput.addEventListener('change', (e) => { const file = e.target.files[0]; if (file) { previewImage(file, preview); } }); ``` ## üé® Upload Features ### Automatic Image Optimization When you upload an image, the server automatically: 1. **Compresses the image** to reduce file size 2. **Generates multiple sizes** for different uses: - **Thumbnail**: 150x150 pixels - **Medium**: 800x600 pixels - **Large**: Original size (up to 1920x1080) 3. **Converts to WebP** format when supported 4. **Strips metadata** for privacy and smaller file size ### Security Features - **File type validation** - Only image files are accepted - **Virus scanning** - Files are checked for malware - **Size limits** - Prevents excessive storage usage - **Rate limiting** - Prevents spam uploads - **User authentication** - Only logged-in users can upload ### Storage Organization Uploaded files are organized by: - **Date**: Files are stored in folders by upload date - **User**: Each user has their own subdirectory - **Type**: Images are separated from other file types - **Size**: Different image sizes are stored separately Example file structure: ``` uploads/ ‚îú‚îÄ‚îÄ images/ ‚îÇ ‚îú‚îÄ‚îÄ 2024/ ‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ 01/ ‚îÇ ‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ user123/ ‚îÇ ‚îÇ ‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ image-1234567890.jpg ‚îÇ ‚îÇ ‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ image-1234567890-thumb.jpg ‚îÇ ‚îÇ ‚îÇ ‚îÇ ‚îî‚îÄ‚îÄ image-1234567890-medium.jpg ``` ## üö® Common Issues and Solutions ### Upload Fails with \"File Too Large\" **Problem:** Your image is bigger than the allowed limit. **Solutions:** 1. **Compress the image** using online tools or photo editing software 2. **Resize the image** to smaller dimensions 3. **Change the format** - JPG files are usually smaller than PNG **Example compression:** ```bash # Using online tools # 1. Go to tinypng.com or compressor.io # 2. Upload your image # 3. Download the compressed version # Using command line (if you have ImageMagick) convert large-image.jpg -quality 80 -resize 1920x1080 compressed-image.jpg ``` ### Upload Fails with \"Invalid File Type\" **Problem:** The file type is not supported. **Solutions:** 1. **Convert the image** to a supported format (JPG, PNG, WebP, GIF) 2. **Check the file extension** - make sure it matches the actual file type 3. **Re-save the image** from a photo editor in the correct format ### Upload is Very Slow **Problem:** Upload takes too long to complete. **Solutions:** 1. **Check your internet connection** 2. **Compress the image** to reduce file size 3. **Try a different network** (mobile data vs WiFi) 4. **Upload during off-peak hours** ### Image Quality is Poor After Upload **Problem:** The uploaded image looks worse than the original. **Solutions:** 1. **Start with a higher quality original** 2. **Use JPG format** for photos (better compression) 3. **Use PNG format** for graphics with few colors 4. **Check the image dimensions** - very small images may look pixelated when displayed larger ## üí° Best Practices ### For Developers **File Validation:** ```javascript // Always validate on both client and server side function validateFile(file) { // Client-side validation for better UX if (!file.type.startsWith('image/')) { throw new Error('Please select an image file'); } if (file.size > 5 DOCUMENTATION_ARCHITECTURE.md Dockerfile Dockerfile.docs LINK_AUDIT.md LinkedIn_Documentation_Infrastructure_Report.md PRODUCTION_PERFORMANCE_COMMANDS.txt PRODUCTION_PERFORMANCE_COMMANDS_WITH_PASSWORD.txt README-DB-EXPLORER.md README.md TESTING.md __mocks__ changelog-preset.js commitlint.config.js commits community coverage custom-eslint-rules debug-content-parser.js docker-compose.dev.yml docker-compose.yml docker-postgres docs documentation-coverage.md e2e global.d.ts index.md jekyll jest.config.js jest.env.js jest.setup.js logs migrations next-env.d.ts next.config.js node_modules package-lock.json package.json playwright-report playwright.config.ts pnpm-lock.yaml public scripts seed-db-faker.js sonar-project.properties src swagger.config.js test-results test_output.txt tsconfig.json tsconfig.tsbuildinfo updates yarn.lock 1024 DOCUMENTATION_ARCHITECTURE.md Dockerfile Dockerfile.docs LINK_AUDIT.md LinkedIn_Documentation_Infrastructure_Report.md PRODUCTION_PERFORMANCE_COMMANDS.txt PRODUCTION_PERFORMANCE_COMMANDS_WITH_PASSWORD.txt README-DB-EXPLORER.md README.md TESTING.md __mocks__ changelog-preset.js commitlint.config.js commits community coverage custom-eslint-rules debug-content-parser.js docker-compose.dev.yml docker-compose.yml docker-postgres docs documentation-coverage.md e2e global.d.ts index.md jekyll jest.config.js jest.env.js jest.setup.js logs migrations next-env.d.ts next.config.js node_modules package-lock.json package.json playwright-report playwright.config.ts pnpm-lock.yaml public scripts seed-db-faker.js sonar-project.properties src swagger.config.js test-results test_output.txt tsconfig.json tsconfig.tsbuildinfo updates yarn.lock 1024) { throw new Error('Image must be smaller than 5MB'); } } ``` **Error Handling:** ```javascript async function uploadImage(file) { try { validateFile(file); const formData = new FormData(); formData.append('file', file); const response = await fetch('/api/upload/image', { method: 'POST', body: formData }); if (!response.ok) { const error = await response.json(); throw new Error(error.message || 'Upload failed'); } return await response.json(); } catch (error) { // Handle error appropriately console.error('Upload error:', error); showErrorMessage(error.message); throw error; } } ``` **Progress Feedback:** ```javascript // Always show upload progress for large files function showUploadProgress(percentComplete) { const progressBar = document.getElementById('progressBar'); const progressText = document.getElementById('progressText'); progressBar.style.width = percentComplete + '%'; progressText.textContent = `Uploading... ${percentComplete}%`; if (percentComplete === 100) { progressText.textContent = 'Processing...'; } } ``` ### For Users **Preparing Images:** 1. **Choose the right format:** - **JPG**: Best for photos with many colors - **PNG**: Best for graphics, logos, or images with transparency - **WebP**: Smallest file size, modern browsers only - **GIF**: Only for animations 2. **Optimize before uploading:** - Resize images to reasonable dimensions - Compress images to reduce file size - Remove unnecessary metadata 3. **Name your files clearly:** - Use descriptive names: `profile-picture.jpg` instead of `IMG_1234.jpg` - Avoid special characters and spaces - Keep names short but meaningful **Upload Tips:** 1. **Check your connection** before uploading large files 2. **Don't close the browser** during upload 3. **Wait for confirmation** before leaving the page 4. **Keep backups** of important images --- ## üîó Related Documentation - **[API Overview](./index)** - General API information and authentication - **[Emoji APIs](./emojis)** - Using uploaded images as custom emojis - **[Environment Variables](../development/environment-variables)** - Configuring upload settings - **User APIs** - Managing user profiles and avatars _(coming soon)_ --- ## üìã Quick Reference ### Upload Limits - **Maximum file size**: 5MB - **Allowed formats**: JPG, PNG, WebP, GIF - **Maximum dimensions**: 4096x4096 pixels - **Minimum file size**: 1KB ### Response Fields - `filename` - Server-generated unique filename - `url` - Relative path to the uploaded file - `publicUrl` - Complete URL to access the file - `size` - File size in bytes - `dimensions` - Image width and height ### Common Status Codes - **200** - Upload successful - **400** - Bad request (invalid file, too large, etc.) - **401** - Not logged in - **500** - Server error --- _File uploads are an essential part of any social platform. Our upload system is designed to be fast, secure, and user-friendly while maintaining high quality standards._ ",
    "./src/app/api/upload/image/README.md": "--- title: route category: api_route tags: [documentation-needed] status: draft --- # route > ‚ö†Ô∏è **Documentation Needed**: This file was automatically generated and needs content. ## Overview TODO: Describe what this api_route does. ## Usage TODO: Provide usage examples. ## API Reference TODO: Document the public interface. --- *File: `src/app/api/upload/image/route.ts`* *Auto-generated on: 2025-07-01 11:33:14* ",
    "./src/app/api/user/timeout/README.md": "--- title: route category: api_route tags: [documentation-needed] status: draft --- # route > ‚ö†Ô∏è **Documentation Needed**: This file was automatically generated and needs content. ## Overview TODO: Describe what this api_route does. ## Usage TODO: Provide usage examples. ## API Reference TODO: Document the public interface. --- *File: `src/app/api/user/timeout/route.ts`* *Auto-generated on: 2025-07-01 11:33:14* ",
    "./src/app/api/version/README.md": "--- title: route category: api_route tags: [documentation-needed] status: draft --- # route > ‚ö†Ô∏è **Documentation Needed**: This file was automatically generated and needs content. ## Overview TODO: Describe what this api_route does. ## Usage TODO: Provide usage examples. ## API Reference TODO: Document the public interface. --- *File: `src/app/api/version/route.ts`* *Auto-generated on: 2025-07-01 11:33:14* ",
    "./src/components/auth-avatar.md": "# AuthAvatar Components ## Overview The AuthAvatar components provide consistent avatar rendering for the currently authenticated user throughout the application. These components ensure that the user's avatar appearance remains the same across all parts of the app by using a consistent seed based on the user's ID. ## Components ### `AuthAvatar` (Client Component) Used in client-side components that need to display the current user's avatar. ```tsx import { AuthAvatar } from '@/app/components/auth-avatar'; function MyClientComponent() { return <AuthAvatar size=\"md\" enableTooltip={true} />; } ``` ### `AuthAvatarServer` (Server Component) Used in server-side components that need to display the current user's avatar. ```tsx import { AuthAvatarServer } from '@/app/components/auth-avatar'; async function MyServerComponent() { return <AuthAvatarServer size=\"sm\" />; } ``` ## Props Both components accept the same props: - `size?: AvatarPropSizes` - Size of the avatar (default: 'md') - `enableTooltip?: boolean` - Whether to show tooltip on hover (default: false) - `tooltipScale?: 2 | 3 | 4` - Scale factor for tooltip (default: 2) - `className?: string` - Additional CSS classes (default: '') ## Seed Strategy The components use the following fallback strategy for the avatar seed: 1. **User ID** (primary) - Most stable identifier 2. **User name** (fallback) - If ID is not available 3. **User email** (fallback) - If ID and name are not available 4. **\"anonymous\"** (fallback) - If no session exists This ensures consistent avatar appearance regardless of how the user data is structured. ## Why These Components? ### Problem Solved Previously, avatars were generated using inconsistent seeds like `user.username || user.email || user.id`. This caused avatars to change appearance when: - Profile data was fetched from different sources (submissions table vs users table) - User data structure differed between authentication states - Bio updates returned different user object formats ### Solution These dedicated components: - Always use the user ID as the primary seed for consistency - Provide a single source of truth for authenticated user avatars - Ensure the same avatar appearance across the entire application - Handle different authentication states gracefully ## Usage Guidelines - Use `AuthAvatar` in client components (pages, interactive elements) - Use `AuthAvatarServer` in server components (layouts, static elements) - Always use these components instead of directly using `Avatar` with session data - For non-authenticated user avatars (other users), continue using the regular `Avatar` component ",
    "./src/components/dev-tools.md": "# Development Skeleton Toggle System A development-only tool for controlling skeleton loading states throughout the application. ## üîí Security Features - **Build-time exclusion**: Completely removed from production builds via Next.js webpack configuration - **Runtime checks**: Multiple layers of `NODE_ENV` checks prevent any dev code execution in production - **Tree-shaking**: Uses dynamic imports that are eliminated during production bundling - **Zero footprint**: No dev tools code, styles, or functionality exists in production bundles ## üéõÔ∏è Features ### Three Operating Modes 1. **Auto (Default)**: Normal loading behavior - skeletons show during actual loading states 2. **Force ON**: All skeleton components show regardless of loading state 3. **Force OFF**: No skeletons show, overriding all loading states ### Global Control - Controls ALL skeleton components throughout the application - Works with both manual and smart skeleton configurations - Overrides component-level loading states when active ### Developer UX - **Floating Action Button**: Always accessible in bottom-right corner - **Keyboard Shortcut**: `Ctrl+Shift+S` to toggle panel - **Visual Indicator**: Red pulsing dot when override is active - **Status Display**: Clear indication of current mode and its effects ## üöÄ Usage ### Automatic Integration The dev tools are automatically available in development mode: 1. Start the development server (`npm run dev`) 2. Navigate to any page with skeleton loaders 3. Use `Ctrl+Shift+S` or click the floating button in bottom-right 4. Select your desired mode ### For Component Developers Components using skeleton loaders automatically respect dev mode settings: ```tsx // Existing skeleton components work without changes <SkeletonLoader config={config} isLoading={isLoading} /> // Smart skeletons respect dev mode automatically const { getSmartSkeletonLoader } = useSmartPostsSkeleton(); {getSmartSkeletonLoader(isLoading)} ``` ### Testing Scenarios - **Force ON**: Perfect for designing skeleton layouts without waiting for loading - **Force OFF**: Test actual content layouts without skeleton interference - **Auto**: Verify normal loading behavior works correctly ## üèóÔ∏è Technical Implementation ### Build-time Exclusion ```javascript // next.config.js webpack: (config, { webpack, dev }) => { if (!dev) { config.plugins.push( new webpack.IgnorePlugin({ resourceRegExp: /^.*\/dev-tools\/.*$/, contextRegExp: /src\/app\/components/ }) ); } } ``` ### Runtime Protection ```typescript // Development-only imports let useDevSkeletonState: () => DevState; if (process.env.NODE_ENV === 'development') { const devModule = require('../dev-tools/DevSkeletonToggle'); useDevSkeletonState = devModule.useDevSkeletonState; } else { // Production fallback - returns inactive state useDevSkeletonState = () => ({ shouldShowSkeleton: false, isDevModeActive: false }); } ``` ### Component Integration ```typescript const { shouldShowSkeleton, isDevModeActive } = useDevSkeletonState(); const shouldShow = (() => { if (process.env.NODE_ENV === 'development' && isDevModeActive) { return shouldShowSkeleton; } return forceShow || isLoading; })(); ``` ## üì¶ Files Structure ``` src/app/components/dev-tools/ ‚îú‚îÄ‚îÄ DevSkeletonToggle.tsx # Main toggle component ‚îú‚îÄ‚îÄ DevSkeletonToggle.css # Styles (dev-only) ‚îî‚îÄ‚îÄ README.md # This documentation ``` ## üîç Verification To verify dev tools are excluded from production: 1. Build for production: `npm run build` 2. Search build output for dev tool references (should find none) 3. Check bundle analyzer for dev tool code (should be absent) 4. Test production deployment (no dev tools should appear) ## üé® Styling - **Modern Design**: Clean, professional interface - **Dark Mode**: Automatic system preference detection - **Responsive**: Works on mobile and desktop - **Accessible**: ARIA labels, keyboard navigation, reduced motion support - **Non-intrusive**: Overlay design doesn't interfere with app layout ## ‚ö†Ô∏è Important Notes - Only available in `NODE_ENV=development` - Requires manual integration in page components (already done for posts/my-posts) - Uses Jotai for state management (shares app state management system) - CSS uses modern features (flexbox, CSS custom properties) - Keyboard shortcut respects user preferences and doesn't conflict with browser shortcuts ",
    "./src/components/filter-bar.md": "# Custom Filter Input Component The `CustomFilterInput` component provides a powerful, agnostic filter input control that supports both user and tag filtering with smart search capabilities and intelligent auto-detection. ## Features ### üéØ **Smart Auto-Detection** - **Automatic mode switching**: No manual toggles needed - just start typing! - **Hashtag detection**: Type `#` and get instant hashtag suggestions - **User detection**: Type `@` and get instant user suggestions - **Visual feedback**: Real-time mode indicators show current filter type - **Fallback handling**: Plain text automatically treated as hashtags ### üè∑Ô∏è Tag Filtering - **Smart hashtag suggestions** powered by existing hashtag search - **Auto-detection** when typing `#` characters - **Validation** ensures proper hashtag format - **Integration** with existing tag filter logic (AND/OR) ### üë• User Filtering - **Dual modes**: Author filters (posts by user) and Mention filters (posts mentioning user) - **Smart user suggestions** with avatars and usernames - **Structured format support**: Handles `@[username|userId]` format from SmartInput - **Fallback handling**: Simple `@username` format support - **Integration** with existing user filter logic (AND/OR) ### üé® **Simplified UX** - **One input field**: Single SmartInput handles all filter types - **Context-aware help**: Dynamic help text based on current input - **Minimal UI**: No clutter - just the essentials - **Responsive design**: Mobile-friendly interface ## Usage ### Basic Implementation ```tsx import { CustomFilterInput } from '../filter-bar/CustomFilterInput'; import { useSubmissionsManager } from '../../../lib/state/useSubmissionsManager'; function MyComponent() { const { addFilter } = useSubmissionsManager({ contextId: 'my-context' }); return ( <CustomFilterInput contextId=\"my-context\" onAddFilter={addFilter} /> ); } ``` ### Integration with PostsManager The component is already integrated into `PostsManager` and works seamlessly with the existing filter system: ```tsx // In PostsManager.tsx <CustomFilterInput contextId={contextId} onAddFilter={addFilter} className=\"posts-manager__custom-filter\" /> ``` ### Props Interface ```tsx interface CustomFilterInputProps { contextId: string; // Context ID for filter management onAddFilter: (filter: Filter<PostFilters>) => void; // Filter addition callback placeholder?: string; // Custom placeholder text className?: string; // Additional CSS classes } ``` ## How It Works ### üéØ **Smart Detection Flow** 1. **Start typing** in the single input field 2. **Auto-detection** determines filter type: - `#javascript` ‚Üí **Hashtag mode** with tag suggestions - `@username` ‚Üí **User mode** with user suggestions - `react` ‚Üí **Fallback** to hashtag mode 3. **Visual feedback** shows current mode with colored badges 4. **Context help** updates dynamically 5. **Submit** and filter is automatically applied ### üé® **UI States** #### Empty State ``` ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îÇ Add filter: @user or #tag... ‚îÇ ‚îÇ [Add]‚îÇ ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò Type # for hashtags or @ for users... ``` #### Hashtag Mode ``` ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îÇ #javascript [#Tag] [Add]‚îÇ ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò Filtering by hashtag - select from suggestions or type custom tag ``` #### User Mode (Author) ``` ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îÇ @johndoe [@Author] [Add]‚îÇ ‚îÇ [Posts by user ‚ñº] ‚îÇ ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò Filtering posts by user - select from suggestions ``` #### User Mode (Mentions) ``` ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îÇ @johndoe [@Mentions] [Add]‚îÇ ‚îÇ [Posts mentioning user ‚ñº] ‚îÇ ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò Filtering posts mentioning user - select from suggestions ``` ## Filter Types & Modes ### Tag Filters - **Input format**: `#javascript`, `#react`, `#webdev` - **Auto-completion**: Suggests existing hashtags from posts - **Output**: `{ name: 'tags', value: '#javascript' }` ### User Filters #### Author Mode (Default) - **Purpose**: Filter posts written BY a specific user - **Input format**: `@username` or `@[username|userId]` - **Output**: `{ name: 'author', value: 'userId' }` #### Mentions Mode - **Purpose**: Filter posts that MENTION a specific user - **Input format**: `@username` or `@[username|userId]` - **Output**: `{ name: 'mentions', value: 'username' }` ## Integration with Existing Filter System The component fully integrates with the existing filter management system: ### Filter Logic Support - **Tag Logic**: Existing `tagLogic` (AND/OR) controls multiple tag filters - **User Logic**: Existing `authorLogic` and `mentionsLogic` (AND/OR) controls - **Global Logic**: Existing `globalLogic` (AND/OR) controls between filter groups ### Filter Management - **Add**: Uses existing `addFilter()` method from `useSubmissionsManager` - **Remove**: Works with existing `removeFilter()` and `removeTag()` methods - **Display**: Integrates with existing `FilterBar` component - **URL Sync**: Automatically syncs with URL parameters ## User Experience ### Simplified Workflow 1. **Start typing** in the input field 2. **Watch auto-detection** switch modes automatically 3. **Choose user mode** (Author/Mentions) if typing @ 4. **Select suggestion** or continue typing 5. **Submit** using Add button or Enter key 6. **View filter** in FilterBar above 7. **Manage filters** using existing FilterBar controls ### Visual Feedback - **Mode badges**: Color-coded indicators show current filter type - `#Tag` - Orange badge for hashtag mode - `@Author` - Blue badge for author filtering - `@Mentions` - Orange badge for mention filtering - **Dynamic help**: Context-aware help text updates as you type - **Smooth animations**: Mode indicators slide in/out gracefully ## Styling & Theming ### CSS Classes - `.custom-filter-input` - Main container - `.custom-filter-input__input` - Smart input field - `.custom-filter-input__mode-badge` - Mode indicator badges - `.custom-filter-input__submit` - Submit button - `.custom-filter-input__help` - Help text area ### Mode Badge Colors - **Hashtag**: Orange theme matching brand primary - **Author**: Blue theme for author identification - **Mentions**: Orange theme for mention highlighting ### Responsive Design - **Desktop**: Horizontal layout with inline mode selector - **Tablet**: Stacked layout for better space usage - **Mobile**: Full-width vertical layout ### Dark Mode - Automatically adapts to system dark mode preferences - Mode badges maintain contrast and readability ## Testing Comprehensive test coverage includes: - ‚úÖ Component rendering and basic functionality - ‚úÖ Auto-detection of hashtag vs user modes - ‚úÖ Mode indicator display and hiding - ‚úÖ User mode switching (Author ‚Üî Mentions) - ‚úÖ Input processing and filter creation - ‚úÖ Structured mention format handling - ‚úÖ Plain text fallback to hashtag mode - ‚úÖ Dynamic help text updates - ‚úÖ Input clearing after submission - ‚úÖ Mode selector visibility logic ## Examples ### Smart Detection in Action ``` User types: \"#\" ‚Üí Auto-switches to hashtag mode User types: \"#react\" ‚Üí Shows hashtag suggestions for \"react\" User types: \"@\" ‚Üí Auto-switches to user mode (author) User types: \"@john\" ‚Üí Shows user suggestions for \"john\" User types: \"javascript\" ‚Üí Will be treated as \"#javascript\" when submitted ``` ### Mode Switching ``` User types: \"@john\" ‚Üí Author mode (default) User selects: \"Posts mentioning user\" ‚Üí Switches to mentions mode Badge changes: \"@Author\" ‚Üí \"@Mentions\" Help text updates to match new mode ``` ### Structured Format Handling ``` SmartInput suggestion: \"@[johndoe|user123]\" Author mode output: { name: 'author', value: 'user123' } Mentions mode output: { name: 'mentions', value: 'johndoe' } ``` ## Architecture Benefits ### Simplified UX - **Single input**: No cognitive load from multiple controls - **Smart detection**: Technology handles the complexity - **Visual feedback**: Users always know current state - **Minimal clicks**: Fewer interactions needed ### Performance - **Smart caching**: Leverages existing search result caching - **Debounced input**: Prevents excessive API calls during typing - **Optimized rendering**: Minimal re-renders on state changes - **Intelligent suggestions**: Only searches when appropriate ### Accessibility - **Keyboard navigation**: Full keyboard support including Enter to submit - **Screen readers**: Proper ARIA labels and live region updates - **Focus management**: Logical tab order and focus indicators - **Color contrast**: Mode badges meet WCAG guidelines This simplified component provides an intuitive, powerful way to add filters while maintaining full compatibility with the existing filter management system. The smart detection eliminates UI complexity while the visual feedback keeps users informed about their current context. ",
    "./src/components/filter-bar/index.md": "--- layout: default title: 'Filter Bar' description: 'Advanced filtering interface with smart inputs and real-time search capabilities' permalink: /components/filter-bar/ parent: Components categories: [components, filtering, search] tags: [filter-bar, search, smart-filters, ui-components] --- # Filter Bar Component ## Overview The Filter Bar is an advanced filtering interface that provides users with intelligent search and filtering capabilities. It combines text input with smart suggestions, filter pills, and real-time search to create a powerful content discovery experience. ## Key Features - **Smart Text Input** - Intelligent parsing of search queries - **Filter Pills** - Visual representation of active filters - **Real-time Search** - Instant results as users type - **Hashtag Integration** - Automatic hashtag detection and filtering - **User Mention Filters** - Filter by author or mentioned users - **Date Range Filtering** - Time-based content filtering - **Sort Options** - Multiple sorting and ordering options ## Usage Examples _Documentation coming soon..._ ## API Reference _API documentation coming soon..._ ## Related Components - [Rich Input System](/components/rich-input-system/) - Powers the smart text input - [Search Overlay](/components/search-overlay/) - Provides suggestion interface --- _This component is part of the Idling.app UI component library. For implementation details, see the [Development](/development/) section._ ",
    "./src/components/floating-toolbar/index.md": "--- layout: default title: 'Floating Toolbar' description: 'Context-sensitive toolbar that appears when editing rich text content' permalink: /components/floating-toolbar/ parent: Components categories: [components, toolbar, rich-text] tags: [floating-toolbar, rich-input, ui-components, accessibility] --- # Floating Toolbar Component ## Overview The Floating Toolbar is a context-sensitive interface that appears when users interact with rich text inputs. It provides quick access to common formatting and insertion tools, enhancing the text editing experience without cluttering the interface. ## Key Features - **Context-Sensitive Display** - Appears only when relevant - **Smart Positioning** - Automatically positions to avoid viewport edges - **Quick Actions** - One-click access to hashtags, mentions, and emojis - **Keyboard Navigation** - Full accessibility support - **Touch-Friendly** - Optimized for mobile devices - **Smooth Animations** - Polished show/hide transitions ## Toolbar Actions ### Insert Actions - **Hashtag Button** - Opens hashtag search and insertion - **Mention Button** - Opens user search for mentions - **Emoji Button** - Opens emoji picker interface ### Positioning - Appears above or below input based on available space - Maintains consistent distance from input element - Automatically adjusts on window resize ## Integration The Floating Toolbar integrates seamlessly with: - [Rich Input System](/components/rich-input-system/) - Primary integration point - [Search Overlay](/components/search-overlay/) - For suggestion interfaces ## Usage Examples _Code examples and implementation guide coming soon..._ ## API Reference _Detailed API documentation coming soon..._ --- _This component is part of the Idling.app UI component library. For implementation details, see the [Development](/development/) section._ ",
    "./src/components/index.md": "--- layout: default title: 'Component Library' description: 'UI components and design system documentation' permalink: /dev/components/ --- # üß© Component Library Complete documentation for the Idling.app React component library, including design system, usage examples, and implementation details. ## üé® Design System ### Color Palette ```css /Docker /app /bin /bin.usr-is-merged /boot /dev /etc /home /init /lib /lib.usr-is-merged /lib64 /lost+found /media /mnt /opt /proc /root /run /sbin /sbin.usr-is-merged /snap /srv /sys /tmp /usr /var /wslAOHfEh /wslFgieig /wslGiDGlg /wslHdGhjg /wslMEKAlg /wslOFllck /wslPFkBGh /wslaamLFh /wslajcDlg /wslcLijck /wsldLlHck /wsliANAGh /wsllKaoFh /wslmHHock /wsloLDFbk Primary Colors __mocks__/ commits/ community/ coverage/ custom-eslint-rules/ docker-postgres/ docs/ e2e/ jekyll/ logs/ migrations/ node_modules/ playwright-report/ public/ scripts/ src/ test-results/ updates/ --primary-50: #f0f9ff; --primary-100: #e0f2fe; --primary-500: #0ea5e9; --primary-600: #0284c7; --primary-900: #0c4a6e; /Docker /app /bin /bin.usr-is-merged /boot /dev /etc /home /init /lib /lib.usr-is-merged /lib64 /lost+found /media /mnt /opt /proc /root /run /sbin /sbin.usr-is-merged /snap /srv /sys /tmp /usr /var /wslAOHfEh /wslFgieig /wslGiDGlg /wslHdGhjg /wslMEKAlg /wslOFllck /wslPFkBGh /wslaamLFh /wslajcDlg /wslcLijck /wsldLlHck /wsliANAGh /wsllKaoFh /wslmHHock /wsloLDFbk Neutral Colors __mocks__/ commits/ community/ coverage/ custom-eslint-rules/ docker-postgres/ docs/ e2e/ jekyll/ logs/ migrations/ node_modules/ playwright-report/ public/ scripts/ src/ test-results/ updates/ --neutral-50: #f8fafc; --neutral-100: #f1f5f9; --neutral-500: #64748b; --neutral-900: #0f172a; /Docker /app /bin /bin.usr-is-merged /boot /dev /etc /home /init /lib /lib.usr-is-merged /lib64 /lost+found /media /mnt /opt /proc /root /run /sbin /sbin.usr-is-merged /snap /srv /sys /tmp /usr /var /wslAOHfEh /wslFgieig /wslGiDGlg /wslHdGhjg /wslMEKAlg /wslOFllck /wslPFkBGh /wslaamLFh /wslajcDlg /wslcLijck /wsldLlHck /wsliANAGh /wsllKaoFh /wslmHHock /wsloLDFbk Semantic Colors __mocks__/ commits/ community/ coverage/ custom-eslint-rules/ docker-postgres/ docs/ e2e/ jekyll/ logs/ migrations/ node_modules/ playwright-report/ public/ scripts/ src/ test-results/ updates/ --success: #10b981; --warning: #f59e0b; --error: #ef4444; --info: #3b82f6; ``` ### Typography ```css /Docker /app /bin /bin.usr-is-merged /boot /dev /etc /home /init /lib /lib.usr-is-merged /lib64 /lost+found /media /mnt /opt /proc /root /run /sbin /sbin.usr-is-merged /snap /srv /sys /tmp /usr /var /wslAOHfEh /wslFgieig /wslGiDGlg /wslHdGhjg /wslMEKAlg /wslOFllck /wslPFkBGh /wslaamLFh /wslajcDlg /wslcLijck /wsldLlHck /wsliANAGh /wsllKaoFh /wslmHHock /wsloLDFbk Font Families __mocks__/ commits/ community/ coverage/ custom-eslint-rules/ docker-postgres/ docs/ e2e/ jekyll/ logs/ migrations/ node_modules/ playwright-report/ public/ scripts/ src/ test-results/ updates/ --font-sans: 'Inter', system-ui, sans-serif; --font-mono: 'Fira Code', monospace; /Docker /app /bin /bin.usr-is-merged /boot /dev /etc /home /init /lib /lib.usr-is-merged /lib64 /lost+found /media /mnt /opt /proc /root /run /sbin /sbin.usr-is-merged /snap /srv /sys /tmp /usr /var /wslAOHfEh /wslFgieig /wslGiDGlg /wslHdGhjg /wslMEKAlg /wslOFllck /wslPFkBGh /wslaamLFh /wslajcDlg /wslcLijck /wsldLlHck /wsliANAGh /wsllKaoFh /wslmHHock /wsloLDFbk Font Sizes __mocks__/ commits/ community/ coverage/ custom-eslint-rules/ docker-postgres/ docs/ e2e/ jekyll/ logs/ migrations/ node_modules/ playwright-report/ public/ scripts/ src/ test-results/ updates/ --text-xs: 0.75rem; --text-sm: 0.875rem; --text-base: 1rem; --text-lg: 1.125rem; --text-xl: 1.25rem; --text-2xl: 1.5rem; --text-3xl: 1.875rem; --text-4xl: 2.25rem; ``` ### Spacing ```css /Docker /app /bin /bin.usr-is-merged /boot /dev /etc /home /init /lib /lib.usr-is-merged /lib64 /lost+found /media /mnt /opt /proc /root /run /sbin /sbin.usr-is-merged /snap /srv /sys /tmp /usr /var /wslAOHfEh /wslFgieig /wslGiDGlg /wslHdGhjg /wslMEKAlg /wslOFllck /wslPFkBGh /wslaamLFh /wslajcDlg /wslcLijck /wsldLlHck /wsliANAGh /wsllKaoFh /wslmHHock /wsloLDFbk Spacing Scale __mocks__/ commits/ community/ coverage/ custom-eslint-rules/ docker-postgres/ docs/ e2e/ jekyll/ logs/ migrations/ node_modules/ playwright-report/ public/ scripts/ src/ test-results/ updates/ --space-1: 0.25rem; --space-2: 0.5rem; --space-3: 0.75rem; --space-4: 1rem; --space-6: 1.5rem; --space-8: 2rem; --space-12: 3rem; --space-16: 4rem; ``` ## üîß Core Components ### Button Component Flexible button component with multiple variants and states. #### Props Interface ```typescript interface ButtonProps { variant?: 'primary' | 'secondary' | 'outline' | 'ghost' | 'destructive'; size?: 'sm' | 'md' | 'lg' | 'xl'; disabled?: boolean; loading?: boolean; leftIcon?: React.ReactNode; rightIcon?: React.ReactNode; onClick?: (event: React.MouseEvent<HTMLButtonElement>) => void; children: React.ReactNode; className?: string; type?: 'button' | 'submit' | 'reset'; } ``` #### Usage Examples ```tsx import { Button } from '@/components/ui/Button'; // Basic button <Button variant=\"primary\" size=\"md\"> Click me </Button> // Button with icon <Button variant=\"secondary\" leftIcon={<PlusIcon />}> Add Item </Button> // Loading button <Button variant=\"primary\" loading> Saving... </Button> // Disabled button <Button variant=\"outline\" disabled> Disabled </Button> ``` #### Variants - **Primary**: Main call-to-action buttons - **Secondary**: Secondary actions - **Outline**: Subtle actions with border - **Ghost**: Minimal actions without background - **Destructive**: Dangerous actions (delete, etc.) ### Input Component Comprehensive input component with validation and accessibility features. #### Props Interface ```typescript interface InputProps { type?: 'text' | 'email' | 'password' | 'number' | 'tel' | 'url'; placeholder?: string; value?: string; defaultValue?: string; onChange?: (event: React.ChangeEvent<HTMLInputElement>) => void; onBlur?: (event: React.FocusEvent<HTMLInputElement>) => void; onFocus?: (event: React.FocusEvent<HTMLInputElement>) => void; disabled?: boolean; required?: boolean; error?: string; label?: string; helperText?: string; leftIcon?: React.ReactNode; rightIcon?: React.ReactNode; className?: string; size?: 'sm' | 'md' | 'lg'; } ``` #### Usage Examples ```tsx import { Input } from '@/components/ui/Input'; // Basic input <Input label=\"Email\" type=\"email\" placeholder=\"Enter your email\" required /> // Input with error <Input label=\"Password\" type=\"password\" error=\"Password must be at least 8 characters\" /> // Input with icon <Input label=\"Search\" leftIcon={<SearchIcon />} placeholder=\"Search posts...\" /> ``` ### Card Component Flexible card component for content organization. #### Props Interface ```typescript interface CardProps { children: React.ReactNode; className?: string; padding?: 'none' | 'sm' | 'md' | 'lg'; shadow?: 'none' | 'sm' | 'md' | 'lg'; border?: boolean; hover?: boolean; } ``` #### Usage Examples ```tsx import { Card } from '@/components/ui/Card'; // Basic card <Card> <h3>Card Title</h3> <p>Card content goes here.</p> </Card> // Card with hover effect <Card hover shadow=\"md\"> <h3>Interactive Card</h3> <p>This card has hover effects.</p> </Card> ``` ## üìù Rich Input System Advanced text editing component with rich formatting capabilities. ### Features - **Rich text editing** - Bold, italic, underline, links - **Markdown support** - Live markdown preview - **Emoji picker** - Integrated emoji selection - **Mention system** - @username mentions - **File uploads** - Drag and drop file support - **Auto-save** - Automatic content saving - **Accessibility** - Full keyboard navigation ### Props Interface ```typescript interface RichInputProps { value?: string; onChange?: (value: string) => void; placeholder?: string; disabled?: boolean; maxLength?: number; allowedFormats?: ('bold' | 'italic' | 'link' | 'code')[]; enableEmoji?: boolean; enableMentions?: boolean; enableFileUpload?: boolean; autoSave?: boolean; autoSaveInterval?: number; className?: string; onSave?: (content: string) => void; onFileUpload?: (files: File[]) => Promise<string[]>; } ``` ### Usage Examples ```tsx import { RichInput } from '@/components/rich-input-system'; // Basic rich input <RichInput placeholder=\"What's on your mind?\" onChange={(value) => setContent(value)} /> // Rich input with all features <RichInput value={content} onChange={setContent} enableEmoji enableMentions enableFileUpload autoSave onSave={handleSave} onFileUpload={handleFileUpload} maxLength={5000} /> ``` ### Toolbar Options ```typescript const toolbarConfig = { bold: true, italic: true, underline: true, link: true, code: true, emoji: true, mention: true, upload: true }; ``` ## üîç Filter Bar Component Advanced filtering interface for search and data exploration. ### Features - **Multiple filter types** - Text, select, date, range - **Filter combinations** - AND/OR logic - **Saved filters** - User-defined filter presets - **Real-time filtering** - Live results as you type - **Export filters** - Share filter configurations - **Responsive design** - Mobile-friendly interface ### Props Interface ```typescript interface FilterBarProps { filters: FilterConfig[]; values: FilterValues; onChange: (values: FilterValues) => void; onApply?: (values: FilterValues) => void; onReset?: () => void; onSave?: (name: string, values: FilterValues) => void; savedFilters?: SavedFilter[]; loading?: boolean; className?: string; } interface FilterConfig { key: string; label: string; type: 'text' | 'select' | 'date' | 'range' | 'multiselect'; options?: FilterOption[]; placeholder?: string; required?: boolean; } ``` ### Usage Examples ```tsx import { FilterBar } from '@/components/filter-bar'; const filterConfig = [ { key: 'search', label: 'Search', type: 'text', placeholder: 'Search posts...' }, { key: 'category', label: 'Category', type: 'select', options: [ { value: 'tech', label: 'Technology' }, { value: 'design', label: 'Design' } ] }, { key: 'date', label: 'Date Range', type: 'date' } ]; <FilterBar filters={filterConfig} values={filterValues} onChange={setFilterValues} onApply={handleApplyFilters} savedFilters={userSavedFilters} />; ``` ## üß≠ Floating Toolbar Component Context-sensitive toolbar that appears when needed. ### Features - **Context-aware** - Shows relevant actions based on selection - **Positioning** - Smart positioning to avoid viewport edges - **Animations** - Smooth show/hide transitions - **Customizable** - Configurable actions and appearance - **Keyboard navigation** - Full keyboard support ### Props Interface ```typescript interface FloatingToolbarProps { visible: boolean; position: { x: number; y: number }; actions: ToolbarAction[]; onAction: (actionId: string) => void; className?: string; theme?: 'light' | 'dark'; size?: 'sm' | 'md' | 'lg'; } interface ToolbarAction { id: string; label: string; icon?: React.ReactNode; disabled?: boolean; shortcut?: string; group?: string; } ``` ### Usage Examples ```tsx import { FloatingToolbar } from '@/components/floating-toolbar'; const toolbarActions = [ { id: 'bold', label: 'Bold', icon: <BoldIcon />, shortcut: 'Ctrl+B' }, { id: 'italic', label: 'Italic', icon: <ItalicIcon />, shortcut: 'Ctrl+I' }, { id: 'link', label: 'Link', icon: <LinkIcon />, shortcut: 'Ctrl+K' } ]; <FloatingToolbar visible={showToolbar} position={toolbarPosition} actions={toolbarActions} onAction={handleToolbarAction} theme=\"dark\" />; ``` ## üìã Form Components Comprehensive form building components with validation. ### Form Component ```typescript interface FormProps { onSubmit: (data: FormData) => void; validation?: ValidationSchema; children: React.ReactNode; className?: string; } ``` ### FormField Component ```typescript interface FormFieldProps { name: string; label?: string; required?: boolean; error?: string; helperText?: string; children: React.ReactNode; } ``` ### Usage Examples ```tsx import { Form, FormField, Input, Button } from '@/components/ui'; <Form onSubmit={handleSubmit} validation={validationSchema}> <FormField name=\"email\" label=\"Email\" required> <Input type=\"email\" /> </FormField> <FormField name=\"password\" label=\"Password\" required> <Input type=\"password\" /> </FormField> <Button type=\"submit\">Submit</Button> </Form>; ``` ## üéØ Modal Components Flexible modal system for overlays and dialogs. ### Modal Component ```typescript interface ModalProps { isOpen: boolean; onClose: () => void; title?: string; size?: 'sm' | 'md' | 'lg' | 'xl' | 'full'; closeOnOverlayClick?: boolean; closeOnEsc?: boolean; children: React.ReactNode; } ``` ### Usage Examples ```tsx import { Modal, Button } from '@/components/ui'; <Modal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)} title=\"Confirm Action\" size=\"md\" > <p>Are you sure you want to delete this item?</p> <div className=\"flex gap-2 mt-4\"> <Button variant=\"destructive\" onClick={handleDelete}> Delete </Button> <Button variant=\"outline\" onClick={() => setIsModalOpen(false)}> Cancel </Button> </div> </Modal>; ``` ## üìä Data Display Components ### Table Component ```typescript interface TableProps<T> { data: T[]; columns: TableColumn<T>[]; loading?: boolean; pagination?: PaginationConfig; sorting?: SortingConfig; selection?: SelectionConfig; onRowClick?: (row: T) => void; } ``` ### Badge Component ```typescript interface BadgeProps { variant?: 'default' | 'success' | 'warning' | 'error' | 'info'; size?: 'sm' | 'md' | 'lg'; children: React.ReactNode; } ``` ### Avatar Component ```typescript interface AvatarProps { src?: string; alt?: string; size?: 'xs' | 'sm' | 'md' | 'lg' | 'xl'; fallback?: string; online?: boolean; } ``` ## üé® Styling Guidelines ### CSS-in-JS with Tailwind All components use Tailwind CSS for styling with CSS-in-JS for dynamic styles: ```tsx import { cn } from '@/lib/utils'; const Button = ({ variant, size, className, ...props }) => { return ( <button className={cn( 'inline-flex items-center justify-center rounded-md font-medium transition-colors', { 'bg-primary-500 text-white hover:bg-primary-600': variant === 'primary', 'bg-secondary-500 text-white hover:bg-secondary-600': variant === 'secondary', 'h-8 px-3 text-sm': size === 'sm', 'h-10 px-4 text-base': size === 'md', 'h-12 px-6 text-lg': size === 'lg' }, className )} {...props} /> ); }; ``` ### Component Variants Use consistent variant patterns across components: ```typescript type ComponentVariant = | 'primary' | 'secondary' | 'outline' | 'ghost' | 'destructive'; type ComponentSize = 'sm' | 'md' | 'lg' | 'xl'; ``` ## ‚ôø Accessibility All components follow WCAG 2.1 AA guidelines: ### Keyboard Navigation - **Tab navigation** - All interactive elements are keyboard accessible - **Arrow keys** - Navigate within component groups - **Enter/Space** - Activate buttons and controls - **Escape** - Close modals and dropdowns ### Screen Reader Support - **ARIA labels** - Descriptive labels for all elements - **ARIA roles** - Proper semantic roles - **ARIA states** - Dynamic state announcements - **Focus management** - Proper focus handling ### Color Contrast - **Text contrast** - Minimum 4.5:1 ratio for normal text - **UI contrast** - Minimum 3:1 ratio for UI elements - **Color independence** - Information not conveyed by color alone ## üß™ Testing ### Unit Tests ```typescript import { render, screen, fireEvent } from '@testing-library/react'; import { Button } from '@/components/ui/Button'; describe('Button', () => { test('renders with correct text', () => { render(<Button>Click me</Button>); expect(screen.getByText('Click me')).toBeInTheDocument(); }); test('calls onClick when clicked', () => { const handleClick = jest.fn(); render(<Button onClick={handleClick}>Click me</Button>); fireEvent.click(screen.getByText('Click me')); expect(handleClick).toHaveBeenCalledTimes(1); }); test('is disabled when disabled prop is true', () => { render(<Button disabled>Click me</Button>); expect(screen.getByText('Click me')).toBeDisabled(); }); }); ``` ### Visual Testing ```typescript import { ComponentStory, ComponentMeta } from '@storybook/react'; import { Button } from '@/components/ui/Button'; export default { title: 'UI/Button', component: Button, parameters: { docs: { description: { component: 'Flexible button component with multiple variants and states.' } } } } as ComponentMeta<typeof Button>; const Template: ComponentStory<typeof Button> = (args) => <Button {...args} />; export const Primary = Template.bind({}); Primary.args = { variant: 'primary', children: 'Primary Button' }; export const Secondary = Template.bind({}); Secondary.args = { variant: 'secondary', children: 'Secondary Button' }; ``` ## üì¶ Installation & Setup ### Install Dependencies ```bash npm install @idling/ui-components # or yarn add @idling/ui-components ``` ### Import Components ```tsx import { Button, Input, Card } from '@idling/ui-components'; import '@idling/ui-components/styles.css'; ``` ### Provider Setup ```tsx import { ThemeProvider } from '@idling/ui-components'; function App() { return ( <ThemeProvider theme=\"light\"> <YourApp /> </ThemeProvider> ); } ``` ## üîó Related Documentation - **[Design System](../design-system/)** - Complete design system documentation - **[Storybook](https://storybook.idling.app)** - Interactive component explorer - **[Testing Guide](../testing/)** - Component testing strategies - **[API Documentation](../../docs/api/)** - API integration examples --- **Last Updated**: {{ site.time | date: \"%B %d, %Y\" }} > **Component Library**: All components are built with TypeScript, tested with Jest, and documented with Storybook. They follow accessibility standards and design system guidelines. ",
    "./src/components/library/index.md": "--- layout: default title: 'Component Library' description: 'Complete component documentation and design system' permalink: /dev/components/library/ --- # üìö Component Library Complete documentation for all Idling.app UI components, design patterns, and implementation guidelines. ## üéØ Design Philosophy Our components follow these core principles: - **üåô Dark-Mode First** - Designed primarily for dark themes with elegant light mode support - **‚ôø Accessibility** - WCAG 2.1 AA compliant with full keyboard navigation - **üì± Responsive** - Mobile-first design that scales beautifully to desktop - **‚ö° Performance** - Optimized for speed with minimal bundle impact - **üß© Composable** - Modular design for flexible composition ## üìù Input & Editing Components ### Rich Input System **Location**: `/src/components/RichInput/` A sophisticated text editing component that transforms basic text input into an intelligent, interactive writing experience. **Key Features**: - Hashtag detection and enhancement - User mention system with search - URL auto-conversion with rich previews - Emoji support with picker - Image paste functionality - Floating toolbar for quick access - Smart search overlays **Usage Example**: ```jsx import { RichInput } from '@/components/RichInput'; <RichInput placeholder=\"What's on your mind?\" onSubmit={handleSubmit} enableHashtags={true} enableMentions={true} enableEmojis={true} />; ``` ### Filter Bar **Location**: `/src/components/FilterBar/` Advanced filtering interface with smart inputs and real-time search capabilities. **Key Features**: - Smart filter suggestions - Real-time search with debouncing - Filter pill management - Keyboard shortcuts - Customizable filter types **Usage Example**: ```jsx import { FilterBar } from '@/components/FilterBar'; <FilterBar filters={availableFilters} onFilterChange={handleFilterChange} placeholder=\"Search or filter...\" />; ``` ## üõ†Ô∏è Interactive Components ### Floating Toolbar **Location**: `/src/components/FloatingToolbar/` Context-sensitive toolbar that appears when editing rich text content. **Key Features**: - Context-aware positioning - Smooth animations - Customizable tool sets - Keyboard accessibility - Mobile-optimized touch targets ### Search Overlay **Location**: `/src/components/SearchOverlay/` Contextual search and suggestion overlay for rich text inputs. **Key Features**: - Trigger-based activation - Real-time search results - Keyboard navigation - Fuzzy matching - Customizable result templates ## üß≠ Navigation Components ### Navbar System **Location**: `/src/components/Navbar/` Sophisticated three-column navigation system with perfect center alignment. **Key Features**: - Perfect center alignment using CSS Grid - Three-column flex system - Responsive design - Modular architecture - Comprehensive accessibility support **Usage Example**: ```jsx import { Navbar } from '@/components/Navbar'; <Navbar leftContent={<NavigationLinks />} centerContent={<Brand />} rightContent={<UserControls />} />; ``` ## üé® Design System ### Color Palette ```css /Docker /app /bin /bin.usr-is-merged /boot /dev /etc /home /init /lib /lib.usr-is-merged /lib64 /lost+found /media /mnt /opt /proc /root /run /sbin /sbin.usr-is-merged /snap /srv /sys /tmp /usr /var /wslAOHfEh /wslFgieig /wslGiDGlg /wslHdGhjg /wslMEKAlg /wslOFllck /wslPFkBGh /wslaamLFh /wslajcDlg /wslcLijck /wsldLlHck /wsliANAGh /wsllKaoFh /wslmHHock /wsloLDFbk Brand Colors __mocks__/ commits/ community/ coverage/ custom-eslint-rules/ docker-postgres/ docs/ e2e/ jekyll/ logs/ migrations/ node_modules/ playwright-report/ public/ scripts/ src/ test-results/ updates/ --brand-primary: #edae49; /Docker /app /bin /bin.usr-is-merged /boot /dev /etc /home /init /lib /lib.usr-is-merged /lib64 /lost+found /media /mnt /opt /proc /root /run /sbin /sbin.usr-is-merged /snap /srv /sys /tmp /usr /var /wslAOHfEh /wslFgieig /wslGiDGlg /wslHdGhjg /wslMEKAlg /wslOFllck /wslPFkBGh /wslaamLFh /wslajcDlg /wslcLijck /wsldLlHck /wsliANAGh /wsllKaoFh /wslmHHock /wsloLDFbk Hunyadi Yellow __mocks__/ commits/ community/ coverage/ custom-eslint-rules/ docker-postgres/ docs/ e2e/ jekyll/ logs/ migrations/ node_modules/ playwright-report/ public/ scripts/ src/ test-results/ updates/ --brand-secondary: #f9df74; /Docker /app /bin /bin.usr-is-merged /boot /dev /etc /home /init /lib /lib.usr-is-merged /lib64 /lost+found /media /mnt /opt /proc /root /run /sbin /sbin.usr-is-merged /snap /srv /sys /tmp /usr /var /wslAOHfEh /wslFgieig /wslGiDGlg /wslHdGhjg /wslMEKAlg /wslOFllck /wslPFkBGh /wslaamLFh /wslajcDlg /wslcLijck /wsldLlHck /wsliANAGh /wsllKaoFh /wslmHHock /wsloLDFbk Jasmine __mocks__/ commits/ community/ coverage/ custom-eslint-rules/ docker-postgres/ docs/ e2e/ jekyll/ logs/ migrations/ node_modules/ playwright-report/ public/ scripts/ src/ test-results/ updates/ --brand-tertiary: #f9edcc; /Docker /app /bin /bin.usr-is-merged /boot /dev /etc /home /init /lib /lib.usr-is-merged /lib64 /lost+found /media /mnt /opt /proc /root /run /sbin /sbin.usr-is-merged /snap /srv /sys /tmp /usr /var /wslAOHfEh /wslFgieig /wslGiDGlg /wslHdGhjg /wslMEKAlg /wslOFllck /wslPFkBGh /wslaamLFh /wslajcDlg /wslcLijck /wsldLlHck /wsliANAGh /wsllKaoFh /wslmHHock /wsloLDFbk Cornsilk __mocks__/ commits/ community/ coverage/ custom-eslint-rules/ docker-postgres/ docs/ e2e/ jekyll/ logs/ migrations/ node_modules/ playwright-report/ public/ scripts/ src/ test-results/ updates/ --brand-quaternary: #ea2b1f; /Docker /app /bin /bin.usr-is-merged /boot /dev /etc /home /init /lib /lib.usr-is-merged /lib64 /lost+found /media /mnt /opt /proc /root /run /sbin /sbin.usr-is-merged /snap /srv /sys /tmp /usr /var /wslAOHfEh /wslFgieig /wslGiDGlg /wslHdGhjg /wslMEKAlg /wslOFllck /wslPFkBGh /wslaamLFh /wslajcDlg /wslcLijck /wsldLlHck /wsliANAGh /wsllKaoFh /wslmHHock /wsloLDFbk Chili Red __mocks__/ commits/ community/ coverage/ custom-eslint-rules/ docker-postgres/ docs/ e2e/ jekyll/ logs/ migrations/ node_modules/ playwright-report/ public/ scripts/ src/ test-results/ updates/ --brand-quinary: #61210f; /Docker /app /bin /bin.usr-is-merged /boot /dev /etc /home /init /lib /lib.usr-is-merged /lib64 /lost+found /media /mnt /opt /proc /root /run /sbin /sbin.usr-is-merged /snap /srv /sys /tmp /usr /var /wslAOHfEh /wslFgieig /wslGiDGlg /wslHdGhjg /wslMEKAlg /wslOFllck /wslPFkBGh /wslaamLFh /wslajcDlg /wslcLijck /wsldLlHck /wsliANAGh /wsllKaoFh /wslmHHock /wsloLDFbk Seal Brown __mocks__/ commits/ community/ coverage/ custom-eslint-rules/ docker-postgres/ docs/ e2e/ jekyll/ logs/ migrations/ node_modules/ playwright-report/ public/ scripts/ src/ test-results/ updates/ /Docker /app /bin /bin.usr-is-merged /boot /dev /etc /home /init /lib /lib.usr-is-merged /lib64 /lost+found /media /mnt /opt /proc /root /run /sbin /sbin.usr-is-merged /snap /srv /sys /tmp /usr /var /wslAOHfEh /wslFgieig /wslGiDGlg /wslHdGhjg /wslMEKAlg /wslOFllck /wslPFkBGh /wslaamLFh /wslajcDlg /wslcLijck /wsldLlHck /wsliANAGh /wsllKaoFh /wslmHHock /wsloLDFbk Semantic Colors __mocks__/ commits/ community/ coverage/ custom-eslint-rules/ docker-postgres/ docs/ e2e/ jekyll/ logs/ migrations/ node_modules/ playwright-report/ public/ scripts/ src/ test-results/ updates/ --color-success: #22c55e; --color-warning: #f59e0b; --color-error: #ef4444; --color-info: #3b82f6; ``` ### Typography ```css /Docker /app /bin /bin.usr-is-merged /boot /dev /etc /home /init /lib /lib.usr-is-merged /lib64 /lost+found /media /mnt /opt /proc /root /run /sbin /sbin.usr-is-merged /snap /srv /sys /tmp /usr /var /wslAOHfEh /wslFgieig /wslGiDGlg /wslHdGhjg /wslMEKAlg /wslOFllck /wslPFkBGh /wslaamLFh /wslajcDlg /wslcLijck /wsldLlHck /wsliANAGh /wsllKaoFh /wslmHHock /wsloLDFbk Primary Font __mocks__/ commits/ community/ coverage/ custom-eslint-rules/ docker-postgres/ docs/ e2e/ jekyll/ logs/ migrations/ node_modules/ playwright-report/ public/ scripts/ src/ test-results/ updates/ font-family: 'Fira Code VF', 'SF Mono', Monaco, Inconsolata, 'Roboto Mono', monospace; /Docker /app /bin /bin.usr-is-merged /boot /dev /etc /home /init /lib /lib.usr-is-merged /lib64 /lost+found /media /mnt /opt /proc /root /run /sbin /sbin.usr-is-merged /snap /srv /sys /tmp /usr /var /wslAOHfEh /wslFgieig /wslGiDGlg /wslHdGhjg /wslMEKAlg /wslOFllck /wslPFkBGh /wslaamLFh /wslajcDlg /wslcLijck /wsldLlHck /wsliANAGh /wsllKaoFh /wslmHHock /wsloLDFbk Font Weights __mocks__/ commits/ community/ coverage/ custom-eslint-rules/ docker-postgres/ docs/ e2e/ jekyll/ logs/ migrations/ node_modules/ playwright-report/ public/ scripts/ src/ test-results/ updates/ --font-weight-light: 300; --font-weight-regular: 400; --font-weight-medium: 500; --font-weight-semibold: 600; --font-weight-bold: 700; ``` ### Spacing System ```css /Docker /app /bin /bin.usr-is-merged /boot /dev /etc /home /init /lib /lib.usr-is-merged /lib64 /lost+found /media /mnt /opt /proc /root /run /sbin /sbin.usr-is-merged /snap /srv /sys /tmp /usr /var /wslAOHfEh /wslFgieig /wslGiDGlg /wslHdGhjg /wslMEKAlg /wslOFllck /wslPFkBGh /wslaamLFh /wslajcDlg /wslcLijck /wsldLlHck /wsliANAGh /wsllKaoFh /wslmHHock /wsloLDFbk Spacing Scale __mocks__/ commits/ community/ coverage/ custom-eslint-rules/ docker-postgres/ docs/ e2e/ jekyll/ logs/ migrations/ node_modules/ playwright-report/ public/ scripts/ src/ test-results/ updates/ --space-xs: 0.25rem; /Docker /app /bin /bin.usr-is-merged /boot /dev /etc /home /init /lib /lib.usr-is-merged /lib64 /lost+found /media /mnt /opt /proc /root /run /sbin /sbin.usr-is-merged /snap /srv /sys /tmp /usr /var /wslAOHfEh /wslFgieig /wslGiDGlg /wslHdGhjg /wslMEKAlg /wslOFllck /wslPFkBGh /wslaamLFh /wslajcDlg /wslcLijck /wsldLlHck /wsliANAGh /wsllKaoFh /wslmHHock /wsloLDFbk 4px __mocks__/ commits/ community/ coverage/ custom-eslint-rules/ docker-postgres/ docs/ e2e/ jekyll/ logs/ migrations/ node_modules/ playwright-report/ public/ scripts/ src/ test-results/ updates/ --space-sm: 0.5rem; /Docker /app /bin /bin.usr-is-merged /boot /dev /etc /home /init /lib /lib.usr-is-merged /lib64 /lost+found /media /mnt /opt /proc /root /run /sbin /sbin.usr-is-merged /snap /srv /sys /tmp /usr /var /wslAOHfEh /wslFgieig /wslGiDGlg /wslHdGhjg /wslMEKAlg /wslOFllck /wslPFkBGh /wslaamLFh /wslajcDlg /wslcLijck /wsldLlHck /wsliANAGh /wsllKaoFh /wslmHHock /wsloLDFbk 8px __mocks__/ commits/ community/ coverage/ custom-eslint-rules/ docker-postgres/ docs/ e2e/ jekyll/ logs/ migrations/ node_modules/ playwright-report/ public/ scripts/ src/ test-results/ updates/ --space-md: 1rem; /Docker /app /bin /bin.usr-is-merged /boot /dev /etc /home /init /lib /lib.usr-is-merged /lib64 /lost+found /media /mnt /opt /proc /root /run /sbin /sbin.usr-is-merged /snap /srv /sys /tmp /usr /var /wslAOHfEh /wslFgieig /wslGiDGlg /wslHdGhjg /wslMEKAlg /wslOFllck /wslPFkBGh /wslaamLFh /wslajcDlg /wslcLijck /wsldLlHck /wsliANAGh /wsllKaoFh /wslmHHock /wsloLDFbk 16px __mocks__/ commits/ community/ coverage/ custom-eslint-rules/ docker-postgres/ docs/ e2e/ jekyll/ logs/ migrations/ node_modules/ playwright-report/ public/ scripts/ src/ test-results/ updates/ --space-lg: 1.5rem; /Docker /app /bin /bin.usr-is-merged /boot /dev /etc /home /init /lib /lib.usr-is-merged /lib64 /lost+found /media /mnt /opt /proc /root /run /sbin /sbin.usr-is-merged /snap /srv /sys /tmp /usr /var /wslAOHfEh /wslFgieig /wslGiDGlg /wslHdGhjg /wslMEKAlg /wslOFllck /wslPFkBGh /wslaamLFh /wslajcDlg /wslcLijck /wsldLlHck /wsliANAGh /wsllKaoFh /wslmHHock /wsloLDFbk 24px __mocks__/ commits/ community/ coverage/ custom-eslint-rules/ docker-postgres/ docs/ e2e/ jekyll/ logs/ migrations/ node_modules/ playwright-report/ public/ scripts/ src/ test-results/ updates/ --space-xl: 2rem; /Docker /app /bin /bin.usr-is-merged /boot /dev /etc /home /init /lib /lib.usr-is-merged /lib64 /lost+found /media /mnt /opt /proc /root /run /sbin /sbin.usr-is-merged /snap /srv /sys /tmp /usr /var /wslAOHfEh /wslFgieig /wslGiDGlg /wslHdGhjg /wslMEKAlg /wslOFllck /wslPFkBGh /wslaamLFh /wslajcDlg /wslcLijck /wsldLlHck /wsliANAGh /wsllKaoFh /wslmHHock /wsloLDFbk 32px __mocks__/ commits/ community/ coverage/ custom-eslint-rules/ docker-postgres/ docs/ e2e/ jekyll/ logs/ migrations/ node_modules/ playwright-report/ public/ scripts/ src/ test-results/ updates/ --space-2xl: 3rem; /Docker /app /bin /bin.usr-is-merged /boot /dev /etc /home /init /lib /lib.usr-is-merged /lib64 /lost+found /media /mnt /opt /proc /root /run /sbin /sbin.usr-is-merged /snap /srv /sys /tmp /usr /var /wslAOHfEh /wslFgieig /wslGiDGlg /wslHdGhjg /wslMEKAlg /wslOFllck /wslPFkBGh /wslaamLFh /wslajcDlg /wslcLijck /wsldLlHck /wsliANAGh /wsllKaoFh /wslmHHock /wsloLDFbk 48px __mocks__/ commits/ community/ coverage/ custom-eslint-rules/ docker-postgres/ docs/ e2e/ jekyll/ logs/ migrations/ node_modules/ playwright-report/ public/ scripts/ src/ test-results/ updates/ --space-3xl: 4rem; /Docker /app /bin /bin.usr-is-merged /boot /dev /etc /home /init /lib /lib.usr-is-merged /lib64 /lost+found /media /mnt /opt /proc /root /run /sbin /sbin.usr-is-merged /snap /srv /sys /tmp /usr /var /wslAOHfEh /wslFgieig /wslGiDGlg /wslHdGhjg /wslMEKAlg /wslOFllck /wslPFkBGh /wslaamLFh /wslajcDlg /wslcLijck /wsldLlHck /wsliANAGh /wsllKaoFh /wslmHHock /wsloLDFbk 64px __mocks__/ commits/ community/ coverage/ custom-eslint-rules/ docker-postgres/ docs/ e2e/ jekyll/ logs/ migrations/ node_modules/ playwright-report/ public/ scripts/ src/ test-results/ updates/ ``` ## üîß Component Guidelines ### Component Structure ``` ComponentName/ ‚îú‚îÄ‚îÄ index.ts # Export file ‚îú‚îÄ‚îÄ ComponentName.tsx # Main component ‚îú‚îÄ‚îÄ ComponentName.module.css # Component styles ‚îú‚îÄ‚îÄ ComponentName.test.tsx # Unit tests ‚îú‚îÄ‚îÄ ComponentName.stories.tsx # Storybook stories ‚îî‚îÄ‚îÄ types.ts # Type definitions ``` ### Naming Conventions - **Components**: PascalCase (`RichInput`, `FilterBar`) - **Props**: camelCase (`onSubmit`, `enableHashtags`) - **CSS Classes**: kebab-case (`rich-input`, `filter-bar`) - **Files**: PascalCase for components, camelCase for utilities ### Accessibility Requirements - **Keyboard Navigation**: All interactive elements must be keyboard accessible - **Screen Readers**: Proper ARIA labels and roles - **Focus Management**: Visible focus indicators and logical tab order - **Color Contrast**: Minimum 4.5:1 ratio for text - **Responsive Design**: Works on all screen sizes ## üß™ Testing Guidelines ### Unit Tests ```jsx import { render, screen, fireEvent } from '@testing-library/react'; import { RichInput } from './RichInput'; describe('RichInput', () => { it('should render with placeholder', () => { render(<RichInput placeholder=\"Type here...\" />); expect(screen.getByPlaceholderText('Type here...')).toBeInTheDocument(); }); it('should handle hashtag input', () => { const onHashtag = jest.fn(); render(<RichInput onHashtag={onHashtag} />); const input = screen.getByRole('textbox'); fireEvent.change(input, { target: { value: '#test' } }); expect(onHashtag).toHaveBeenCalledWith('test'); }); }); ``` ### Visual Testing - Use Storybook for component documentation - Include all component states and variants - Test responsive behavior - Verify accessibility features ## üìö Resources ### Documentation - **[Storybook](http://localhost:6006)** - Interactive component documentation - **[Figma Design System](https://figma.com/idling-app)** - Design specifications - **[Accessibility Guide](../testing/accessibility/)** - WCAG compliance testing ### Tools - **React DevTools** - Component debugging - **Accessibility Insights** - Accessibility testing - **Lighthouse** - Performance auditing ## üöÄ Getting Started 1. **Browse Components** - Explore available components in Storybook 2. **Check Design System** - Understand colors, typography, and spacing 3. **Read Guidelines** - Follow component structure and naming conventions 4. **Write Tests** - Ensure accessibility and functionality 5. **Update Documentation** - Keep Storybook stories current ## üîó Related Sections - **[Rich Input System](../rich-input/)** - Flagship component details - **[Testing](../../testing/)** - Testing strategies and tools - **[Tools](../../tools/)** - Development environment setup --- _Component library is continuously updated. Last updated: {{ site.time | date: \"%B %d, %Y\" }}_ ",
    "./src/components/navbar/index.md": "--- layout: default title: 'Navbar Component' description: 'Three-column flex navbar system with perfect center alignment for brand and navigation' permalink: /components/navbar/ parent: Components mermaid: true categories: [components, navigation, layout] tags: [navbar, header, navigation, three-column, flex, grid, responsive] --- # Navbar Component System ## Overview The Navbar component system provides a sophisticated three-column layout that ensures perfect centering of the brand (avatar + \"Idling.app\" text) while providing flexible space for navigation links and authentication controls. This system was specifically designed to solve the challenge of maintaining true center alignment regardless of content length in the side columns. ## üéØ Key Features - **Perfect Center Alignment** - Brand section always centered using CSS Grid - **Three-Column Flex System** - Left navigation, center brand, right authentication - **Responsive Design** - Adapts gracefully from desktop to mobile - **Modular Architecture** - Composable components for flexibility - **Accessibility First** - Full keyboard navigation and screen reader support - **Performance Optimized** - Minimal DOM manipulation and efficient styling ## üèóÔ∏è Architecture Overview The navbar uses a hybrid approach combining CSS Grid for the main layout with Flexbox for individual column content alignment: ```mermaid graph LR subgraph \"Three-Column Header Layout\" A[\"Left Column<br/>Navigation Links<br/>(NavPaths)<br/>justify: flex-start\"] B[\"Center Column<br/>Avatar + Idling.app<br/>(Brand)<br/>justify: center<br/>grid-column: 2\"] C[\"Right Column<br/>Auth/User Info<br/>(NavAuth)<br/>justify: flex-end\"] end subgraph \"CSS Grid Implementation\" D[\"grid-template-columns:<br/>1fr auto 1fr\"] E[\"Left: 1fr<br/>(flexible)\"] F[\"Center: auto<br/>(content-sized)\"] G[\"Right: 1fr<br/>(flexible)\"] end subgraph \"Responsive Behavior\" H[\"Desktop & Tablet<br/>768px+<br/>Grid Layout\"] I[\"Mobile<br/>480px-<br/>Stacked Layout\"] end A --> E B --> F C --> G D --> H H --> I ``` ## üß© Component Structure The navbar system consists of several modular components working together: ### Core Components ```typescript // Main Navbar wrapper <Navbar> <Navbar.Body> <Navbar.Content justify=\"flex-start\"> // Left column content </Navbar.Content> <Navbar.Content justify=\"center\"> <Navbar.Brand /> // Center brand content </Navbar.Content> <Navbar.Content justify=\"flex-end\"> // Right column content </Navbar.Content> </Navbar.Body> </Navbar> ``` ### Component Hierarchy ```mermaid graph TD A[Navbar] --> B[Navbar.Body] B --> C[Navbar.Content - Left] B --> D[Navbar.Content - Center] B --> E[Navbar.Content - Right] C --> F[NavPaths] D --> G[Navbar.Brand] D --> H[InstantLink] E --> I[Navbar.Item] I --> J[NavAuth] G --> K[AuthAvatar] H --> L[h1 - Idling.app] ``` ## üì± Responsive Design Strategy The navbar adapts across three main breakpoints: ### Desktop & Large Tablets (768px+) - **Layout**: CSS Grid three-column system - **Spacing**: `grid-template-columns: 1fr auto 1fr` - **Alignment**: Perfect center alignment maintained - **Gap**: `1rem` between columns ### Small Tablets & Large Mobile (480px - 768px) - **Layout**: Maintains grid system with reduced spacing - **Spacing**: Compressed gaps (`0.5rem`) - **Content**: Some text may be abbreviated - **Navigation**: All elements remain visible ### Mobile Phones (< 480px) - **Layout**: Switches to vertical stack (`flex-direction: column`) - **Order**: Brand first, navigation second, auth third - **Alignment**: All sections centered - **Spacing**: Minimal gaps for space efficiency ## üé® CSS Implementation ### Grid Layout Foundation ```css .nav__content { display: grid; grid-template-columns: 1fr auto 1fr; width: 100%; align-items: center; margin: 1rem 0; gap: 1rem; } ``` ### Column-Specific Styling ```css /Docker /app /bin /bin.usr-is-merged /boot /dev /etc /home /init /lib /lib.usr-is-merged /lib64 /lost+found /media /mnt /opt /proc /root /run /sbin /sbin.usr-is-merged /snap /srv /sys /tmp /usr /var /wslAOHfEh /wslFgieig /wslGiDGlg /wslHdGhjg /wslMEKAlg /wslOFllck /wslPFkBGh /wslaamLFh /wslajcDlg /wslcLijck /wsldLlHck /wsliANAGh /wsllKaoFh /wslmHHock /wsloLDFbk Left column - Navigation links __mocks__/ commits/ community/ coverage/ custom-eslint-rules/ docker-postgres/ docs/ e2e/ jekyll/ logs/ migrations/ node_modules/ playwright-report/ public/ scripts/ src/ test-results/ updates/ .nav__links--as-flex-end { display: flex; justify-content: flex-start; align-items: center; gap: 0.5rem; } /Docker /app /bin /bin.usr-is-merged /boot /dev /etc /home /init /lib /lib.usr-is-merged /lib64 /lost+found /media /mnt /opt /proc /root /run /sbin /sbin.usr-is-merged /snap /srv /sys /tmp /usr /var /wslAOHfEh /wslFgieig /wslGiDGlg /wslHdGhjg /wslMEKAlg /wslOFllck /wslPFkBGh /wslaamLFh /wslajcDlg /wslcLijck /wsldLlHck /wsliANAGh /wsllKaoFh /wslmHHock /wsloLDFbk Center column - Brand __mocks__/ commits/ community/ coverage/ custom-eslint-rules/ docker-postgres/ docs/ e2e/ jekyll/ logs/ migrations/ node_modules/ playwright-report/ public/ scripts/ src/ test-results/ updates/ .nav__brand { display: flex; flex-direction: column; justify-content: center; align-items: center; grid-column: 2; /Docker /app /bin /bin.usr-is-merged /boot /dev /etc /home /init /lib /lib.usr-is-merged /lib64 /lost+found /media /mnt /opt /proc /root /run /sbin /sbin.usr-is-merged /snap /srv /sys /tmp /usr /var /wslAOHfEh /wslFgieig /wslGiDGlg /wslHdGhjg /wslMEKAlg /wslOFllck /wslPFkBGh /wslaamLFh /wslajcDlg /wslcLijck /wsldLlHck /wsliANAGh /wsllKaoFh /wslmHHock /wsloLDFbk Ensures center positioning __mocks__/ commits/ community/ coverage/ custom-eslint-rules/ docker-postgres/ docs/ e2e/ jekyll/ logs/ migrations/ node_modules/ playwright-report/ public/ scripts/ src/ test-results/ updates/ } /Docker /app /bin /bin.usr-is-merged /boot /dev /etc /home /init /lib /lib.usr-is-merged /lib64 /lost+found /media /mnt /opt /proc /root /run /sbin /sbin.usr-is-merged /snap /srv /sys /tmp /usr /var /wslAOHfEh /wslFgieig /wslGiDGlg /wslHdGhjg /wslMEKAlg /wslOFllck /wslPFkBGh /wslaamLFh /wslajcDlg /wslcLijck /wsldLlHck /wsliANAGh /wsllKaoFh /wslmHHock /wsloLDFbk Right column - Authentication __mocks__/ commits/ community/ coverage/ custom-eslint-rules/ docker-postgres/ docs/ e2e/ jekyll/ logs/ migrations/ node_modules/ playwright-report/ public/ scripts/ src/ test-results/ updates/ .nav--as-flex-end { display: flex; justify-content: flex-end; align-items: center; gap: 0.5rem; } ``` ### Responsive Breakpoints ```css /Docker /app /bin /bin.usr-is-merged /boot /dev /etc /home /init /lib /lib.usr-is-merged /lib64 /lost+found /media /mnt /opt /proc /root /run /sbin /sbin.usr-is-merged /snap /srv /sys /tmp /usr /var /wslAOHfEh /wslFgieig /wslGiDGlg /wslHdGhjg /wslMEKAlg /wslOFllck /wslPFkBGh /wslaamLFh /wslajcDlg /wslcLijck /wsldLlHck /wsliANAGh /wsllKaoFh /wslmHHock /wsloLDFbk Tablet adjustments __mocks__/ commits/ community/ coverage/ custom-eslint-rules/ docker-postgres/ docs/ e2e/ jekyll/ logs/ migrations/ node_modules/ playwright-report/ public/ scripts/ src/ test-results/ updates/ @media (max-width: 768px) { .nav__content { grid-template-columns: 1fr auto 1fr; gap: 0.5rem; } } /Docker /app /bin /bin.usr-is-merged /boot /dev /etc /home /init /lib /lib.usr-is-merged /lib64 /lost+found /media /mnt /opt /proc /root /run /sbin /sbin.usr-is-merged /snap /srv /sys /tmp /usr /var /wslAOHfEh /wslFgieig /wslGiDGlg /wslHdGhjg /wslMEKAlg /wslOFllck /wslPFkBGh /wslaamLFh /wslajcDlg /wslcLijck /wsldLlHck /wsliANAGh /wsllKaoFh /wslmHHock /wsloLDFbk Mobile stack layout __mocks__/ commits/ community/ coverage/ custom-eslint-rules/ docker-postgres/ docs/ e2e/ jekyll/ logs/ migrations/ node_modules/ playwright-report/ public/ scripts/ src/ test-results/ updates/ @media (max-width: 480px) { .nav__content { display: flex; flex-direction: column; gap: 0.5rem; } .nav__brand { order: 1; } .nav__links--as-flex-end { order: 2; } .nav--as-flex-end { order: 3; } } ``` ## üîß NavbarContent Component The `NavbarContent` component provides flexible justify-content options: ### Available Justify Options ```typescript type JustifyOptions = | 'center' | 'end' | 'flex-end' | 'flex-start' | 'left' | 'normal' | 'right' | 'space-around' | 'space-between' | 'space-evenly' | 'start' | 'stretch' | 'inherit' | 'initial' | 'revert' | 'revert-layer'; ``` ### CSS Class Generation ```css .navbar__content--jc-center { justify-content: center; } .navbar__content--jc-flex-start { justify-content: flex-start; } .navbar__content--jc-flex-end { justify-content: flex-end; } .navbar__content--jc-space-between { justify-content: space-between; } /Docker /app /bin /bin.usr-is-merged /boot /dev /etc /home /init /lib /lib.usr-is-merged /lib64 /lost+found /media /mnt /opt /proc /root /run /sbin /sbin.usr-is-merged /snap /srv /sys /tmp /usr /var /wslAOHfEh /wslFgieig /wslGiDGlg /wslHdGhjg /wslMEKAlg /wslOFllck /wslPFkBGh /wslaamLFh /wslajcDlg /wslcLijck /wsldLlHck /wsliANAGh /wsllKaoFh /wslmHHock /wsloLDFbk ... and all other justify-content values __mocks__/ commits/ community/ coverage/ custom-eslint-rules/ docker-postgres/ docs/ e2e/ jekyll/ logs/ migrations/ node_modules/ playwright-report/ public/ scripts/ src/ test-results/ updates/ ``` ## üé≠ Brand Section Details The center brand section combines two key elements: ### Navbar.Brand (Avatar) - **Authenticated Users**: Shows user's profile avatar - **Unauthenticated Users**: Shows default avatar with user icon - **Loading State**: Animated placeholder during session loading - **Hover Effects**: Subtle scale and shadow animations ### Idling.app Title - **Typography**: Large, prominent heading - **Link**: Navigates to home page - **Hover**: Color transition and underline effects - **Accessibility**: Proper heading structure and link labeling ## üß™ Testing Coverage The navbar system includes comprehensive test coverage: ### Unit Tests - ‚úÖ **Navbar.tsx** - Component rendering and props - ‚úÖ **NavbarContent.tsx** - Justify-content class generation - ‚úÖ **NavbarBrand.tsx** - Avatar states and authentication - ‚úÖ **NavbarBody.tsx** - Container functionality - ‚úÖ **NavbarItem.tsx** - Item rendering and accessibility ### Integration Tests - ‚úÖ **Nav.tsx** - Complete navigation assembly - ‚úÖ **Header.tsx** - Full header component integration ### Test Results ```bash ‚úì 16 navbar component tests passing ‚úì 3 nav component tests passing ‚úì 4 header component tests passing ‚úì 23 total tests covering navbar system ``` ## üöÄ Performance Considerations ### CSS Grid vs Flexbox Choice - **Grid**: Used for main three-column layout (better for 2D layouts) - **Flexbox**: Used within columns for content alignment (better for 1D layouts) - **Hybrid Approach**: Leverages strengths of both layout systems ### Responsive Strategy - **Mobile-First**: Base styles optimized for mobile - **Progressive Enhancement**: Desktop features added via media queries - **Minimal Reflows**: Layout changes minimize DOM manipulation ### Animation Performance - **Transform-Based**: Uses `transform` for hover effects (GPU accelerated) - **Transition Properties**: Specific properties animated, not `all` - **Reduced Motion**: Respects user's motion preferences ## üîó Related Components ### Direct Dependencies - **[AuthAvatar](/components/auth-avatar/)** - User profile avatar display - **NavPaths** - Navigation link management - **NavAuth** - Authentication controls and user info ### Integration Points - **[Header](/components/header/)** - Parent container component - **InstantLink** - Optimized navigation links - **Font Picker** - Typography customization ## üìã Implementation Checklist When implementing the navbar system: - [ ] **CSS Grid Support** - Ensure `grid-template-columns: 1fr auto 1fr` - [ ] **Responsive Breakpoints** - Test all three breakpoint behaviors - [ ] **Brand Centering** - Verify center column uses `grid-column: 2` - [ ] **Justify Classes** - Include all `navbar__content--jc-*` classes - [ ] **Accessibility** - Test keyboard navigation and screen readers - [ ] **Performance** - Verify smooth animations and transitions ## üêõ Common Issues & Solutions ### Brand Not Perfectly Centered **Problem**: Brand appears off-center when side content is unequal **Solution**: Ensure `grid-column: 2` is applied to center column ### Mobile Layout Breaking **Problem**: Grid layout doesn't work well on small screens **Solution**: Switch to `flex-direction: column` below 480px ### Justify Classes Missing **Problem**: NavbarContent justify prop not working **Solution**: Ensure all `navbar__content--jc-*` classes are defined ## üìö Further Reading - **[CSS Grid Layout Guide](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout)** - **[Flexbox Guide](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout)** - **[Responsive Design Principles](https://web.dev/responsive-web-design-basics/)** --- _This documentation covers the complete navbar system implementation. For specific component APIs, see individual component documentation pages._ **Last Updated**: {{ site.time | date: \"%B %d, %Y\" }} ",
    "./src/components/rich-input-system/index.md": "--- layout: default title: 'Rich Input System' description: 'Comprehensive documentation for the Rich Input text editing component used throughout the application' permalink: /components/rich-input-system/ parent: Components date: 2025-01-28 categories: [components, text-editing, user-interface] tags: [rich-input, text-editor, hashtags, mentions, emojis, url-conversion, forms] toc: true --- # Rich Input System - Business Requirements Document ## Executive Summary The Rich Input System is a sophisticated text editing component that transforms basic text input into an intelligent, interactive writing experience. It automatically detects and enhances user content with visual pills for hashtags, user mentions, emojis, and URLs while providing real-time suggestions and auto-completion features. **Key Business Value:** - **Enhanced User Experience**: Users can create rich, interactive content without learning complex syntax - **Improved Content Discoverability**: Automatic hashtag and mention detection enables better content categorization and user connections - **Increased Engagement**: Visual feedback and suggestions encourage users to create more structured, searchable content - **Reduced Friction**: Auto-conversion of URLs and intelligent suggestions minimize manual formatting work ## System Overview ```mermaid graph TB subgraph \"User Interface Layer\" A[Raw Text Input] --> B[Rich Input Adapter] B --> C[Rich Input Engine] B --> D[Floating Toolbar] B --> E[Search Overlay] end subgraph \"Processing Layer\" C --> F[Content Parsers] F --> G[Hashtag Parser] F --> H[Mention Parser] F --> I[URL Parser] F --> J[Emoji Parser] F --> K[Image Parser] end subgraph \"Enhancement Layer\" G --> L[Visual Pills] H --> L I --> M[URL Auto-conversion] J --> N[Emoji Rendering] K --> O[Image Embedding] end subgraph \"Data Layer\" P[Hashtag Database] --> G Q[User Database] --> H R[Emoji Database] --> J S[URL Configuration] --> I end L --> T[Enhanced Content Display] M --> T N --> T O --> T ``` ## Business Context ### Current Usage in Application The Rich Input System is currently deployed across multiple critical user interfaces: 1. **Post Creation Forms** - Main content creation interface 2. **Reply Forms** - Comment and response creation 3. **Filter Inputs** - Smart search and filtering interfaces 4. **Edit Forms** - Content modification interfaces ### User Personas #### Primary Users - **Content Creators**: Users writing posts, replies, and comments - **Community Members**: Users engaging with hashtags and mentions - **Casual Users**: Users who benefit from simplified text formatting #### Secondary Users - **Moderators**: Users who need to quickly filter and search content - **Administrators**: Users managing content and user interactions ## Functional Requirements ### 1. Core Text Input Capabilities #### 1.1 Basic Text Entry - **Requirement**: Users must be able to enter plain text in both single-line and multi-line modes - **Acceptance Criteria**: - Support for standard keyboard input - Copy/paste functionality - Undo/redo operations - Character count tracking with limits (255 chars for titles, 1000 for content) #### 1.2 View Modes - **Requirement**: Users must be able to switch between \"Preview\" and \"Raw\" modes - **Preview Mode**: Shows enhanced content with visual pills and formatting - **Raw Mode**: Shows plain text for direct editing of syntax - **Acceptance Criteria**: - Seamless switching between modes without data loss - Raw mode shows actual syntax (e.g., `@[username|userId|author]`) - Preview mode shows user-friendly display (e.g., `@username`) ### 2. Intelligent Content Enhancement #### 2.1 Hashtag Detection and Enhancement ```mermaid sequenceDiagram participant U as User participant RI as Rich Input participant HP as Hashtag Parser participant DB as Database participant UI as User Interface U->>RI: Types #35;javascript RI->>HP: Detect hashtag pattern HP->>DB: Search existing hashtags DB-->>HP: Return matches HP-->>RI: Provide suggestions RI->>UI: Show suggestion overlay U->>UI: Select suggestion or continue typing UI->>RI: Apply hashtag pill formatting RI->>UI: Display visual pill ``` **Business Rules**: - Hashtags must start with `#` followed by alphanumeric characters, hyphens, or underscores - Hashtags are case-insensitive for matching but preserve original case for display - Maximum hashtag length: 50 characters - Real-time suggestions appear after typing 2+ characters - Existing hashtags are prioritized in suggestions **Acceptance Criteria**: - Automatic detection of `#word` patterns during typing - Visual pill rendering with distinctive styling - Click-to-filter functionality in appropriate contexts - Search suggestions with usage counts - Prevention of duplicate hashtag pills in single input #### 2.2 User Mention Detection and Enhancement **Business Rules**: - Mentions use format `@[username|userId|filterType]` internally - Display format shows only `@username` to users - Support for both \"author\" and \"mentions\" filter types - Real-time user search with profile pictures - Validation against active user database **Acceptance Criteria**: - Automatic detection of `@username` patterns - User search overlay with profile pictures and display names - Distinction between author mentions and general mentions - Prevention of mentioning non-existent users - Visual indication of mention type (author vs. general) #### 2.3 URL Auto-conversion ```mermaid flowchart TD A[User pastes/types URL] --> B{Valid URL format?} B -->|No| C[Treat as plain text] B -->|Yes| D{Recognized domain?} D -->|No| E[Basic link formatting] D -->|Yes| F[Check domain configuration] F --> G{Auto-conversion enabled?} G -->|No| E G -->|Yes| H[Create URL pill] H --> I[Apply behavior setting] I --> J[Display enhanced URL] ``` **Supported URL Behaviors**: - **Link**: Standard clickable link (default) - **Embed**: Rich preview/embedding for supported platforms - **Preview**: Thumbnail and metadata display - **Download**: Direct download link formatting **Business Rules**: - Auto-conversion triggers on space/enter after valid URL - Supported domains: YouTube, Twitter, GitHub, common image hosts - Users can modify behavior via inline controls - URL validation prevents malicious/invalid links - Fallback to basic link for unsupported domains #### 2.4 Emoji Support **Business Rules**: - Support for Unicode emojis and custom emoji sets - Trigger character `:` followed by emoji name - Real-time emoji search and suggestions - Category-based emoji organization - Accessibility support with alt text **Acceptance Criteria**: - Emoji picker overlay with search functionality - Category tabs (smileys, objects, nature, etc.) - Keyboard navigation support - Recent/frequently used emoji tracking - Proper rendering across different devices/browsers #### 2.5 Image Paste Support **Business Rules**: - Direct paste from clipboard for image files - Supported formats: PNG, JPG, GIF, WebP - Maximum file size: 10MB per image - Automatic upload to temporary storage - Conversion to permanent storage on form submission **Acceptance Criteria**: - Drag and drop image support - Paste from clipboard functionality - Progress indication during upload - Error handling for unsupported formats/sizes - Preview generation for pasted images ### 3. Interactive Features #### 3.1 Floating Toolbar ```mermaid graph LR A[Input Focus] --> B[Show Floating Toolbar] B --> C[Hashtag Button] B --> D[Mention Button] B --> E[Emoji Button] C --> F[Hashtag Search Panel] D --> G[User Search Panel] E --> H[Emoji Picker Panel] F --> I[Insert Hashtag] G --> J[Insert Mention] H --> K[Insert Emoji] ``` **Business Rules**: - Toolbar appears on input focus - Position: Top-right corner of input area - Remains visible during user interaction - Disappears on blur with 150ms delay - Responsive positioning on mobile devices **Acceptance Criteria**: - Smooth show/hide animations - Proper z-index layering - Touch-friendly button sizes on mobile - Keyboard accessibility - Integration with search overlays #### 3.2 Search Overlay System **Business Rules**: - Triggered by typing `#`, `@`, or `:` characters - Minimum 2 characters required for search - Maximum 10 suggestions displayed initially - Pagination for additional results - Real-time search with 300ms debounce **Acceptance Criteria**: - Contextual positioning relative to cursor - Keyboard navigation (arrow keys, enter, escape) - Mouse/touch interaction support - Loading states and error handling - Proper overlay dismissal on outside clicks ### 4. Form Integration #### 4.1 Submission Forms **Primary Use Cases**: - **Post Creation**: Title and content fields with full rich input features - **Reply Creation**: Content field with automatic mention of parent author - **Post Editing**: Pre-populated fields with existing rich content - **Comment Forms**: Streamlined interface for quick responses **Business Rules**: - Character limits enforced in real-time - Content validation before submission - Temporary image processing during submission - Automatic tag extraction from title and content - Form state preservation during navigation #### 4.2 Filter and Search Forms **Primary Use Cases**: - **Smart Filter Input**: Convert user input to structured filters - **Search Interface**: Enhanced search with hashtag and mention support - **Custom Filter Creation**: Guided filter building with suggestions **Business Rules**: - Real-time filter construction from input - Visual representation of active filters - Filter combination and removal capabilities - Search history and suggestions - Export/import filter configurations ## User Experience Requirements ### 1. Performance Standards ```mermaid graph TD A[Performance Requirements] --> B[Response Time] A --> C[Resource Usage] A --> D[Scalability] B --> B1[Typing Response: <50ms] B --> B2[Search Results: <300ms] B --> B3[Image Upload: <5s] C --> C1[Memory: <50MB per instance] C --> C2[CPU: <10% during typing] C --> C3[Network: Minimal requests] D --> D1[Concurrent Users: 1000+] D --> D2[Content Length: Up to 10,000 chars] D --> D3[Suggestion Database: 100,000+ items] ``` **Critical Performance Metrics**: - **Typing Latency**: Maximum 50ms delay between keypress and visual feedback - **Search Response**: Maximum 300ms for suggestion results - **Memory Usage**: Maximum 50MB per rich input instance - **Rendering Performance**: 60fps during animations and interactions ### 2. Accessibility Requirements **WCAG 2.1 AA Compliance**: - **Keyboard Navigation**: Full functionality without mouse - **Screen Reader Support**: Proper ARIA labels and descriptions - **High Contrast**: Readable in high contrast modes - **Focus Management**: Clear focus indicators and logical tab order - **Alternative Input**: Support for voice input and switch navigation **Specific Accessibility Features**: - Alt text for all visual elements - Keyboard shortcuts for common actions - Voice announcements for state changes - Reduced motion options for animations - Customizable font sizes and contrast ### 3. Mobile Experience **Responsive Design Requirements**: - **Touch Targets**: Minimum 44px for all interactive elements - **Gesture Support**: Swipe, pinch, and long-press interactions - **Virtual Keyboard**: Proper keyboard type suggestions - **Orientation**: Support for portrait and landscape modes - **Performance**: Optimized for mobile processors and memory **Mobile-Specific Features**: - Haptic feedback for interactions - Context menus for pill management - Simplified toolbar for smaller screens - Voice input integration - Camera integration for image capture ## Technical Architecture ### 1. Component Structure ```mermaid classDiagram class RichInputAdapter { +value: string +onChange: function +viewMode: 'preview' | 'raw' +enableHashtags: boolean +enableMentions: boolean +enableEmojis: boolean +handleValueChange() +handleProcessing() } class RichInput { +parsers: ParserConfig +behavior: BehaviorConfig +styling: StyleConfig +handlers: EventHandlers +render() +getState() +setState() } class FloatingToolbar { +onHashtagInsert: function +onMentionInsert: function +onEmojiInsert: function +disabled: boolean +render() } class SearchOverlay { +searchType: 'hashtag' | 'mention' | 'emoji' +results: Array +isLoading: boolean +onResultSelect: function +show() +hide() } RichInputAdapter --> RichInput RichInputAdapter --> FloatingToolbar RichInputAdapter --> SearchOverlay ``` ### 2. Data Flow Architecture ```mermaid flowchart TD A[User Input] --> B[RichInputAdapter] B --> C{Input Type?} C -->|Text| D[Rich Input Engine] C -->|Trigger Character| E[Search Overlay] C -->|Toolbar Click| F[Floating Toolbar] D --> G[Content Parsers] E --> H[Search Services] F --> I[Insertion Services] G --> J[Token Generation] H --> K[Suggestion Results] I --> L[Content Insertion] J --> M[Visual Rendering] K --> N[Overlay Display] L --> O[Content Update] M --> P[Enhanced Content] N --> P O --> P ``` ### 3. State Management **Component State**: - Input value and cursor position - Parser configurations and enabled features - Search overlay state and results - Toolbar interaction state - Focus and interaction management **Global State Integration**: - User preferences (emoji panel behavior, pagination mode) - Filter state for search interfaces - Form validation and submission state - User authentication and permissions ## Business Rules and Constraints ### 1. Content Validation Rules **Character Limits**: - Title fields: 255 characters maximum - Content fields: 1,000 characters maximum - Hashtags: 50 characters maximum - Individual mentions: No specific limit (validated against user database) **Content Restrictions**: - No malicious URLs or scripts - Profanity filtering for public content - Spam prevention for excessive hashtags/mentions - Image content moderation for inappropriate material ### 2. Performance Constraints **Resource Limits**: - Maximum 10 concurrent search requests per user - Search result caching for 5 minutes - Image upload queue limit of 5 files - Memory cleanup after 30 minutes of inactivity **Rate Limiting**: - Search API: 100 requests per minute per user - Image upload: 20 files per hour per user - Content submission: 50 posts per hour per user ### 3. Security Requirements **Input Sanitization**: - XSS prevention for all user input - SQL injection protection for search queries - File type validation for image uploads - URL validation to prevent malicious links **Data Protection**: - User mention data anonymization options - Content encryption for sensitive information - Audit logging for administrative actions - GDPR compliance for user data handling ## Success Metrics ### 1. User Engagement Metrics ```mermaid pie title User Engagement Distribution \"Rich Content Creation\" : 45 \"Basic Text Input\" : 25 \"Enhanced Features Usage\" : 20 \"Search and Filter\" : 10 ``` **Key Performance Indicators**: - **Rich Content Adoption**: 75% of posts contain hashtags, mentions, or enhanced URLs - **Feature Usage**: Average 3.2 enhanced elements per post - **User Retention**: 15% increase in daily active users - **Content Discoverability**: 40% increase in hashtag-based navigation ### 2. Technical Performance Metrics **Response Time Targets**: - 95th percentile typing response: <50ms - 95th percentile search response: <300ms - 99th percentile image upload: <5s - Average memory usage: <30MB per instance **Reliability Targets**: - 99.9% uptime for rich input functionality - <0.1% error rate for content processing - 99.5% success rate for image uploads - <1% data loss during form submissions ### 3. Business Impact Metrics **Content Quality Improvements**: - 60% increase in searchable content - 35% increase in user-to-user connections via mentions - 50% reduction in malformed URLs - 25% increase in content engagement rates **User Satisfaction**: - 4.5/5 average rating for text editing experience - 80% user preference for rich input over basic text - 90% feature discoverability rate - <5% user-reported issues per month ## Implementation Phases ### Phase 1: Core Functionality (Completed) - ‚úÖ Basic rich input engine - ‚úÖ Hashtag and mention detection - ‚úÖ URL auto-conversion - ‚úÖ Form integration - ‚úÖ Basic search overlays ### Phase 2: Enhanced Features (Current) - üîÑ Floating toolbar implementation - üîÑ Advanced emoji support - üîÑ Image paste functionality - üîÑ Mobile optimization - üîÑ Accessibility improvements ### Phase 3: Advanced Capabilities (Planned) - üìã Advanced content templates - üìã Collaborative editing features - üìã Advanced formatting options - üìã Plugin architecture - üìã Analytics integration ### Phase 4: Enterprise Features (Future) - üìã Advanced security controls - üìã Custom domain configurations - üìã API for third-party integrations - üìã Advanced content moderation - üìã Multi-language support ## Risk Assessment and Mitigation ### 1. Technical Risks **Performance Degradation**: - **Risk**: Large content or many concurrent users causing slowdowns - **Mitigation**: Implement content chunking, lazy loading, and performance monitoring - **Contingency**: Fallback to basic text input if performance thresholds exceeded **Browser Compatibility**: - **Risk**: Features not working on older browsers or mobile devices - **Mitigation**: Progressive enhancement and feature detection - **Contingency**: Graceful degradation to basic functionality ### 2. User Experience Risks **Learning Curve**: - **Risk**: Users finding the rich features confusing or overwhelming - **Mitigation**: Contextual help, onboarding tutorials, and progressive disclosure - **Contingency**: Option to disable advanced features per user preference **Content Migration**: - **Risk**: Existing content not displaying properly with new rich input - **Mitigation**: Backward compatibility and content migration scripts - **Contingency**: Dual rendering system during transition period ### 3. Business Risks **Feature Adoption**: - **Risk**: Users not adopting rich input features, reducing business value - **Mitigation**: User education, incentives for rich content creation - **Contingency**: A/B testing to optimize feature presentation **Maintenance Overhead**: - **Risk**: Complex system requiring significant ongoing maintenance - **Mitigation**: Comprehensive testing, documentation, and monitoring - **Contingency**: Simplified feature set if maintenance becomes unsustainable ## Conclusion The Rich Input System represents a significant enhancement to user content creation capabilities, providing intelligent text processing, visual enhancements, and seamless integration across the application. By transforming basic text input into an interactive, feature-rich experience, the system delivers measurable improvements in user engagement, content quality, and overall platform value. The modular architecture ensures scalability and maintainability while the comprehensive feature set addresses diverse user needs from casual content creation to advanced filtering and search capabilities. With proper implementation of the outlined requirements, the Rich Input System will serve as a foundational component for enhanced user interaction and content management. --- **Document Version**: 1.0 **Last Updated**: January 28, 2025 **Next Review**: April 28, 2025 **Stakeholders**: Product Team, Engineering Team, UX Team, QA Team ",
    "./src/components/rich-input.md": "--- layout: default title: RichInput Component System description: Comprehensive rich text input with smart pill support and native behavior --- # RichInput Component System The RichInput component system provides a sophisticated text input experience with support for rich content like hashtags, mentions, URLs, emojis, and custom content types while maintaining native input behavior. ## Overview Located in `src/lib/rich-input/`, this system consists of: - **RichInput Component**: Main React component with full input simulation - **RichInputEngine**: Core engine handling state, parsing, and operations - **Rendering System**: Flexible renderer for different content types - **Utilities**: Position calculation, token handling, and cursor management ## Key Features - üéØ **Native Input Behavior**: Feels like a standard input/textarea - üè∑Ô∏è **Smart Pills**: Hashtags, mentions, URLs rendered as interactive pills - üé® **Custom Renderers**: Flexible rendering system for different content types - ‚å®Ô∏è **Keyboard Navigation**: Full keyboard support with smart cursor positioning - üîÑ **Undo/Redo**: Complete history management - üì± **Mobile Friendly**: Touch and gesture support - ‚ôø **Accessible**: Full ARIA support and screen reader compatibility ## Basic Usage ```tsx import { RichInput } from '@/lib/rich-input'; function MyComponent() { const [value, setValue] = useState(''); return ( <RichInput value={value} onChange={setValue} placeholder=\"Type something...\" multiline={true} /> ); } ``` ## Advanced Configuration ```tsx import { RichInput, createComponentLogger } from '@/lib/rich-input'; const logger = createComponentLogger('MyRichInput'); function AdvancedRichInput() { const [value, setValue] = useState(''); const handleStateChange = (state) => { logger.debug('State changed:', state); }; return ( <RichInput value={value} onChange={setValue} onStateChange={handleStateChange} config={{ maxLength: 500, enableHistory: true, enableSmartCursor: true }} handlers={{ onEnter: (event) => { // Custom enter handling console.log('Enter pressed'); }, onEscape: (event) => { // Custom escape handling console.log('Escape pressed'); } }} enableDebugLogging={true} /> ); } ``` ## Content Types The system automatically detects and renders various content types: ### Hashtags - **Pattern**: `#hashtag` - **Rendering**: Styled pill with click handling - **Navigation**: Arrow keys move between hashtags ### Mentions - **Pattern**: `@username` - **Rendering**: User avatar + name pill - **Integration**: Links to user profiles ### URLs - **Pattern**: `https://example.com` - **Rendering**: Link preview pills - **Behavior**: Click to open in new tab ### Emojis - **Pattern**: `:emoji_name:` or Unicode - **Rendering**: Native emoji or custom images - **Picker**: Integrated emoji picker support ## API Reference ### RichInput Props ```tsx interface RichInputProps { value?: string; onChange?: (value: string) => void; onStateChange?: (state: RichInputState) => void; handlers?: RichInputEventHandlers; renderer?: RichInputRenderer; multiline?: boolean; placeholder?: string; maxLength?: number; disabled?: boolean; autoFocus?: boolean; required?: boolean; config?: Partial<RichInputConfig>; } ``` ### RichInput Methods (via ref) ```tsx const richInputRef = useRef<RichInputAPI>(null); // Text operations richInputRef.current?.insertText('Hello', position); richInputRef.current?.deleteText(range); richInputRef.current?.replaceText(range, 'New text'); // Selection operations richInputRef.current?.setSelection(selection); richInputRef.current?.selectAll(); richInputRef.current?.selectToken(token); // Cursor operations richInputRef.current?.setCursor(position); richInputRef.current?.moveCursor('right', extend); // History operations richInputRef.current?.undo(); richInputRef.current?.redo(); // Utility operations richInputRef.current?.focus(); richInputRef.current?.blur(); richInputRef.current?.clear(); ``` ## Custom Renderers Create custom renderers for specialized content: ```tsx import { RichContentRenderer } from '@/lib/rich-input'; const customRenderer: RichContentRenderer = { renderToken: (token, isSelected, handlers) => { if (token.type === 'custom') { return ( <span className=\"custom-token\" onClick={() => handlers.onTokenClick?.(token)} > {token.content} </span> ); } return null; // Fall back to default renderer }, renderPlaceholder: (placeholder) => ( <span className=\"custom-placeholder\">{placeholder}</span> ) }; function CustomRichInput() { return ( <RichInput renderer={customRenderer} // ... other props /> ); } ``` ## Performance Considerations - **Batched Updates**: State changes are batched for performance - **Virtual Scrolling**: Large content automatically virtualized - **Debounced Parsing**: Content parsing is debounced during typing - **Memoized Rendering**: Tokens are memoized to prevent unnecessary re-renders ## Testing The component includes comprehensive test utilities: ```tsx import { RichInput } from '@/lib/rich-input'; import { render, fireEvent } from '@testing-library/react'; test('handles text input correctly', () => { const handleChange = jest.fn(); const { getByRole } = render(<RichInput onChange={handleChange} />); const input = getByRole('textbox'); fireEvent.change(input, { target: { value: 'Hello #world' } }); expect(handleChange).toHaveBeenCalledWith('Hello #world'); }); ``` ## Accessibility The component provides full accessibility support: - **ARIA Labels**: Proper labeling for screen readers - **Keyboard Navigation**: Full keyboard support - **Focus Management**: Proper focus handling - **Screen Reader**: Announces content changes - **High Contrast**: Supports high contrast themes ## Browser Support - **Modern Browsers**: Chrome 90+, Firefox 88+, Safari 14+, Edge 90+ - **Mobile**: iOS Safari 14+, Chrome Mobile 90+ - **Fallback**: Graceful degradation to standard textarea ## Migration Guide ### From Standard Input ```tsx // Before <input value={value} onChange={e => setValue(e.target.value)} placeholder=\"Type something...\" /> // After <RichInput value={value} onChange={setValue} placeholder=\"Type something...\" /> ``` ### From Textarea ```tsx // Before <textarea value={value} onChange={e => setValue(e.target.value)} rows={4} /> // After <RichInput value={value} onChange={setValue} multiline={true} config={{ minRows: 4 }} /> ``` ## Related Components - **RichTextEditor**: Higher-level editor with toolbar - **MentionPicker**: Autocomplete for mentions - **EmojiPicker**: Emoji selection interface - **HashtagSuggester**: Hashtag autocomplete system ",
    "./src/components/rich-text-editor.md": "# Rich Text Editor with Smart Pill Support A completely **implementation-agnostic, composable rich text editor** that provides 100% native input behavior with rich content rendering. Features smart pill selection, hashtags, mentions, URLs, emojis, and custom content types. ## üöÄ Quick Start ```tsx import { RichTextEditor } from '@rich-text-editor'; function MyForm() { const [content, setContent] = useState(''); return ( <RichTextEditor value={content} onChange={setContent} placeholder=\"Type #hashtags and @mentions...\" multiline={true} enableHashtags={true} enableUserMentions={true} enableEmojis={true} /> ); } ``` ## üì¶ Available Components & Hooks ### Components - **`RichTextEditor`** - Form-ready adapter component (recommended) - **`RichTextInput`** - Core rich input component - **`RichTextRenderer`** - Default content renderer ### Hooks - **`useRichTextEditor`** - Simplified state management hook ### Core Classes - **`RichTextEngine`** - Core state and logic engine - **`DefaultRenderer`** - Default rendering implementation ## üéØ Features ### ‚úÖ **100% Native Input Behavior** - All keyboard shortcuts work (Ctrl+A, Ctrl+Z, arrows, etc.) - Copy/paste functionality - Selection behavior identical to native inputs - Form integration with hidden native input - Full accessibility support ### ‚úÖ **Smart Pill Selection** - Clicking on any part of a pill selects the entire pill - Drag selection automatically expands to pill boundaries - Keyboard selection (Shift+arrows) respects pill boundaries - Pills are treated as atomic units ### ‚úÖ **Rich Content Support** - **Hashtags** - `#tag` ‚Üí styled pill - **Mentions** - `@[username|id|author]` ‚Üí user pill - **URLs** - Auto-detection with configurable behavior - **Emojis** - Unicode and custom image emojis - **Images** - Embedded image support - **Custom Content** - Pluggable parser system ### ‚úÖ **Advanced Features** - Multi-line support with full textarea functionality - History system with undo/redo - Smart positioning and coordinate calculation - Performance optimized rendering - TypeScript support throughout ## üìñ Detailed Usage ### Basic Rich Text Editor ```tsx import { RichTextEditor } from '@rich-text-editor'; function BasicExample() { const [value, setValue] = useState( 'Hello #world! Check out @[user|123|author]' ); return ( <RichTextEditor value={value} onChange={setValue} placeholder=\"Start typing...\" multiline={true} viewMode=\"preview\" // or \"raw\" enableHashtags={true} enableUserMentions={true} enableEmojis={true} enableImagePaste={true} className=\"my-editor\" disabled={false} /> ); } ``` ### Using the Hook for Advanced Control ```tsx import { useRichTextEditor, RichTextInput } from '@rich-text-editor'; function AdvancedExample() { const editor = useRichTextEditor({ initialValue: 'Welcome to our #platform!', multiline: true, parsers: { hashtags: true, mentions: true, urls: true, emojis: true }, behavior: { smartSelection: true, spellCheck: true } }); return ( <div> <RichTextInput ref={editor.ref} {...editor} /> <div className=\"editor-controls\"> <button onClick={() => editor.insertText(' #trending')}> Add Hashtag </button> <button onClick={() => editor.clear()}>Clear</button> <button onClick={() => editor.undo()}>Undo</button> <button onClick={() => editor.redo()}>Redo</button> </div> <div className=\"editor-info\"> <p>Empty: {editor.isEmpty ? 'Yes' : 'No'}</p> <p>Focused: {editor.isFocused ? 'Yes' : 'No'}</p> <p>Has Selection: {editor.hasSelection ? 'Yes' : 'No'}</p> <p>Selected Text: \"{editor.selectedText}\"</p> </div> </div> ); } ``` ### Core Component with Custom Configuration ```tsx import { RichTextInput, RichTextConfig } from '@rich-text-editor'; function CoreExample() { const [value, setValue] = useState(''); const config: RichTextConfig = { multiline: true, placeholder: 'Enter rich content...', parsers: { hashtags: true, mentions: true, urls: true, emojis: true, images: false, markdown: true }, behavior: { smartSelection: true, autoComplete: false, spellCheck: true, tabSize: 2 }, styling: { className: 'custom-rich-input', style: { minHeight: '100px', border: '2px solid #007bff', borderRadius: '8px' } } }; return ( <RichTextInput value={value} onChange={setValue} {...config} handlers={{ onFocus: (state) => console.log('Focused:', state), onBlur: (state) => console.log('Blurred:', state), onTokenClick: (token, state) => console.log('Token clicked:', token) }} /> ); } ``` ## üîß Custom Parsers Create custom content types with the parser system: ```tsx import { createCustomParser, RichTextInput } from '@rich-text-editor'; // Create a phone number parser const phoneParser = createCustomParser( 'phone', 50, // priority (text) => { const phoneRegex = /\b\d{3}-\d{3}-\d{4}\b/g; const tokens = []; let match; while ((match = phoneRegex.exec(text)) !== null) { tokens.push({ type: 'custom', content: match[0], rawText: match[0], start: match.index, end: match.index + match[0].length, metadata: { customType: 'phone', phoneNumber: match[0] } }); } return tokens; } ); function CustomParserExample() { const [value, setValue] = useState('Call me at 555-123-4567'); return ( <RichTextInput value={value} onChange={setValue} parsers={{ hashtags: true, mentions: true, custom: [phoneParser] }} /> ); } ``` ## üé® Custom Rendering Customize how content is rendered: ```tsx import { createCustomRenderer, RichTextInput } from '@rich-text-editor'; const customRenderer = createCustomRenderer( // Custom token renderer (token, index, state) => { if (token.type === 'hashtag') { return ( <span key={index} className=\"custom-hashtag\" style={{ backgroundColor: '#ff6b35', color: 'white', padding: '2px 8px', borderRadius: '16px' }} > #{token.content} </span> ); } // Use default renderer for other types return null; } ); function CustomRenderExample() { return ( <RichTextInput value=\"Check out #customStyle\" onChange={() => {}} renderer={customRenderer} /> ); } ``` ## üîå API Reference ### RichTextEditor Props ```tsx interface RichTextEditorProps { value: string; onChange: (value: string) => void; placeholder?: string; className?: string; disabled?: boolean; contextId: string; multiline?: boolean; viewMode?: 'preview' | 'raw'; enableHashtags?: boolean; enableUserMentions?: boolean; enableEmojis?: boolean; enableImagePaste?: boolean; } ``` ### useRichTextEditor Hook ```tsx interface UseRichTextEditorOptions { initialValue?: string; multiline?: boolean; parsers?: ParserConfig; behavior?: BehaviorConfig; styling?: StylingConfig; onChange?: (value: string) => void; onStateChange?: (state: RichTextState) => void; } interface UseRichTextEditorReturn { value: string; state: RichTextState | null; ref: React.RefObject<RichTextInputRef>; // Methods setValue: (value: string) => void; insertText: (text: string) => void; clear: () => void; focus: () => void; blur: () => void; undo: () => void; redo: () => void; selectAll: () => void; // State isEmpty: boolean; isFocused: boolean; hasSelection: boolean; selectedText: string; } ``` ### RichTextToken ```tsx interface RichTextToken { type: | 'text' | 'hashtag' | 'mention' | 'url' | 'emoji' | 'image' | 'markdown' | 'custom'; content: string; rawText: string; start: number; end: number; metadata?: { // Type-specific data hashtag?: string; userId?: string; username?: string; href?: string; emojiId?: string; customType?: string; // ... more }; } ``` ## üéØ Form Integration The rich text editor integrates seamlessly with forms: ```tsx import { RichTextEditor } from '@rich-text-editor'; import { useForm } from 'react-hook-form'; function FormExample() { const { register, handleSubmit, setValue, watch } = useForm(); const content = watch('content', ''); return ( <form onSubmit={handleSubmit((data) => console.log(data))}> <label>Post Content</label> <RichTextEditor value={content} onChange={(value) => setValue('content', value)} placeholder=\"Write your post...\" multiline={true} enableHashtags={true} enableUserMentions={true} /> {/* Hidden input for form submission */} <input type=\"hidden\" {...register('content')} /> <button type=\"submit\">Submit</button> </form> ); } ``` ## üé® Styling The editor uses CSS variables for easy theming: ```css .rich-input { --border-primary: #e1e5e9; --focus-color: #007bff; --background-color: #ffffff; --cursor-color: #333333; --selection-color: rgba(0, 123, 255, 0.25); --placeholder-color: #6c757d; } .rich-input .content-pill--hashtag { --hashtag-bg: rgba(0, 123, 255, 0.1); --hashtag-color: #007bff; --hashtag-border: rgba(0, 123, 255, 0.3); } .rich-input .content-pill--mention { --mention-bg: rgba(40, 167, 69, 0.1); --mention-color: #28a745; --mention-border: rgba(40, 167, 69, 0.3); } ``` ## üöÄ Performance - **Efficient Parsing** - Only re-parses when text changes - **Smart Rendering** - Optimized React rendering with proper keys - **Lazy Loading** - Components load only when needed - **Memory Management** - Automatic cleanup of event listeners - **History Limits** - Configurable undo/redo history size ## üîß Advanced Configuration ```tsx import { RichTextInput, RichTextEngine } from '@rich-text-editor'; function AdvancedConfig() { const engine = new RichTextEngine({ multiline: true, maxLength: 5000, parsers: { hashtags: true, mentions: true, urls: true, emojis: true, custom: [ // Custom parsers ] }, behavior: { smartSelection: true, autoComplete: true, spellCheck: true, tabSize: 4 } }); return <RichTextInput engine={engine} className=\"advanced-editor\" />; } ``` ## üêõ Troubleshooting ### Common Issues 1. **Import Errors** ```tsx // ‚ùå Wrong import { RichTextEditor } from 'rich-text-editor'; // ‚úÖ Correct import { RichTextEditor } from '@rich-text-editor'; ``` 2. **State Updates** ```tsx // ‚ùå Wrong - will cause infinite loops useEffect(() => { editor.setValue(externalValue); }, [editor]); // ‚úÖ Correct useEffect(() => { editor.setValue(externalValue); }, [externalValue, editor.setValue]); ``` 3. **Performance** ```tsx // ‚ùå Wrong - recreates config on every render const config = { multiline: true }; // ‚úÖ Correct - stable reference const config = useMemo(() => ({ multiline: true }), []); ``` ## üìù Examples Check out the `/examples` directory for more detailed examples: - **Basic Usage** - Simple form integration - **Advanced Features** - Custom parsers and renderers - **Theming** - Custom styling examples - **Performance** - Optimized implementations ## ü§ù Contributing The rich text editor is designed to be completely modular and extensible. You can: - Add custom parsers for new content types - Create custom renderers for different styling - Extend the engine with new functionality - Contribute improvements to the core system ## üìÑ License This rich text editor system is part of the idling.app project and follows the same licensing terms. ",
    "./src/components/search-overlay/index.md": "--- layout: default title: 'Search Overlay' description: 'Contextual search and suggestion overlay for rich text inputs' permalink: /components/search-overlay/ parent: Components categories: [components, search, overlay] tags: [search-overlay, suggestions, rich-input, ui-components] --- # Search Overlay Component ## Overview The Search Overlay provides contextual search and suggestion functionality for rich text inputs. It appears automatically when users type trigger characters like `#`, `@`, or `:`, offering real-time suggestions and search results. ## Key Features - **Trigger-Based Activation** - Responds to `#`, `@`, `:` characters - **Real-Time Search** - Instant results with debounced queries - **Keyboard Navigation** - Arrow keys, Enter, Escape support - **Smart Positioning** - Contextual placement near cursor - **Multiple Content Types** - Hashtags, users, emojis - **Loading States** - Visual feedback during search - **Empty States** - Helpful messaging when no results found ## Trigger Types ### Hashtag Search (`#`) - Searches existing hashtags in the system - Shows usage counts and popularity - Prevents duplicate selections - Creates new hashtags when needed ### User Mentions (`@`) - Searches active users by username and display name - Shows profile pictures and user status - Supports different mention types (author, general) - Validates user existence ### Emoji Search (`:`) - Searches emoji database by name and keywords - Organized by categories - Shows Unicode emoji with names - Supports custom emoji sets ## Positioning Logic The overlay intelligently positions itself: - **Primary**: Below the trigger character - **Fallback**: Above if insufficient space below - **Constraints**: Stays within viewport bounds - **Responsive**: Adjusts on window resize ## Integration Points Works seamlessly with: - [Rich Input System](/components/rich-input-system/) - Primary integration - [Floating Toolbar](/components/floating-toolbar/) - Complementary interface ## Usage Examples _Implementation examples coming soon..._ ## API Reference _Detailed API documentation coming soon..._ --- _This component is part of the Idling.app UI component library. For implementation details, see the [Development](/development/) section._ ",
    "./src/components/skeleton-system.md": "# Skeleton System Architecture Documentation ## üèóÔ∏è How the Skeleton System Works ### Overview The skeleton system provides loading placeholders that match the actual content layout, preventing jarring height changes and providing better UX during data loading. ## üìä Data Flow & Loading States ### 1. **State Management Flow** ``` useSubmissionsManager (Jotai atoms) ‚Üì PostsManager (state orchestrator) ‚Üì SubmissionsList (UI renderer) ‚Üì Skeleton Components (loading placeholders) ``` ### 2. **Loading State Sources** The `isLoading` boolean comes from the Jotai atom in `useSubmissionsManager`: ```typescript // In useSubmissionsManager.ts const [submissionsState, setSubmissionsState] = useAtom( getSubmissionsStateAtom(contextId) ); // State structure interface SubmissionsState { loading: boolean; // ‚Üê This becomes isLoading data?: { submissions: any[]; pagination: PaginationInfo; }; error?: string; } ``` ### 3. **Loading Triggers** Loading state becomes `true` when: - Initial page load - Filter changes (tags, search) - Page navigation - Page size changes - Manual refresh Loading state becomes `false` when: - API response received (success or error) - Component unmount ## üé® Skeleton Component Hierarchy ### 1. **Core Components** (`SkeletonLoader.tsx`) ```typescript SkeletonText // Text placeholders SkeletonBox // Block/container placeholders SkeletonCircle // Avatar/icon placeholders SkeletonLoader // Main orchestrator with smart/manual modes ``` ### 2. **Smart Skeleton System** (`useSmartPostsSkeleton.tsx`) ```typescript useSmartPostsSkeleton() // Hook for posts-specific skeletons ‚îú‚îÄ‚îÄ SubmissionCardSkeleton // Individual post card skeleton ‚îú‚îÄ‚îÄ PaginationSkeleton // Pagination controls skeleton ‚îî‚îÄ‚îÄ SmartPostsSkeleton // Convenience component ``` ### 3. **Integration Points** ```typescript // In SubmissionsList.tsx - Two loading conditions: // 1. Session loading if (status === 'loading') { return <SmartPostsSkeleton submissionCount={3} showPagination={false} />; } // 2. Data loading if (isLoading) { return ( <div className=\"submissions-list__loading\"> {capturedLayout ? ( getSmartSkeletonLoader(isLoading) // Smart skeleton based on previous layout ) : ( <SmartPostsSkeleton // Fallback skeleton submissionCount={5} showPagination={true} enableThreadMode={enableThreadMode} /> )} </div> ); } ``` ## üß† Smart Skeleton Features ### 1. **Layout Capture System** ```typescript // Captures actual DOM structure when data loads const captureCurrentLayout = () => { // Analyzes current posts list structure const submissionElements = containerRef.current.querySelectorAll( '.submission__wrapper, .submission-thread' ); const paginationElement = containerRef.current.querySelector( '.submissions-list__pagination' ); // Creates config matching actual layout const config: PostsSkeletonConfig = { submissionCount: Math.max(submissionElements.length, 3), showPagination: !!paginationElement, enableThreadMode: threadElements.length > 0 }; } ``` ### 2. **Auto-Adaptive Skeletons** - **Submission Count**: Matches number of actual posts - **Pagination**: Shows only if pagination exists - **Thread Mode**: Includes reply skeletons if in thread mode - **Random Variation**: Simulates natural content variation (tags, descriptions) ### 3. **Fallback Strategy** ```typescript // If layout capture fails or isn't available yet: <SmartPostsSkeleton submissionCount={5} // Default count showPagination={true} // Safe default enableThreadMode={false} // Conservative default /> ``` ## üîÑ State Lifecycle ### 1. **Initial Load** ``` 1. Page loads ‚Üí useSubmissionsManager initializes 2. loading: true ‚Üí SubmissionsList shows fallback skeleton 3. API call completes ‚Üí loading: false ‚Üí Real content shows 4. useEffect captures layout ‚Üí Smart skeleton ready for next load ``` ### 2. **Filter Changes** ``` 1. User clicks tag ‚Üí addFilter() called 2. URL updates ‚Üí useSubmissionsManager detects change 3. loading: true ‚Üí SubmissionsList shows smart skeleton (if captured) 4. API call ‚Üí loading: false ‚Üí Content updates 5. Layout re-captured if structure changed ``` ### 3. **Development Override** ``` 1. Dev toggle Force ON ‚Üí shouldShowSkeleton: true 2. getSmartSkeletonLoader() ignores isLoading 3. Always returns skeleton regardless of actual loading state 4. Perfect for design work without waiting for loading ``` ## üéõÔ∏è Development Mode Integration ### How Dev Controls Work ```typescript // In useSmartPostsSkeleton.tsx const getSmartSkeletonLoader = (isLoading: boolean = true) => { // Check dev mode override const shouldShow = (() => { if (process.env.NODE_ENV === 'development' && isDevModeActive) { return shouldShowSkeleton; // Dev mode controls } return isLoading; // Normal loading state })(); if (!shouldShow) return null; return generatePostsSkeleton(capturedLayout); }; ``` ### Dev Mode States - **Auto**: Normal behavior (`shouldShow = isLoading`) - **Force ON**: Always show (`shouldShow = true`) - **Force OFF**: Never show (`shouldShow = false`) ## üöÄ Performance Optimizations ### 1. **DOM Analysis Caching** - Layout captured once and reused - No re-analysis until content structure changes - Fallback prevents analysis failures ### 2. **Conditional Rendering** - Skeletons only render when needed - Early returns prevent unnecessary work - Smart fallbacks for edge cases ### 3. **Component Separation** - Skeleton logic separated from business logic - Reusable components across different contexts - Tree-shaking removes dev tools in production ## üß™ Testing Strategy ### Manual Testing 1. **Force ON**: See skeleton designs without loading 2. **Force OFF**: Test content layouts without interference 3. **Auto**: Verify normal loading behavior ### Edge Cases - Empty result sets - Network failures - Rapid filter changes - Component unmounting during load ## üîç Debugging Tips ### Console Logs The system includes extensive logging: ``` üì∏ [SKELETON] Captured layout: {...} üìã [SUBMISSIONS_LIST] Rendering with state: {...} üîÑ [MANAGER] fetchSubmissions called with: {...} ``` ### Development Panel - Shows current mode and status - Visual indicators for active overrides - Keyboard shortcuts for quick testing ## üèÅ Summary The skeleton system provides: 1. **Smooth Loading UX**: No height jumps or layout shifts 2. **Smart Adaptation**: Matches actual content structure 3. **Development Tools**: Easy testing and design iteration 4. **Performance**: Minimal overhead with smart caching 5. **Fallback Safety**: Graceful degradation for edge cases The key insight is that `isLoading` from `useSubmissionsManager` controls when skeletons show, and the dev toggle system can override this behavior for testing purposes. ",
    "./src/components/skeleton.md": "# Intelligent Skeleton Loading System This directory contains the intelligent skeleton loading system that creates accurate skeleton representations of your actual DOM structure. ## How It Works The `IntelligentSkeletonWrapper` component: 1. **Captures DOM Structure**: When content loads, it analyzes the actual DOM structure of your components 2. **Identifies Content Elements**: Uses intelligent detection to find text, images, buttons, and other content elements 3. **Reconstructs Layout**: Creates skeleton versions that preserve the exact layout structure 4. **Matches Count**: Uses pre-request data to render the exact number of skeleton items expected ## Key Features ### üéØ **Accurate DOM Reconstruction** - Preserves exact layout structure (flexbox, grid, positioning) - Maintains element hierarchy and nesting - Copies CSS properties for accurate sizing and spacing ### üîç **Intelligent Content Detection** - Automatically identifies text elements, buttons, images, links - Recognizes submission-specific classes (`submission__title`, `author__name`, etc.) - Detects interactive elements and media content ### üìä **Smart Skeleton Generation** - Different skeleton styles for different content types: - **Text**: Animated gradient with natural width variations - **Buttons**: Darker gradient with proper button styling - **Images**: Circular or rectangular based on aspect ratio - **Links**: Brand-colored gradients - **Inputs**: Border styling with input-specific appearance ### üé® **Responsive & Accessible** - Dark mode support with appropriate color schemes - High contrast mode compatibility - Reduced motion support for accessibility - Mobile-responsive adjustments ## Usage ### Basic Usage ```tsx import { IntelligentSkeletonWrapper } from './skeleton/IntelligentSkeletonWrapper'; <IntelligentSkeletonWrapper isLoading={isLoading} expectedItemCount={expectedCount} className=\"my-skeleton-wrapper\" > <MyContentComponent /> </IntelligentSkeletonWrapper> ``` ### Advanced Usage with Pre-request Data ```tsx // Get expected count from pre-request const { data: preRequestData } = usePaginationPreRequest({ filters, pageSize, enabled: true }); const expectedSkeletonItems = preRequestData?.expectedItems || 5; <IntelligentSkeletonWrapper isLoading={isLoading} expectedItemCount={expectedSkeletonItems} onStructureCaptured={(structure) => { console.log('Captured structure:', structure); }} fallbackSkeleton={<CustomFallback />} > <SubmissionsList /> </IntelligentSkeletonWrapper> ``` ## Component Structure ### IntelligentSkeletonWrapper Main wrapper component that handles: - DOM structure capture and analysis - Skeleton generation and rendering - Loading state management - Fallback handling ### Element Analysis The system analyzes each DOM element for: - **Type**: text, button, image, container, etc. - **Styles**: All computed CSS properties - **Content**: Text content and attributes - **Children**: Recursive analysis of child elements - **Skeleton Target**: Whether element should be replaced with skeleton ### Skeleton Generation Creates appropriate skeleton elements: - Preserves original element positioning and sizing - Applies skeleton-specific styling (gradients, animations) - Maintains accessibility attributes - Uses semantic HTML elements where appropriate ## Integration with PostsManager The system is integrated into the posts page: ```tsx // In PostsManager.tsx <IntelligentSkeletonWrapper isLoading={isLoading} expectedItemCount={expectedSkeletonItems} className=\"posts-manager__submissions-wrapper\" > <SubmissionsList /> </IntelligentSkeletonWrapper> ``` This creates skeleton versions of: - Submission items (`submission__wrapper`) - Author information (`author__name`, `author__bio`) - Post titles and content (`submission__title`, `submission__description`) - Action buttons (`submission__reply-btn`, `submission__edit-btn`) - Tags and metadata (`tag-link`, `submission__datetime`) ## Performance Considerations - **Capture Timing**: Structure is captured after content loads with a 150ms delay - **Caching**: Captured structures are cached to avoid re-analysis - **Virtual Scrolling**: Compatible with virtual scrolling implementations - **Memory Management**: Cleans up observers and cached data appropriately ## Customization ### Custom Skeleton Styles Add custom CSS classes: ```css .skeleton-element--custom { background: linear-gradient(90deg, #custom1, #custom2); border-radius: 8px; } ``` ### Custom Content Detection Extend the `isSkeletonTarget` function to detect your specific elements: ```tsx const contentClasses = [ 'my-custom-text', 'my-custom-button', // ... existing classes ]; ``` ## Browser Support - Modern browsers with ResizeObserver support - Graceful fallback for older browsers - Progressive enhancement approach ## Accessibility - Maintains ARIA attributes and roles - Respects `prefers-reduced-motion` - Supports high contrast modes - Preserves semantic HTML structure ## Development ### Debugging Enable development mode to see: - Structure capture logs - Skeleton target identification - Performance metrics - DOM analysis details ### Testing The system includes: - Unit tests for element analysis - Integration tests with actual components - Visual regression tests for skeleton accuracy ",
    "./src/components/submission-page.md": "# Thread Page Metadata Improvements ## Overview This directory contains the enhanced thread page implementation with rich metadata support for maximum shareability and rich embed functionality. ## Key Features ### üîó **Server-Side Metadata Generation** - Uses Next.js `generateMetadata` API for server-side metadata generation - Pre-fetches thread data for optimal SEO and social sharing - Fallback handling for invalid/missing threads ### üì± **Rich Social Media Cards** - **Open Graph**: Article-type metadata with author, publication date, and tags - **Twitter Cards**: Summary with large image support - **Dynamic Titles**: Includes reply count (e.g., \"Post Title (3 replies)\") - **Smart Descriptions**: Uses initial post content, truncated to 150 chars for optimal sharing ### üè∑Ô∏è **Enhanced SEO** - **Keywords**: Combines thread-specific terms with post tags and author - **Structured Data**: JSON-LD `DiscussionForumPosting` schema for rich snippets - **Robots Meta**: Optimized for search engine crawling - **Author Attribution**: Proper author metadata for content attribution ### üöÄ **Performance Optimizations** - **SSR Pre-fetching**: Thread data loaded server-side for faster rendering - **Type Safety**: Full TypeScript support with proper `Submission` types - **Error Handling**: Graceful fallbacks for missing or invalid threads ## Example Metadata Output ```json { \"title\": \"My Awesome Thread (5 replies) - Thread Discussion | Idling.app\", \"description\": \"This is the initial post content that will be used for social sharing and search engine descriptions...\", \"openGraph\": { \"title\": \"My Awesome Thread\", \"description\": \"This is the initial post content...\", \"type\": \"article\", \"authors\": [\"username\"], \"publishedTime\": \"2024-01-01T00:00:00.000Z\", \"tags\": [\"javascript\", \"react\", \"webdev\"] }, \"twitter\": { \"card\": \"summary_large_image\", \"title\": \"My Awesome Thread\", \"description\": \"This is the initial post content...\", \"creator\": \"@username\" } } ``` ## Files Structure - `page.tsx` - Server component with metadata generation - `ThreadPageClient.tsx` - Client component with interactive functionality - Uses existing `getSubmissionThread` action for data fetching ## Benefits 1. **Better Shareability**: Rich previews on social media platforms 2. **Improved SEO**: Structured data and optimized meta tags 3. **Enhanced UX**: Server-side rendering for faster initial load 4. **Social Media Integration**: Rich embeds with post content 5. **Search Engine Optimization**: Proper schema.org markup ",
    "./src/components/ui.md": "# UI Components & Overlay System This directory contains reusable UI components and the advanced overlay management system that supports modals, widgets, and other overlay elements. ## Components ### FooterBadge A semi-hidden expandable badge that \"hugs\" the footer and expands on mouse proximity. ```tsx import { FooterBadge } from './FooterBadge'; <FooterBadge text=\"+ Post\" icon=\"‚úèÔ∏è\" onClick={handleClick} theme=\"primary\" rightOffset={20} bottomOffset={20} hoverDistance={100} /> ``` **Features:** - Semi-hidden state by default (50% hidden) - Expands when mouse gets within `hoverDistance` pixels - Multiple theme variants (primary, secondary, success, warning, danger) - Configurable positioning and hover sensitivity - Smooth animations and accessibility support ### PostModal A reusable modal component for creating, viewing, and editing posts. ```tsx import { PostModal } from './PostModal'; <PostModal mode=\"create\" // 'create' | 'view' | 'edit' onClose={handleClose} /> ``` ### OverlayRenderer Renders all overlay elements (modals, widgets, popups) using React portals. **Features:** - Portal-based rendering for z-index isolation - Automatic portal container management - Support for modals, draggable widgets, and popups ## Overlay Management System ### OverlayContext Global state management for overlays with mutual exclusivity rules. ```tsx import { OverlayProvider, useOverlay } from '../../../lib/context/OverlayContext'; // Wrap your app <OverlayProvider> <App /> <OverlayRenderer /> </OverlayProvider> // Use in components const { openOverlay, closeOverlay } = useOverlay(); ``` **Key Features:** - **Modal Exclusivity**: Only one modal can be open at a time - **Widget Management**: Multiple widgets allowed (unless `allowMultiple: false`) - **Pin/Unpin System**: Convert any element to a draggable widget - **Z-index Management**: Automatic layering with incremental z-indices ### Opening Overlays ```tsx // Open a modal openOverlay({ id: 'my-modal', type: 'modal', component: MyComponent, props: { data: 'example' } }); // Open a draggable widget openOverlay({ id: 'my-widget', type: 'widget', component: MyWidget, position: { x: 100, y: 100 }, size: { width: 300, height: 200 }, isDraggable: true, isResizable: true }); ``` ### Widget System Widgets are draggable, resizable overlay elements: **Features:** - **Drag & Drop**: Full mouse-based dragging with boundary constraints - **Resizing**: Bottom-right resize handle with minimum size limits - **Pin/Unpin**: Convert existing DOM elements to widgets - **Original Removal**: Optionally hide original element when pinned **Usage:** ```tsx const { togglePin } = useOverlay(); // Pin an existing element const handlePin = (elementId: string) => { const element = document.getElementById(elementId); togglePin(elementId, element); }; ``` ## Hooks ### usePostModal Convenience hook for opening post-related modals. ```tsx import { usePostModal } from '../../hooks/usePostModal'; const { openCreateModal, openViewModal, openEditModal } = usePostModal({ onClose: () => console.log('Modal closed') }); // Open create modal openCreateModal(); // Open view modal openViewModal('post-123', 'Post Title', <PostContent />); // Open edit modal openEditModal('post-123', true); ``` ## Implementation Example ### FloatingAddPost A draggable floating action button for creating posts: ```tsx export const FloatingAddPost = ({ onPostCreated }) => { // Uses session hooks internally for authorization // Fully draggable with position persistence // Opens inline modal with AddSubmissionForm return ( <div className=\"floating-add-post\"> {/* Draggable button with warm theme */} {/* Modal with clean styling */} </div> ); }; ``` **Features:** - **Draggable**: Click and drag to reposition anywhere on screen - **Position Memory**: Remembers position using localStorage - **Session Integration**: Uses useSession hook for authorization - **Organic Styling**: Warm color palette with whimsical quill icon - **Smart Interaction**: Distinguishes between clicks and drags ## Architecture Benefits 1. **Centralized Management**: All overlays managed through single context 2. **Type Safety**: Full TypeScript support with proper interfaces 3. **Performance**: Portal-based rendering prevents z-index conflicts 4. **Accessibility**: Proper ARIA attributes and keyboard support 5. **Extensibility**: Easy to add new overlay types and behaviors 6. **Reusability**: Components designed for maximum reuse across the app ## CSS Architecture Each component has its own CSS file with: - **Base styles**: Core functionality and layout - **Theme variants**: Multiple color schemes - **Responsive design**: Mobile-first approach - **Dark mode**: Automatic system preference detection - **Accessibility**: High contrast and reduced motion support - **Animations**: Smooth transitions with performance optimization ## Portal Management The overlay system automatically: - Creates portal containers when needed - Cleans up containers when all overlays close - Manages event listeners and cleanup - Handles body scroll locking for modals - Provides backdrop click and escape key handling ## SmartInput The `SmartInput` component provides intelligent hashtag and user mention suggestions as users type. It can be used anywhere in the application where you want to enable #hashtag and @user suggestions. ### Basic Usage ```tsx import { SmartInput } from '../ui/SmartInput'; function MyComponent() { const [value, setValue] = useState(''); return ( <SmartInput value={value} onChange={setValue} placeholder=\"Type # for hashtags or @ for mentions...\" as=\"textarea\" // or \"input\" rows={4} /> ); } ``` ### Props | Prop | Type | Default | Description | |------|------|---------|-------------| | `value` | `string` | - | Current input value | | `onChange` | `(value: string) => void` | - | Called when value changes | | `placeholder` | `string` | - | Input placeholder text | | `className` | `string` | `''` | Additional CSS classes | | `disabled` | `boolean` | `false` | Whether input is disabled | | `as` | `'input' \| 'textarea'` | `'input'` | Type of input element | | `rows` | `number` | `3` | Number of rows (textarea only) | | `enableHashtags` | `boolean` | `true` | Enable hashtag suggestions | | `enableUserMentions` | `boolean` | `true` | Enable user mention suggestions | | `maxSuggestions` | `number` | `5` | Max suggestions to show | | `minQueryLength` | `number` | `2` | Min characters before searching | ### Features - **Hashtag Suggestions**: Type `#` followed by text to see hashtag suggestions based on existing posts - **User Mentions**: Type `@` followed by text to see user suggestions based on post authors - **Keyboard Navigation**: Use arrow keys to navigate, Enter/Tab to select, Escape to close - **Click to Select**: Click on any suggestion to insert it - **Smart Replacement**: Automatically handles duplicate `#` or `@` characters in suggestions - **Responsive**: Works on mobile and desktop ### Advanced Usage ```tsx // Only enable hashtags <SmartInput value={tags} onChange={setTags} enableHashtags={true} enableUserMentions={false} placeholder=\"#tag1, #tag2, #tag3\" /> // Custom styling <SmartInput value={content} onChange={setContent} className=\"my-custom-input-class\" as=\"textarea\" rows={6} maxSuggestions={10} /> ``` ### CSS Classes The component uses these CSS classes for styling: - `.inline-suggestion-container` - Main container - `.inline-suggestion-input` - Input/textarea element - `.suggestion-list` - Dropdown list - `.suggestion-item` - Individual suggestion - `.suggestion-item.selected` - Selected suggestion - `.suggestion-trigger` - The # or @ character - `.suggestion-label` - Suggestion text - `.suggestion-avatar` - User avatar (for mentions) ### Examples in the App The SmartInput is currently used in: 1. **Reply Forms** - For titles, content, and tags 2. **Thread Discussions** - Pre-filled with @mentions when replying 3. **Post Creation** - Can be added to any form field ### Low-Level Component If you need more control, you can use the underlying `InlineSuggestionInput` component directly and provide your own search functions: ```tsx import { InlineSuggestionInput } from '../ui/InlineSuggestionInput'; <InlineSuggestionInput value={value} onChange={setValue} onHashtagSearch={myCustomHashtagSearch} onUserSearch={myCustomUserSearch} /> ``` ",
    "./src/hooks/usenavigationloader.md": "--- title: useNavigationLoader category: hook tags: [documentation-needed] status: draft --- # useNavigationLoader > ‚ö†Ô∏è **Documentation Needed**: This file was automatically generated and needs content. ## Overview TODO: Describe what this hook does. ## Usage TODO: Provide usage examples. ## API Reference TODO: Document the public interface. --- *File: `src/lib/hooks/useNavigationLoader.ts`* *Auto-generated on: 2025-07-01 11:33:14* ",
    "./src/lib/auth-patterns.md": "# Authentication Patterns Guide ## Overview This document establishes the correct authentication patterns for the application. Following these patterns ensures consistency, security, and maintainability. ## ‚úÖ Correct Patterns ### Server-Side Components (RSC) ```tsx import { auth } from '@/lib/auth'; async function MyServerComponent() { const session = await auth(); // Check if user is authenticated const isAuthenticated = !!session?.user?.id; // Check if user owns a resource const isOwner = session?.user?.id === resourceOwnerId; // Use user ID for stable comparisons const currentUserId = session?.user?.id; return ( <div> {isAuthenticated && <p>Welcome back!</p>} {isOwner && <button>Edit</button>} </div> ); } ``` ### Client-Side Components ```tsx 'use client'; import { useSession } from 'next-auth/react'; function MyClientComponent() { const { data: session } = useSession(); // Check if user is authenticated const isAuthenticated = !!session?.user?.id; // Check if user owns a resource const isOwner = session?.user?.id === resourceOwnerId; // Use user ID for stable comparisons const currentUserId = session?.user?.id; return ( <div> {isAuthenticated && <p>Welcome back!</p>} {isOwner && <button>Edit</button>} </div> ); } ``` ## ‚ùå Incorrect Patterns (DO NOT USE) ### Complex Username Matching ```tsx // ‚ùå WRONG - Error-prone and inconsistent const isOwnProfile = session?.user && ( userProfile.id === session.user.id || userProfile.username === session.user.name || userProfile.username === session.user.email ); ``` ### Using `session.user.id` (Database ID) ```typescript const isOwner = session?.user?.id === authorId; ``` ### Inconsistent Checks ```tsx // ‚ùå WRONG - Mix of different identifiers const canEdit = session?.user?.name === author || session?.user?.email === userEmail; ``` ## Key Principles ### 1. Always Use `session.user.id` The `session.user.id` field is the most stable and reliable identifier: ```tsx // ‚úÖ Correct const isOwner = session?.user?.id === resourceOwnerId; // ‚ùå Wrong const isOwner = session?.user?.providerAccountId === resourceOwnerId; ``` ### 2. Use Proper Authentication Method - **Server components**: Use `auth()` from `@/lib/auth` - **Client components**: Use `useSession()` from `next-auth/react` ### 3. Consistent Property Access Always use optional chaining for safety: ```tsx // ‚úÖ Correct const userId = session?.user?.id; const isAuthenticated = !!session?.user?.id; // ‚ùå Wrong const userId = session.user.id; // Could throw error ``` ### 4. Simple Boolean Checks For authentication status: ```tsx // ‚úÖ Correct const isAuthenticated = !!session?.user?.id; // ‚ùå Wrong const isAuthenticated = session && session.user && session.user.id; ``` ## Migration Notes If you encounter legacy patterns using `providerAccountId`, replace them with `session.user.id`: ```tsx // Before session?.user?.providerAccountId === authorId // After session?.user?.id === authorId ``` ## Session Structure Our session object has this structure: ```typescript interface Session { user: { id: string; // ‚úÖ Use this for all comparisons name?: string; // Display name email?: string; // User email image?: string; // Profile image URL providerAccountId?: string; // ‚ö†Ô∏è OAuth only, don't use for app logic }; } ``` ## Examples ### Profile Ownership Check ```tsx // ‚úÖ Correct const isOwnProfile = session?.user?.id === userProfile.id; ``` ### Post/Comment Ownership ```tsx // ‚úÖ Correct const canEdit = session?.user?.id === post.authorId; const canDelete = session?.user?.id === comment.authorId; ``` ### Authorization for Actions ```tsx // ‚úÖ Correct const canReply = !!session?.user?.id; const canCreatePost = !!session?.user?.id; ``` ## Testing When writing tests, mock the session with the `id` field: ```tsx const mockSession = { user: { id: 'test-user-123', name: 'Test User', email: 'test@example.com' } }; ``` ## Conclusion Following these patterns ensures: - **Consistency** across the entire application - **Security** through proper identity verification - **Maintainability** with simple, predictable patterns - **Reliability** using stable identifiers Always use `session.user.id` for all authentication and authorization checks! ",
    "./src/lib/database.md": "--- layout: default title: 'Database & Data Management' description: 'Database schema, migrations, and data management documentation' permalink: /dev/database/ --- # üóÑÔ∏è Database & Data Management Comprehensive documentation for database schema, migrations, performance optimization, and data management strategies. ## üîÑ Migrations **[Database Migrations](migrations/)** - Schema management and version control: - Automated migration system with rollback protection - Schema versioning and change tracking - Safe deployment procedures - Data migration strategies - Migration testing and validation ## ‚ö° Performance **[Database Performance](performance/)** - Optimization strategies: - Query optimization techniques - Index management and analysis - Connection pooling configuration - Caching strategies - Performance monitoring and alerting ## üå± Data Management **[Data Management](data/)** - Data seeding and maintenance: - Seed data generation for development - Data import/export procedures - Data validation and cleanup - Backup and recovery strategies - Data privacy and security ## üìä Database Schema ### Core Tables - **users** - User accounts and profiles - **posts** - Main content posts - **comments** - Post comments and replies - **categories** - Content categorization - **tags** - Content tagging system - **attachments** - File uploads and media ### Relationships - Users can have many posts and comments - Posts belong to categories and have many tags - Comments belong to posts and users - Attachments can be linked to posts or comments ## üîß Tools & Utilities - **Migration Runner** - Execute and rollback migrations - **Schema Analyzer** - Analyze database structure - **Performance Monitor** - Track query performance - **Data Seeder** - Generate test data ## üöÄ Quick Start 1. **[Set up migrations](migrations/)** - Initialize migration system 2. **[Optimize performance](performance/)** - Configure for production 3. **[Seed test data](data/)** - Generate development data --- _Database documentation is continuously updated. Last updated: {{ site.time | date: \"%B %d, %Y\" }}_ ",
    "./src/lib/encryption.md": "# Encryption System Documentation This directory contains the encryption system for the application, providing secure data encryption/decryption capabilities with support for both personal (per-user) and global (application-level) encryption. ## Architecture Overview The encryption system is built with a modular architecture: - **Base Encryption Service**: Generic encryption service that can be used for any type of data - **Specialized Services**: Context-specific implementations (e.g., EmojiEncryptionService) - **Utilities**: Helper functions for serialization, validation, and data sanitization ## Security Features ### Dual Encryption Scopes 1. **Personal Encryption**: Per-user encryption keys for private data - Each user has their own encryption key - Only the user can decrypt their personal data - Keys are derived from user ID + context + master key 2. **Global Encryption**: Application-level encryption for shared data - Single key per context (e.g., 'emoji', 'message') - All authenticated users can decrypt global data - Used for approved/public content ### Key Management - **Key Derivation**: Uses PBKDF2 with 100,000 iterations - **Key Caching**: In-memory caching for performance - **Key Rotation**: Support for rotating encryption keys - **Secure Storage**: Keys are never stored in plaintext ### Encryption Details - **Algorithm**: AES-256-GCM (Galois/Counter Mode) - **Key Size**: 256 bits - **IV Size**: 128 bits (randomly generated per encryption) - **Authentication**: Built-in authentication with GCM mode - **Additional Authenticated Data**: Context-specific AAD for integrity ## Base Encryption Service ### Core Classes #### `BaseEncryptionService` Generic encryption service that provides the foundation for all encryption operations. ```typescript import { BaseEncryptionService } from './base-encryption'; // Encrypt personal data const encrypted = await BaseEncryptionService.encrypt(data, { scope: 'personal', context: 'message', userId: 123 }); // Encrypt global data const globalEncrypted = await BaseEncryptionService.encrypt(data, { scope: 'global', context: 'announcement' }); // Decrypt data const decrypted = await BaseEncryptionService.decrypt(encrypted, { userId: 123 // Only needed for personal scope }); ``` #### `EncryptionUtils` Utility functions for encryption operations. ```typescript import { EncryptionUtils } from './base-encryption'; // Serialize encrypted payload for storage const serialized = EncryptionUtils.serializePayload(encrypted); // Parse serialized payload const parsed = EncryptionUtils.parsePayload(serialized); // Generate secure IDs const id = EncryptionUtils.generateSecureId('prefix'); // Sanitize data for XSS prevention const clean = EncryptionUtils.sanitizeData(userInput); ``` ### Types and Interfaces ```typescript // Encryption scope type EncryptionScope = 'personal' | 'global'; // Context identifier type EncryptionContext = string; // e.g., 'emoji', 'message', 'file' // Encryption options interface EncryptionOptions { scope: EncryptionScope; context: EncryptionContext; userId?: number; // Required for personal scope additionalData?: string; // Additional authenticated data } // Encrypted payload interface EncryptedPayload { encryptedData: string; iv: string; authTag: string; scope: EncryptionScope; context: EncryptionContext; keyId: string; } ``` ## Emoji Encryption Service ### Overview The `EmojiEncryptionService` is a specialized implementation of the base encryption service for emoji data. ### Features - **Image Encryption**: Specialized methods for encrypting/decrypting emoji images - **Validation**: Image format and size validation - **Re-encryption**: Convert personal emojis to global when approved - **Metadata Sanitization**: XSS protection for emoji metadata ### Usage Example ```typescript import { EmojiEncryptionService, EmojiEncryptionUtils } from './emoji-encryption'; // Encrypt emoji image (personal) const encryptedImage = await EmojiEncryptionService.encryptImageData( imageBuffer, 'personal', userId ); // Decrypt emoji image const decryptedImage = await EmojiEncryptionService.decryptImageData( encryptedImage, userId ); // Re-encrypt for global access (admin approval) const globalEncrypted = await EmojiEncryptionService.reencryptForGlobalAccess( personalEncrypted, originalUserId ); // Validate image constraints const validation = EmojiEncryptionService.validateImageConstraints( imageBuffer, 'png' ); // Generate emoji ID const emojiId = EmojiEncryptionUtils.generateEmojiId('happy_face', userId); // Sanitize emoji metadata const clean = EmojiEncryptionUtils.sanitizeEmojiData({ name: 'Happy Face', description: 'A smiling emoji', aliases: ['smile', 'happy'], tags: ['emotion', 'positive'] }); ``` ## Database Schema ### User Encryption Keys ```sql CREATE TABLE user_encryption_keys ( id SERIAL PRIMARY KEY, user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE, encryption_key_hash TEXT NOT NULL, key_salt TEXT NOT NULL, created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, UNIQUE(user_id) ); ``` ### Application Encryption Keys ```sql CREATE TABLE application_encryption_keys ( id SERIAL PRIMARY KEY, key_name VARCHAR(100) NOT NULL UNIQUE, key_purpose VARCHAR(200) NOT NULL, encryption_key_hash TEXT NOT NULL, key_salt TEXT NOT NULL, created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, is_active BOOLEAN DEFAULT true, UNIQUE(key_name, is_active) ); ``` ## Environment Variables Set these environment variables for production: ```bash # Global encryption master key GLOBAL_ENCRYPTION_MASTER_KEY=your-secure-global-master-key # Personal encryption master key PERSONAL_ENCRYPTION_MASTER_KEY=your-secure-personal-master-key ``` ‚ö†Ô∏è **Security Warning**: Never use the default keys in production! ## Security Considerations ### Best Practices 1. **Key Rotation**: Regularly rotate encryption keys 2. **Environment Variables**: Use secure, random master keys in production 3. **Access Control**: Implement proper permission checks before encryption/decryption 4. **Input Validation**: Always validate and sanitize input data 5. **Audit Logging**: Log encryption/decryption operations for security monitoring ### Admin Role Security ‚ö†Ô∏è **CRITICAL SECURITY**: Admin roles can ONLY be assigned through direct database access. The permission system includes the following security measures: - Admin role assignment is blocked in all UI/API endpoints - Role assignment requires `admin.roles.manage` permission - All role operations are logged for audit purposes - Multiple security checks prevent bypassing admin role restrictions To assign admin role to a user, use direct database access: ```sql -- Only run this with direct database access INSERT INTO user_role_assignments (user_id, role_id, assigned_by) SELECT (SELECT id FROM users WHERE username = 'target_username'), (SELECT id FROM user_roles WHERE name = 'admin'), (SELECT id FROM users WHERE username = 'admin_username'); ``` ### Data Flow Security 1. **Personal Data**: User uploads ‚Üí Personal encryption ‚Üí Database storage 2. **Admin Approval**: Personal data ‚Üí Decrypt ‚Üí Re-encrypt with global key 3. **Global Access**: Global encrypted data ‚Üí Any authenticated user can decrypt ## Performance Considerations ### Caching - Keys are cached in memory to avoid repeated database calls - Cache is automatically cleared on key rotation - Use `BaseEncryptionService.clearKeyCache()` to manually clear cache ### Optimization Tips 1. **Batch Operations**: Process multiple items together when possible 2. **Key Reuse**: Cache frequently used keys 3. **Async Operations**: Use async/await for all encryption operations 4. **Validation First**: Validate data before encryption to avoid unnecessary work ## Error Handling ### Common Errors - `User ID required for personal encryption`: Missing userId for personal scope - `Invalid encrypted payload format`: Corrupted or invalid encrypted data - `Failed to retrieve encryption key`: Database or key derivation issues - `Can only re-encrypt personal data to global`: Attempting to re-encrypt global data ### Error Recovery 1. **Key Issues**: Try clearing cache and regenerating keys 2. **Validation Errors**: Check input data format and constraints 3. **Permission Errors**: Verify user has required permissions 4. **Database Errors**: Check database connectivity and schema ## Migration Guide ### From Old Emoji System The new system is backward compatible with the old emoji encryption system: 1. **Existing Data**: Old encrypted emojis continue to work 2. **New Features**: Use new encryption methods for new data 3. **Gradual Migration**: Migrate data during admin approval process ### API Changes - `EncryptionType` remains the same (`'personal' | 'global'`) - `EmojiEncryptedData` extends `EncryptedPayload` with emoji context - All existing API endpoints continue to work ## Testing ### Unit Tests ```typescript import { BaseEncryptionService, EncryptionUtils } from './base-encryption'; describe('BaseEncryptionService', () => { test('should encrypt and decrypt personal data', async () => { const data = 'test data'; const encrypted = await BaseEncryptionService.encrypt(data, { scope: 'personal', context: 'test', userId: 123 }); const decrypted = await BaseEncryptionService.decrypt(encrypted, { userId: 123 }); expect(decrypted).toBe(data); }); }); ``` ### Integration Tests Test the complete flow from API to encryption: 1. User uploads emoji 2. Emoji is encrypted with personal key 3. Admin approves emoji 4. Emoji is re-encrypted with global key 5. All users can access approved emoji ## Troubleshooting ### Debug Checklist 1. **Environment Variables**: Verify master keys are set 2. **Database Schema**: Ensure encryption tables exist 3. **Permissions**: Check user has required permissions 4. **Key Cache**: Try clearing cache if key issues persist 5. **Logs**: Check console for encryption error messages ### Common Issues - **Performance**: Clear key cache if operations are slow - **Permissions**: Verify admin permissions are correctly set - **Data Corruption**: Validate encrypted payloads before processing - **Key Rotation**: Ensure old data is re-encrypted after key rotation ## API Reference ### BaseEncryptionService Methods - `encrypt(data, options)`: Encrypt data with specified options - `decrypt(payload, options)`: Decrypt encrypted payload - `encryptBinary(buffer, options)`: Encrypt binary data - `decryptBinary(payload, options)`: Decrypt binary data - `reencryptPersonalToGlobal(payload, userId)`: Re-encrypt personal to global - `getPersonalKey(userId, context)`: Get/generate personal key - `getGlobalKey(context)`: Get/generate global key - `rotatePersonalKey(userId, context)`: Rotate personal key - `clearKeyCache()`: Clear key cache ### EmojiEncryptionService Methods - `encryptImageData(buffer, type, userId)`: Encrypt emoji image - `decryptImageData(payload, userId)`: Decrypt emoji image - `reencryptForGlobalAccess(payload, userId)`: Re-encrypt for global access - `validateImageConstraints(buffer, format)`: Validate image - `rotateEmojiKey(userId)`: Rotate emoji key for user ### EmojiEncryptionUtils Methods - `createEncryptedPayload(data)`: Serialize encrypted data - `parseEncryptedPayload(payload)`: Parse encrypted data - `generateEmojiId(name, userId)`: Generate unique emoji ID - `validateEmojiMetadata(metadata)`: Validate emoji metadata - `sanitizeEmojiData(data)`: Sanitize emoji data for XSS prevention ",
    "./src/lib/index.md": "--- layout: default title: 'Libraries' description: 'Shared utilities and services' permalink: /dev/libraries/ --- # üìö Libraries Shared utilities, services, and custom React hooks that power the Idling.app platform. These libraries provide reusable functionality across the entire application. ## ‚öôÔ∏è Core Services **[Core Services](services/)** - Authentication, caching, logging, and rate limiting services: - **Rate Limiting Service** - Comprehensive rate limiting with Redis backend - **Authentication Service** - JWT token management and role-based access control - **Cache Service** - High-performance caching with multiple backends - **Logging Service** - Structured logging with multiple transports - **Notification Service** - Multi-channel notification system - **Search Service** - Full-text search with Elasticsearch - **Analytics Service** - Comprehensive analytics and metrics collection ## üîß Utilities **[Utilities](utils/)** - Helper functions and parsers: - **String Utilities** - Text manipulation and formatting functions - **Date Utilities** - Date formatting and manipulation helpers - **Array Utilities** - Array processing and transformation functions - **Object Utilities** - Object manipulation and validation helpers - **Markdown Parser** - Simple markdown parsing and processing - **URL Parser** - URL validation and manipulation utilities - **Validation Utilities** - Form validation and data validation helpers - **Performance Utilities** - Debounce, throttle, and memoization functions ## üé£ React Hooks **[React Hooks](hooks/)** - Custom React hooks: - **Authentication Hooks** - useAuth, usePermissions for user management - **API Hooks** - useApi, usePagination for data fetching - **UI Hooks** - useModal, useDisclosure, useClickOutside for interface interactions - **Media Hooks** - useMediaQuery, useViewport for responsive design - **State Management Hooks** - useLocalStorage, useSessionStorage for persistence - **Performance Hooks** - useDebounce, useThrottle for optimization - **Form Hooks** - useForm for comprehensive form management ## üèóÔ∏è Architecture Overview ### Service Layer ```mermaid graph TB A[React Components] --> B[Custom Hooks] B --> C[Core Services] C --> D[Utilities] C --> E[External APIs] C --> F[Database] C --> G[Cache Layer] subgraph \"Core Services\" H[Auth Service] I[Rate Limit Service] J[Cache Service] K[Logging Service] L[Notification Service] end subgraph \"Utilities\" M[String Utils] N[Date Utils] O[Validation Utils] P[Performance Utils] end ``` ### Data Flow ```mermaid sequenceDiagram participant C as Component participant H as Hook participant S as Service participant U as Utility participant A as API C->>H: Call custom hook H->>S: Use service method S->>U: Apply utility functions S->>A: Make API request A-->>S: Return data S->>U: Process/validate data S-->>H: Return processed data H-->>C: Update component state ``` ## üöÄ Getting Started ### Installation All libraries are part of the main application and can be imported directly: ```typescript // Import services import { authService, rateLimitService } from '@/lib/services'; // Import utilities import { stringUtils, dateUtils } from '@/lib/utils'; // Import hooks import { useAuth, useApi } from '@/hooks'; ``` ### Basic Usage ```typescript // Using a service const user = await authService.getCurrentUser(); // Using utilities const slug = stringUtils.slugify('Hello World'); const timeAgo = dateUtils.formatRelative(new Date()); // Using hooks in components function MyComponent() { const { user, login } = useAuth(); const { data, loading } = useApi(fetchData); // Component logic... } ``` ## üìã Development Guidelines ### Service Development When creating new services: 1. **Follow the service pattern** - Implement consistent interfaces 2. **Include error handling** - Proper error propagation and logging 3. **Add comprehensive tests** - Unit and integration tests 4. **Document thoroughly** - Include usage examples and API docs 5. **Consider performance** - Optimize for high throughput scenarios ### Utility Development When creating utilities: 1. **Keep functions pure** - No side effects when possible 2. **Add TypeScript types** - Full type safety and IntelliSense 3. **Include edge case handling** - Robust error handling 4. **Write comprehensive tests** - Cover all use cases 5. **Optimize for reusability** - Generic and composable functions ### Hook Development When creating custom hooks: 1. **Follow React rules** - Adhere to Rules of Hooks 2. **Optimize performance** - Proper dependency arrays and memoization 3. **Handle cleanup** - Remove event listeners and cancel requests 4. **Provide good defaults** - Sensible default values and options 5. **Include TypeScript types** - Full type safety for props and returns ## üß™ Testing ### Service Testing ```typescript import { authService } from '@/lib/services/AuthService'; describe('AuthService', () => { test('should authenticate user with valid credentials', async () => { const result = await authService.authenticate({ email: 'test@example.com', password: 'password123' }); expect(result.success).toBe(true); expect(result.data.user).toBeDefined(); expect(result.data.token).toBeDefined(); }); }); ``` ### Utility Testing ```typescript import { stringUtils } from '@/lib/utils'; describe('stringUtils', () => { test('should slugify strings correctly', () => { expect(stringUtils.slugify('Hello World!')).toBe('hello-world'); expect(stringUtils.slugify('Test 123')).toBe('test-123'); }); }); ``` ### Hook Testing ```typescript import { renderHook, act } from '@testing-library/react'; import { useAuth } from '@/hooks/useAuth'; describe('useAuth', () => { test('should handle login flow', async () => { const { result } = renderHook(() => useAuth()); await act(async () => { await result.current.login({ email: 'test@example.com', password: 'password123' }); }); expect(result.current.isAuthenticated).toBe(true); expect(result.current.user).toBeDefined(); }); }); ``` ## üìä Performance Metrics ### Service Performance - **Authentication**: < 100ms average response time - **Rate Limiting**: < 10ms overhead per request - **Caching**: 95%+ cache hit rate for frequently accessed data - **Logging**: < 5ms overhead per log entry ### Utility Performance - **String Operations**: Optimized for large text processing - **Date Operations**: Cached timezone calculations - **Array Operations**: Memory-efficient for large datasets - **Validation**: Fast regex-based validation ## üîß Configuration ### Environment Variables ```bash # Service Configuration REDIS_HOST=localhost REDIS_PORT=6379 JWT_SECRET=your-secret-key LOG_LEVEL=info # Rate Limiting RATE_LIMIT_WINDOW_MS=900000 RATE_LIMIT_MAX_REQUESTS=100 # Cache Configuration CACHE_TTL=3600 CACHE_MAX_SIZE=1000 ``` ### Service Configuration ```typescript // config/services.ts export const servicesConfig = { auth: { jwtExpiration: '24h', refreshExpiration: '7d', bcryptRounds: 12 }, rateLimit: { windowMs: 15 DOCUMENTATION_ARCHITECTURE.md Dockerfile Dockerfile.docs LINK_AUDIT.md LinkedIn_Documentation_Infrastructure_Report.md PRODUCTION_PERFORMANCE_COMMANDS.txt PRODUCTION_PERFORMANCE_COMMANDS_WITH_PASSWORD.txt README-DB-EXPLORER.md README.md TESTING.md __mocks__ changelog-preset.js commitlint.config.js commits community coverage custom-eslint-rules debug-content-parser.js docker-compose.dev.yml docker-compose.yml docker-postgres docs documentation-coverage.md e2e global.d.ts index.md jekyll jest.config.js jest.env.js jest.setup.js logs migrations next-env.d.ts next.config.js node_modules package-lock.json package.json playwright-report playwright.config.ts pnpm-lock.yaml public scripts seed-db-faker.js sonar-project.properties src swagger.config.js test-results test_output.txt tsconfig.json tsconfig.tsbuildinfo updates yarn.lock 60 DOCUMENTATION_ARCHITECTURE.md Dockerfile Dockerfile.docs LINK_AUDIT.md LinkedIn_Documentation_Infrastructure_Report.md PRODUCTION_PERFORMANCE_COMMANDS.txt PRODUCTION_PERFORMANCE_COMMANDS_WITH_PASSWORD.txt README-DB-EXPLORER.md README.md TESTING.md __mocks__ changelog-preset.js commitlint.config.js commits community coverage custom-eslint-rules debug-content-parser.js docker-compose.dev.yml docker-compose.yml docker-postgres docs documentation-coverage.md e2e global.d.ts index.md jekyll jest.config.js jest.env.js jest.setup.js logs migrations next-env.d.ts next.config.js node_modules package-lock.json package.json playwright-report playwright.config.ts pnpm-lock.yaml public scripts seed-db-faker.js sonar-project.properties src swagger.config.js test-results test_output.txt tsconfig.json tsconfig.tsbuildinfo updates yarn.lock 1000, // 15 minutes max: 100, // requests per window skipSuccessfulRequests: false }, cache: { defaultTTL: 3600, // 1 hour maxSize: 1000, // max items checkPeriod: 600 // cleanup interval } }; ``` ## üîó Related Documentation - **[API Documentation](../../docs/api/)** - API endpoints using these libraries - **[Component Library](../components/)** - Components using these libraries - **[Testing Guide](../testing/)** - Testing strategies for libraries - **[Architecture](../../docs/architecture/)** - System architecture overview ## üìà Library Metrics ### Usage Statistics - **Most Used Service**: Authentication Service (95% of requests) - **Most Used Utility**: String utilities (stringUtils.slugify) - **Most Used Hook**: useAuth (used in 80% of components) ### Code Quality - **Test Coverage**: 95%+ across all libraries - **TypeScript Coverage**: 100% type safety - **ESLint Compliance**: 100% passing - **Performance Score**: A+ rating --- **Last Updated**: {{ site.time | date: \"%B %d, %Y\" }} > **Library Standards**: All libraries follow consistent patterns, include comprehensive documentation, and maintain high test coverage for reliability and maintainability. ",
    "./src/lib/logging.md": "# Logging System A unified, environment-aware logging solution with comprehensive features for development and production use. ## Features - **Environment-aware**: Adapts behavior based on development/production/test environments - **Context-aware**: Distinguishes between client/server contexts - **Performance optimized**: Conditional logging with minimal overhead - **ESLint compliant**: Uses approved console methods - **Structured output**: Automatic grouping and formatting - **Type-safe**: Full TypeScript support ## Basic Usage ```typescript import { createLogger } from '@/lib/logging'; const logger = createLogger({ context: { module: 'MyComponent' } }); logger.info('User action completed', { userId: '123', action: 'login' }); logger.error('API call failed', error, { endpoint: '/api/users' }); ``` ## Global Raw Logger Output (Browser Only) For debugging and copying log data, you can enable raw output mode that converts all logger output to copyable, structured text format. ### Enable Raw Output In your browser console, run: ```javascript // Enable raw output for all logger instances enableRawLoggerOutput(); ``` This will: - Override all console methods globally - Convert objects to structured, copyable text - Add timestamps to all log entries - Remove styling and formatting - Convert console groups to regular info messages (no expanding needed) - Make all log data easily copyable ### Example Output **Normal logging:** ``` üîç [MyComponent] User action completed {userId: \"123\", action: \"login\"} ``` **Raw output mode:** ``` [2024-01-15T10:30:45.123Z] INFO: üîç [MyComponent] User action completed { userId: \"123\", action: \"login\" } ``` ### Disable Raw Output To restore normal logging: ```javascript // Restore normal logging disableRawLoggerOutput(); ``` ### Check Status ```javascript // Check if raw output is enabled isRawLoggerOutputEnabled(); // returns true/false ``` ### Use Cases - **Debugging**: Copy complex object structures for analysis - **Bug reports**: Share exact log data with team members - **Testing**: Verify log output in automated tests - **Documentation**: Create examples from actual log output ### Important Notes - Only works in browser environments (not Node.js) - Affects **ALL** console output, not just logger instances - Automatically handles nested objects, arrays, and complex data structures - Converts console groups to regular messages (no expanding required) - Preserves original console methods and can be toggled on/off - No changes needed to existing logger code - works globally ## Logger Types ### Generic Logger ```typescript import { createLogger } from '@/lib/logging'; const logger = createLogger(); ``` ### Client Logger ```typescript import { createClientLogger } from '@/lib/logging'; const logger = createClientLogger(); ``` ### Server Logger ```typescript import { createServerLogger } from '@/lib/logging'; const logger = createServerLogger(); ``` ### Debug Logger ```typescript import { createDebugLogger } from '@/lib/logging'; const logger = createDebugLogger(); ``` ## Configuration ```typescript const logger = createLogger({ level: 'DEBUG', context: { module: 'UserService', component: 'LoginForm' }, performance: { enabled: true, slowThreshold: 1000 } }); ``` ",
    "./src/lib/parsers.md": "# Rich Text Parser System A comprehensive, zero-dependency parsing system for rich content including markdown, emojis, images, and existing content pills (hashtags, mentions, URLs). ## Features - **Markdown Support**: Bold, italic, code, links, strikethrough, underline, blockquotes, lists - **Emoji Support**: Unicode emojis + custom emoji registry with runtime additions - **Image Embeds**: Multiple formats (markdown, HTML, custom) with security controls - **Content Pills**: Hashtags, mentions, and URL pills (existing system) - **Zero Dependencies**: No external libraries required - **Security First**: XSS protection, URL sanitization, domain whitelisting - **Scalable**: Modular architecture, easy to extend ## Quick Start ### Basic Usage ```typescript import { richTextParser } from '@/lib/utils/parsers/rich-text-parser'; // Parse and render content const content = \"Hello **world**! :smile: Check out ![this image](https://example.com/image.jpg)\"; const html = richTextParser.replaceWithHtml(content); ``` ### React Component ```tsx import RichTextRenderer from '@/app/components/rich-text/RichTextRenderer'; function MyComponent() { const content = \"**Bold text** with :fire: emoji and #hashtag\"; return ( <RichTextRenderer content={content} onEmojiClick={(emojiId) => console.log('Clicked emoji:', emojiId)} onImageClick={(src) => console.log('Clicked image:', src)} /> ); } ``` ## Supported Syntax ### Markdown | Syntax | Result | Example | |--------|--------|---------| | `**bold**` | **bold** | `**Hello world**` | | `*italic*` | *italic* | `*emphasized text*` | | `~~strikethrough~~` | ~~strikethrough~~ | `~~deleted text~~` | | `<u>underline</u>` | <u>underline</u> | `<u>important</u>` | | `` `code` `` | `code` | `` `console.log()` `` | | `[link](url)` | [link](url) | `[Google](https://google.com)` | | `> quote` | > quote | `> This is a quote` | | `- list item` | ‚Ä¢ list item | `- First item` | ### Emojis | Syntax | Result | Notes | |--------|--------|-------| | `:smile:` | üòÑ | Standard Unicode emoji | | `:custom_emoji:` | ![custom] | Custom emoji (if registered) | **Built-in Emojis**: smile, joy, heart_eyes, wink, thinking, thumbsup, thumbsdown, clap, wave, heart, fire, rocket, star, trophy, computer, sun, moon, tree, flower, and more. ### Images | Format | Syntax | Example | |--------|--------|---------| | Markdown | `![alt](url \"title\")` | `![Logo](https://example.com/logo.png \"Company Logo\")` | | HTML | `<img src=\"url\" alt=\"alt\">` | `<img src=\"https://example.com/image.jpg\" alt=\"Photo\">` | | Custom | `{img:url\|alt\|title\|width\|height}` | `{img:https://example.com/pic.jpg\|Photo\|My Photo\|400\|300}` | ### Content Pills (Existing System) | Type | Syntax | Example | |------|--------|---------| | Hashtag | `#tagname` | `#javascript` | | Mention | `@[username\|userId]` | `@[john\|123]` | | Enhanced Mention | `@[username\|userId\|filterType]` | `@[john\|123\|author]` | | URL Pill | `![behavior](url)` | `![embed](https://youtube.com/watch?v=abc)` | ## API Reference ### RichTextParser ```typescript class RichTextParser { constructor(config?: RichTextConfig) parse(text: string): RichTextToken[] replaceWithHtml(text: string): string tokensToHtml(tokens: RichTextToken[]): string updateConfig(config: Partial<RichTextConfig>): void addCustomEmoji(emoji: EmojiDefinition): void } ``` ### Configuration ```typescript interface RichTextConfig { enableMarkdown?: boolean; // Default: true enableEmojis?: boolean; // Default: true enableImages?: boolean; // Default: true enableHashtags?: boolean; // Default: true enableMentions?: boolean; // Default: true enableUrls?: boolean; // Default: true imageConfig?: { maxWidth?: number; // Default: 800 maxHeight?: number; // Default: 600 allowedDomains?: string[]; // Default: common CDNs }; } ``` ### Individual Parsers #### MarkdownParser ```typescript class MarkdownParser { static parse(text: string): MarkdownToken[] static tokensToHtml(tokens: MarkdownToken[]): string } ``` #### EmojiParser ```typescript class EmojiParser { parse(text: string): EmojiToken[] replaceEmojisWithHtml(text: string): string getSuggestions(query: string, limit?: number): EmojiDefinition[] addCustomEmoji(emoji: EmojiDefinition): void } ``` #### ImageParser ```typescript class ImageParser { constructor(config?: ImageConfig) parse(text: string): ImageToken[] replaceImagesWithHtml(text: string): string updateConfig(config: Partial<ImageConfig>): void } ``` ## Advanced Usage ### Custom Emoji Registry ```typescript import { emojiRegistry } from '@/lib/utils/parsers/emoji-parser'; // Add custom emoji emojiRegistry.registerEmoji({ id: 'custom_logo', name: 'custom_logo', imageUrl: 'https://example.com/logo.png', category: 'custom', tags: ['logo', 'brand'], aliases: ['logo', 'brand'] }); // Search emojis const results = emojiRegistry.searchEmojis('happy'); ``` ### Image Security Configuration ```typescript import { imageParser } from '@/lib/utils/parsers/image-parser'; imageParser.updateConfig({ maxWidth: 1200, maxHeight: 800, allowedDomains: [ 'imgur.com', 'github.com', 'your-cdn.com' ], allowedExtensions: ['jpg', 'png', 'gif', 'webp'] }); ``` ### Selective Parsing ```typescript // Only enable specific features const parser = new RichTextParser({ enableMarkdown: true, enableEmojis: true, enableImages: false, // Disable images enableHashtags: false, // Disable hashtags enableMentions: true, enableUrls: true }); ``` ### Token-Level Processing ```typescript const tokens = richTextParser.parse(\"**Bold** text with :smile:\"); tokens.forEach(token => { switch (token.type) { case 'markdown': console.log('Markdown:', token.markdownType, token.content); break; case 'emoji': console.log('Emoji:', token.emojiId, token.emojiUnicode); break; case 'text': console.log('Text:', token.content); break; } }); ``` ## React Components ### RichTextRenderer ```tsx <RichTextRenderer content=\"Your **rich** content here :smile:\" config={{ enableMarkdown: true, enableEmojis: true, enableImages: true }} onEmojiClick={(emojiId) => handleEmojiClick(emojiId)} onImageClick={(src) => openImageModal(src)} onLinkClick={(url) => handleLinkClick(url)} maxLength={500} className=\"my-rich-text\" /> ``` ### EmojiPicker ```tsx <EmojiPicker onEmojiSelect={(emoji) => insertEmoji(emoji)} categories={['faces', 'gestures', 'hearts']} searchQuery={searchTerm} maxResults={30} /> ``` ### EmojiRenderer ```tsx <EmojiRenderer emojiId=\"smile\" size=\"large\" className=\"my-emoji\" /> ``` ## Security Features ### XSS Protection - All user input is escaped before rendering - HTML attributes are sanitized - Dangerous protocols (javascript:, data:) are blocked ### URL Sanitization - Only HTTPS URLs allowed for external content - Domain whitelisting for images - Protocol validation for all links ### Content Security Policy - Image sources are validated against allowlist - Custom emoji URLs are sanitized - File extension validation for images ## Performance Considerations ### Parsing Order 1. **Images** (highest priority - avoid markdown conflicts) 2. **Content Pills** (hashtags, mentions, URLs) 3. **Markdown** (after URLs to prevent conflicts) 4. **Emojis** (lowest priority - fill remaining text) ### Optimization Tips - Use `useMemo` in React components to cache parsed content - Implement debouncing for real-time preview - Consider pagination for large emoji sets - Use lazy loading for custom emoji images ## Browser Support - **Modern Browsers**: Full support (Chrome 80+, Firefox 75+, Safari 13+) - **Legacy Browsers**: Graceful degradation (emojis show as text) - **Mobile**: Responsive design with touch-friendly controls ## Migration from Existing System The new parser is fully backward compatible with existing content pills: ```typescript // Old way (still works) import { renderContentWithPills } from '@/lib/utils/content-parsers'; const html = renderContentWithPills(content); // New way (enhanced features) import { renderRichContent } from '@/lib/utils/content-parsers'; const html = renderRichContent(content, { enableMarkdown: true, enableEmojis: true, enableImages: true }); ``` ## Examples ### Blog Post Content ```typescript const blogContent = ` # My Blog Post This is **bold** and *italic* text with some \`code\`. > Here's an important quote Check out this image: ![Screenshot](https://example.com/screenshot.png) And here's a custom emoji: :custom_logo: Don't forget to follow me: @[username|123] and check out #webdev `; const html = richTextParser.replaceWithHtml(blogContent); ``` ### Social Media Post ```typescript const socialPost = ` Just launched my new app! :rocket: :fire: **Features:** - Real-time chat :speech_balloon: - Image sharing ![Camera](https://example.com/camera.png) - Custom emojis :custom_heart: Check it out: ![link](https://myapp.com) #webapp #javascript #react `; ``` ### Comment System ```typescript const comment = ` Great post @[author|456]! :thumbsup: The part about **performance optimization** was especially helpful. Here's a related article: ![link](https://example.com/article) `; ``` ## Troubleshooting ### Common Issues 1. **Emojis not showing**: Check emoji registry and ensure proper aliases 2. **Images not loading**: Verify domain whitelist and HTTPS requirements 3. **Markdown conflicts**: Review parsing order and escape special characters 4. **Performance issues**: Implement memoization and debouncing ### Debug Mode ```typescript // Enable debug logging const parser = new RichTextParser(); const tokens = parser.parse(content); console.log('Parsed tokens:', tokens); ``` ### Testing ```typescript // Test individual parsers import { MarkdownParser } from '@/lib/utils/parsers/markdown-parser'; const tokens = MarkdownParser.parse('**test**'); console.log(tokens); // [{ type: 'bold', content: 'test', ... }] ``` ",
    "./src/lib/services/EnhancedQuotaService.md": "--- title: EnhancedQuotaService category: service tags: [documentation-needed] status: draft --- # EnhancedQuotaService > ‚ö†Ô∏è **Documentation Needed**: This file was automatically generated and needs content. ## Overview TODO: Describe what this service does. ## Usage TODO: Provide usage examples. ## API Reference TODO: Document the public interface. --- *File: `src/lib/services/EnhancedQuotaService.ts`* *Auto-generated on: 2025-07-01 11:33:14* ",
    "./src/lib/services/RateLimitService.md": "--- title: RateLimitService category: service tags: [rate-limiting, security, api-protection, singleton] status: documented --- # RateLimitService A unified, composable rate limiting system that handles all rate limiting needs across the application. This service provides both per-minute sliding window limits and daily quota limits with database persistence. ## Overview The `RateLimitService` is a singleton service that implements: - **Sliding Window Rate Limiting**: For per-minute API limits using in-memory storage - **Daily Quota Limits**: For resource-intensive operations with database persistence - **Attack Detection**: Progressive penalties for detected abuse patterns - **Development Bypass**: Configurable bypass for development environments - **Edge Runtime Compatibility**: Works in both Node.js and Edge Runtime environments ## Key Features ### üîí **Multiple Rate Limiting Strategies** - **Memory-based**: Fast sliding window limits for standard API requests - **Database-backed**: Persistent daily quotas for expensive operations - **Progressive Penalties**: Escalating timeouts for repeated violations ### üõ°Ô∏è **Attack Protection** - Automatic detection of abuse patterns - Progressive backoff periods (1min ‚Üí 5min ‚Üí 15min ‚Üí 1hr ‚Üí 6hr ‚Üí 24hr) - Separate attack-specific rate limits ### ‚öôÔ∏è **Flexible Configuration** - Pre-configured limits for common scenarios - Custom rate limiting configurations - Per-endpoint customization ## Usage ### Basic Rate Limiting ```typescript import { RateLimitService } from '@/lib/services/RateLimitService'; const rateLimiter = RateLimitService.getInstance(); // Check rate limit for API endpoint const result = await rateLimiter.checkRateLimit({ identifier: req.ip, configType: 'api' }); if (!result.allowed) { return new Response('Rate limit exceeded', { status: 429, headers: { 'Retry-After': result.retryAfter?.toString() || '60' } }); } ``` ### Daily Quota Limiting ```typescript // For expensive operations like OG image generation const result = await rateLimiter.checkRateLimit({ identifier: userId, configType: 'og-image' // Daily quota with database persistence }); if (!result.allowed) { return new Response('Daily quota exceeded', { status: 429 }); } ``` ### Custom Rate Limiting ```typescript // Create custom rate limit configuration const result = await rateLimiter.checkRateLimit({ identifier: 'custom-operation', configType: 'custom', customConfig: { windowMs: 5 DOCUMENTATION_ARCHITECTURE.md Dockerfile Dockerfile.docs LINK_AUDIT.md LinkedIn_Documentation_Infrastructure_Report.md PRODUCTION_PERFORMANCE_COMMANDS.txt PRODUCTION_PERFORMANCE_COMMANDS_WITH_PASSWORD.txt README-DB-EXPLORER.md README.md TESTING.md __mocks__ changelog-preset.js commitlint.config.js commits community coverage custom-eslint-rules debug-content-parser.js docker-compose.dev.yml docker-compose.yml docker-postgres docs documentation-coverage.md e2e global.d.ts index.md jekyll jest.config.js jest.env.js jest.setup.js logs migrations next-env.d.ts next.config.js node_modules package-lock.json package.json playwright-report playwright.config.ts pnpm-lock.yaml public scripts seed-db-faker.js sonar-project.properties src swagger.config.js test-results test_output.txt tsconfig.json tsconfig.tsbuildinfo updates yarn.lock 60 DOCUMENTATION_ARCHITECTURE.md Dockerfile Dockerfile.docs LINK_AUDIT.md LinkedIn_Documentation_Infrastructure_Report.md PRODUCTION_PERFORMANCE_COMMANDS.txt PRODUCTION_PERFORMANCE_COMMANDS_WITH_PASSWORD.txt README-DB-EXPLORER.md README.md TESTING.md __mocks__ changelog-preset.js commitlint.config.js commits community coverage custom-eslint-rules debug-content-parser.js docker-compose.dev.yml docker-compose.yml docker-postgres docs documentation-coverage.md e2e global.d.ts index.md jekyll jest.config.js jest.env.js jest.setup.js logs migrations next-env.d.ts next.config.js node_modules package-lock.json package.json playwright-report playwright.config.ts pnpm-lock.yaml public scripts seed-db-faker.js sonar-project.properties src swagger.config.js test-results test_output.txt tsconfig.json tsconfig.tsbuildinfo updates yarn.lock 1000, // 5 minutes maxRequests: 10, // 10 requests per window storage: 'memory' } }); ``` ## Pre-configured Rate Limits | Config Type | Window | Max Requests | Storage | Use Case | | ----------- | -------- | ------------ | -------- | ------------------------ | | `api` | 1 minute | 100 | Memory | Standard API requests | | `auth` | 1 minute | 500 | Memory | Authentication endpoints | | `upload` | 1 minute | 5 | Memory | File uploads | | `search` | 1 minute | 200 | Memory | Search/filter operations | | `admin` | 1 minute | 50 | Memory | Admin panel actions | | `sse` | 1 minute | 1000 | Memory | Server-sent events | | `og-image` | 24 hours | 1 | Database | Daily OG image quota | | `attack` | 1 hour | 1 | Memory | Detected abuse patterns | ## API Reference ### `checkRateLimit(options: RateLimitOptions): Promise<RateLimitResult>` Main method to check if a request should be rate limited. **Parameters:** - `options.identifier`: Unique identifier (IP address, user ID, etc.) - `options.configType`: Pre-configured rate limit type or 'custom' - `options.customConfig`: Custom configuration (required if configType is 'custom') - `options.bypassDevelopment`: Whether to bypass limits in development **Returns:** `RateLimitResult` object with: - `allowed`: Whether the request is allowed - `remaining`: Number of requests remaining in window - `resetTime`: Timestamp when window resets - `retryAfter`: Seconds to wait before retrying (if blocked) - `penaltyLevel`: Current penalty level (0-5) - `isAttack`: Whether this is classified as an attack - `quotaType`: Type of quota applied ### `createAPILimiter(configType?: string)` Creates a middleware-style rate limiter for API routes. ### `createCustomLimiter(config: RateLimitConfig)` Creates a custom rate limiter with specific configuration. ### `resetRateLimit(identifier: string, configType?: string): void` Manually reset rate limit for a specific identifier. ### `getStats()` Get current rate limiting statistics and memory usage. ## Attack Detection & Progressive Penalties The service automatically detects abuse patterns and applies progressive penalties: 1. **Level 0**: Normal operation 2. **Level 1**: 1-minute backoff after violation 3. **Level 2**: 5-minute backoff 4. **Level 3**: 15-minute backoff 5. **Level 4**: 1-hour backoff 6. **Level 5**: 6-hour backoff 7. **Level 6+**: 24-hour backoff Penalty levels increase with repeated violations and decay over time. ## Edge Runtime Compatibility The service gracefully handles both Node.js and Edge Runtime environments: - Conditional imports for Node.js-specific dependencies - Fallback implementations for Edge Runtime - Graceful degradation when database is unavailable ## Environment Configuration ### Development Bypass Set `BYPASS_RATE_LIMIT=true` in your environment to disable rate limiting during development. ### Database Configuration For daily quotas, ensure your database service is properly configured. The service will fall back to memory-only operation if database is unavailable. ## Example: API Route Implementation ```typescript // app/api/example/route.ts import { RateLimitService } from '@/lib/services/RateLimitService'; import { getClientIP } from '@/lib/utils/request'; export async function GET(request: Request) { const rateLimiter = RateLimitService.getInstance(); const clientIP = getClientIP(request); // Check rate limit const rateLimit = await rateLimiter.checkRateLimit({ identifier: clientIP, configType: 'api' }); if (!rateLimit.allowed) { return new Response( JSON.stringify({ error: 'Rate limit exceeded', retryAfter: rateLimit.retryAfter, quotaType: rateLimit.quotaType }), { status: 429, headers: { 'Content-Type': 'application/json', 'Retry-After': rateLimit.retryAfter?.toString() || '60', 'X-RateLimit-Remaining': rateLimit.remaining.toString(), 'X-RateLimit-Reset': rateLimit.resetTime.toString() } } ); } // Process request normally return new Response(JSON.stringify({ data: 'success' })); } ``` ## Security Considerations - **IP-based Limiting**: Use client IP for anonymous rate limiting - **User-based Limiting**: Use authenticated user ID for user-specific limits - **Attack Mitigation**: Progressive penalties help mitigate sustained attacks - **Resource Protection**: Daily quotas protect expensive operations ## Performance Notes - Memory storage provides sub-millisecond lookup times - Database storage adds ~2-5ms latency for daily quotas - Automatic cleanup prevents memory leaks - Singleton pattern ensures efficient resource usage --- _File: `src/lib/services/RateLimitService.ts`_ _Last Updated: 2025-07-02_ ",
    "./src/lib/testing.md": "--- layout: default title: 'Testing Strategies' description: 'Testing frameworks, strategies, and quality assurance documentation' permalink: /dev/testing/ --- # üß™ Testing Strategies Comprehensive testing documentation covering unit tests, integration tests, end-to-end testing, and continuous integration. ## üî¨ Unit Testing **[Unit Testing](unit/)** - Component and function testing: - Jest configuration and setup - React Testing Library best practices - Component testing strategies - Mock implementations - Test coverage requirements - Snapshot testing guidelines ## üåê E2E Testing **[End-to-End Testing](e2e/)** - Full application testing: - Playwright configuration and setup - User journey testing - Cross-browser compatibility - Visual regression testing - Performance testing - Mobile testing strategies ## üîÑ CI/CD **[Continuous Integration](ci-cd/)** - Automated testing pipeline: - GitHub Actions configuration - Test automation workflows - Quality gates and requirements - Deployment testing - Performance monitoring - Security scanning ## üéØ Testing Philosophy ### Test Pyramid 1. **Unit Tests** (70%) - Fast, isolated, comprehensive 2. **Integration Tests** (20%) - Component interactions 3. **E2E Tests** (10%) - Critical user journeys ### Quality Standards - **Coverage**: Minimum 80% code coverage - **Performance**: Tests complete in under 5 minutes - **Reliability**: Tests are deterministic and stable - **Maintainability**: Clear, readable test code ## üõ†Ô∏è Testing Tools ### Unit Testing Stack - **Jest** - Test runner and assertion library - **React Testing Library** - Component testing utilities - **MSW** - API mocking for integration tests - **@testing-library/jest-dom** - Custom Jest matchers ### E2E Testing Stack - **Playwright** - Cross-browser automation - **Percy** - Visual regression testing - **Lighthouse CI** - Performance testing - **Axe** - Accessibility testing ## üìä Test Reports ### Coverage Reports - Line coverage: 85%+ - Branch coverage: 80%+ - Function coverage: 90%+ - Statement coverage: 85%+ ### Performance Metrics - Unit test execution: < 30 seconds - E2E test execution: < 5 minutes - CI pipeline completion: < 10 minutes ## üöÄ Getting Started 1. **[Set up unit tests](unit/)** - Configure Jest and RTL 2. **[Configure E2E tests](e2e/)** - Set up Playwright 3. **[Enable CI/CD](ci-cd/)** - Automate testing pipeline ## üìã Testing Checklist ### Before Committing - [ ] All unit tests pass - [ ] Code coverage meets requirements - [ ] No linting errors - [ ] Component tests include accessibility checks ### Before Deploying - [ ] All E2E tests pass - [ ] Performance tests meet benchmarks - [ ] Security scans complete - [ ] Visual regression tests pass ## üîó Related Sections - **[Components](../../src/components/)** - Component testing examples - **[Tools](../tools/)** - Development environment setup - **[Documentation](../../docs/)** - API testing documentation --- _Testing documentation is continuously updated. Last updated: {{ site.time | date: \"%B %d, %Y\" }}_ ",
    "./src/lib/tools.md": "--- layout: default title: 'Development Tools' description: 'Development environment setup, tools, and utilities documentation' permalink: /dev/tools/ --- # üîß Development Tools Comprehensive guide to development environment setup, tools, performance optimization, and debugging utilities. ## üîß Environment **[Development Environment](environment/)** - Setup and configuration: - Local development setup - Docker containerization - Environment variables management - IDE configuration and extensions - Git hooks and pre-commit setup - Package management and dependencies ## ‚è≥ Performance **[Performance Tools](performance/)** - Optimization and monitoring: - Bundle analysis and optimization - Performance profiling tools - Memory usage monitoring - Network performance analysis - Lighthouse integration - Performance budgets and alerts ## üîç Debugging **[Debugging Tools](debugging/)** - Troubleshooting and diagnostics: - Browser DevTools configuration - React DevTools usage - Network debugging - Error tracking and logging - Performance debugging - Production debugging strategies ## üõ†Ô∏è Essential Tools ### Development Environment - **Node.js** (v18+) - JavaScript runtime - **Yarn** - Package manager - Dockerfile Dockerfile.docs - Containerization - **Git** - Version control - **VS Code** - Recommended IDE ### Build Tools - **Next.js** - React framework - **TypeScript** - Type safety - **ESLint** - Code linting - **Prettier** - Code formatting - **Husky** - Git hooks ### Testing Tools - **Jest** - Unit testing - **Playwright** - E2E testing - **React Testing Library** - Component testing - **MSW** - API mocking ### Performance Tools - **Lighthouse** - Performance auditing - **Bundle Analyzer** - Bundle analysis - **React Profiler** - Component performance - **Chrome DevTools** - Browser debugging ## üöÄ Quick Setup ### 1. Prerequisites ```bash # Install Node.js (v18+) node --version # Install Yarn npm install -g yarn # Install Docker docker --version ``` ### 2. Project Setup ```bash # Clone repository git clone https://github.com/Underwood-Inc/idling.app__UI.git cd idling.app__UI # Install dependencies yarn install # Set up environment cp .env.example .env.local # Start development server yarn dev ``` ### 3. IDE Configuration **VS Code Extensions:** - ES7+ React/Redux/React-Native snippets - TypeScript Hero - Prettier - Code formatter - ESLint - GitLens - Auto Rename Tag - Bracket Pair Colorizer ## üìä Performance Monitoring ### Metrics to Track - **Bundle Size** - Keep under 500KB - **First Contentful Paint** - Under 1.5s - **Largest Contentful Paint** - Under 2.5s - **Time to Interactive** - Under 3.5s - **Cumulative Layout Shift** - Under 0.1 ### Monitoring Tools - **Lighthouse CI** - Automated performance testing - **Web Vitals** - Core performance metrics - **Bundle Analyzer** - Bundle size analysis - **React Profiler** - Component performance ## üêõ Debugging Strategies ### Common Issues 1. **Performance Problems** - Use React Profiler to identify slow components - Check for unnecessary re-renders - Optimize bundle size 2. **Memory Leaks** - Monitor memory usage in DevTools - Check for event listener cleanup - Analyze component lifecycle 3. **Network Issues** - Use Network tab in DevTools - Check API response times - Verify caching strategies ## üîó Tool Configuration ### ESLint Configuration ```json { \"extends\": [ \"next/core-web-vitals\", \"@typescript-eslint/recommended\", \"prettier\" ], \"rules\": { \"prefer-const\": \"error\", \"no-unused-vars\": \"error\", \"@typescript-eslint/no-explicit-any\": \"warn\" } } ``` ### Prettier Configuration ```json { \"semi\": true, \"trailingComma\": \"es5\", \"singleQuote\": true, \"printWidth\": 80, \"tabWidth\": 2, \"useTabs\": false } ``` ## üöÄ Getting Started 1. **[Set up environment](environment/)** - Configure development setup 2. **[Configure performance tools](performance/)** - Set up monitoring 3. **[Learn debugging techniques](debugging/)** - Master troubleshooting ## üìã Development Checklist ### Before Starting - [ ] Environment variables configured - [ ] Dependencies installed - [ ] IDE extensions installed - [ ] Git hooks set up ### During Development - [ ] Code linting passes - [ ] Tests are passing - [ ] Performance budgets met - [ ] Accessibility checks pass ## üîó Related Sections - **[Testing](../testing/)** - Testing tools and strategies - **[Components](../../src/components/)** - Component development - **[Database](../database/)** - Database tools --- _Development tools documentation is continuously updated. Last updated: {{ site.time | date: \"%B %d, %Y\" }}_ ",
    "./src/lib/utils/README.md": "# üõ†Ô∏è Utility Functions This directory contains utility functions and helpers used throughout the idling.app application. Each utility is designed to be modular, reusable, and well-tested. ## üìÅ Directory Structure ``` src/lib/utils/ ‚îú‚îÄ‚îÄ README.md # This file - overview of all utilities ‚îú‚îÄ‚îÄ array/ # Array manipulation utilities ‚îÇ ‚îú‚îÄ‚îÄ README.md # Array utilities documentation ‚îÇ ‚îî‚îÄ‚îÄ dedupe-string-array.ts # Remove duplicates from string arrays ‚îú‚îÄ‚îÄ parsers/ # Content parsing utilities ‚îÇ ‚îú‚îÄ‚îÄ README.md # Parser utilities documentation ‚îÇ ‚îú‚îÄ‚îÄ emoji-parser.ts # Emoji processing and rendering ‚îÇ ‚îú‚îÄ‚îÄ image-parser.ts # Image URL and metadata parsing ‚îÇ ‚îú‚îÄ‚îÄ markdown-parser.ts # Markdown to HTML conversion ‚îÇ ‚îî‚îÄ‚îÄ rich-text-parser.ts # Rich text content processing ‚îú‚îÄ‚îÄ string/ # String manipulation utilities ‚îÇ ‚îú‚îÄ‚îÄ README.md # String utilities documentation ‚îÇ ‚îú‚îÄ‚îÄ index.ts # String utilities exports ‚îÇ ‚îú‚îÄ‚îÄ make-id.ts # Generate unique identifiers ‚îÇ ‚îú‚îÄ‚îÄ tag-regex.ts # Regular expressions for tags ‚îÇ ‚îî‚îÄ‚îÄ tag-utils.ts # Tag processing utilities ‚îú‚îÄ‚îÄ cache-manager.ts # Application cache management ‚îú‚îÄ‚îÄ content-parsers.ts # Advanced content parsing and tokenization ‚îú‚îÄ‚îÄ hard-reset-manager.ts # Application state reset utilities ‚îú‚îÄ‚îÄ os-detection.ts # Operating system detection ‚îú‚îÄ‚îÄ privacy.ts # Privacy and data protection utilities ‚îú‚îÄ‚îÄ requestIdentifier.ts # Request identification and tracking ‚îú‚îÄ‚îÄ scroll-highlight-demo.ts # Scroll-based highlighting demo ‚îú‚îÄ‚îÄ scroll-position.ts # Scroll position management ‚îú‚îÄ‚îÄ server-logger.ts # Server-side logging utilities ‚îú‚îÄ‚îÄ service-worker-cleanup.ts # Service worker management and cleanup ‚îú‚îÄ‚îÄ social-sharing.ts # Social media sharing utilities ‚îú‚îÄ‚îÄ text-extraction.ts # Text parsing and extraction ‚îú‚îÄ‚îÄ time-utils.ts # Time and date utilities ‚îî‚îÄ‚îÄ timeFormatting.ts # Time formatting and display ``` ## üöÄ Core Utilities ### Text Processing - **[text-extraction.ts](./text-extraction.ts)** - Extract hashtags, mentions, URLs, and emojis from text - **[content-parsers.ts](./content-parsers.ts)** - Advanced content parsing with tokenization - **[parsers/](./parsers/)** - Specialized content parsers (emoji, image, markdown, rich text) ### System Management - **[service-worker-cleanup.ts](./service-worker-cleanup.ts)** - Browser service worker debugging and cleanup - **[cache-manager.ts](./cache-manager.ts)** - Application cache management and optimization - **[hard-reset-manager.ts](./hard-reset-manager.ts)** - Complete application state reset ### Data Utilities - **[string/](./string/)** - String manipulation and ID generation - **[array/](./array/)** - Array processing and deduplication - **[time-utils.ts](./time-utils.ts)** & **[timeFormatting.ts](./timeFormatting.ts)** - Time and date handling ### UI & Interaction - **[scroll-position.ts](./scroll-position.ts)** - Scroll position tracking and management - **[scroll-highlight-demo.ts](./scroll-highlight-demo.ts)** - Scroll-based highlighting effects - **[os-detection.ts](./os-detection.ts)** - Operating system and browser detection ### Infrastructure - **[server-logger.ts](./server-logger.ts)** - Server-side logging and monitoring - **[requestIdentifier.ts](./requestIdentifier.ts)** - Request tracking and identification - **[privacy.ts](./privacy.ts)** - Privacy protection and data handling - **[social-sharing.ts](./social-sharing.ts)** - Social media integration ## üìñ Usage Patterns ### Importing Utilities ```typescript // Import specific utilities import { TextExtractor } from '@/lib/utils/text-extraction'; import { CacheManager } from '@/lib/utils/cache-manager'; // Import from subdirectories import { makeId } from '@/lib/utils/string/make-id'; import { EmojiParser } from '@/lib/utils/parsers/emoji-parser'; ``` ### Common Patterns ```typescript // Text processing pipeline import { TextExtractor } from '@/lib/utils/text-extraction'; import { ContentParser } from '@/lib/utils/content-parsers'; const userInput = 'Check out #coding with @[dev|user123] üöÄ'; const extracted = TextExtractor.extractAll(userInput); const parsed = ContentParser.parse(userInput); // Cache management import { CacheManager } from '@/lib/utils/cache-manager'; await CacheManager.set('user-data', userData, { ttl: 3600 }); const cachedData = await CacheManager.get('user-data'); // System utilities import { OSDetection } from '@/lib/utils/os-detection'; import { Logger } from '@/lib/utils/server-logger'; const userOS = OSDetection.detect(); Logger.info('User connected', { os: userOS }); ``` ## üîß Development Guidelines ### Creating New Utilities 1. **Single Responsibility** - Each utility should have a clear, focused purpose 2. **Type Safety** - Use TypeScript interfaces and proper type definitions 3. **Error Handling** - Include comprehensive error handling and validation 4. LinkedIn_Documentation_Infrastructure_Report.md - Add JSDoc comments and usage examples 5. **Testing** - Write unit tests for all public functions ### File Organization - **Root level** - General-purpose utilities used across the application - **Subdirectories** - Related utilities grouped by domain (string, array, parsers) - README.md - Documentation for each directory and major utility ### Naming Conventions - **Files** - kebab-case (e.g., `text-extraction.ts`) - **Classes** - PascalCase (e.g., `TextExtractor`) - **Functions** - camelCase (e.g., `extractHashtags`) - **Constants** - UPPER_SNAKE_CASE (e.g., `MAX_CACHE_SIZE`) ## üß™ Testing Each utility should include comprehensive tests: ```typescript // Example test structure describe('TextExtractor', () => { describe('extractHashtags', () => { it('should extract hashtags from text', () => { const text = 'Love #coding and #javascript!'; const hashtags = TextExtractor.extractHashtags(text); expect(hashtags).toEqual(['#coding', '#javascript']); }); }); }); ``` ## üìö Related Documentation - **[Libraries Documentation](../../DOCS/libraries/)** - Higher-level library documentation - **[Development Guide](../../DOCS/development/)** - Development setup and practices - **[API Documentation](../../app/api/README.md)** - API endpoint documentation --- _These utilities form the foundation of idling.app's functionality. They are designed to be reliable, performant, and easy to use across the entire application._ ",
    "./src/lib/utils/logging.md": "--- layout: default title: Logging System description: Comprehensive logging utilities with context-aware debugging and production optimization --- # Logging System The logging system provides a comprehensive, context-aware logging solution with development debugging support and production optimization. Located in `src/lib/logging/`, this system offers structured logging with performance monitoring and intelligent filtering. ## Overview The logging system consists of: - **Core Logger**: Main logging engine with level-based filtering - **Context Management**: Automatic context injection and tracking - **Performance Monitoring**: Built-in timing and profiling capabilities - **Development Tools**: Enhanced debugging with source mapping - **Production Optimization**: Automatic log level adjustment and filtering ## Key Features - üéØ **Context-Aware**: Automatic component and module context injection - üìä **Performance Monitoring**: Built-in timing and profiling - üîç **Development Debugging**: Enhanced logging with source maps - üöÄ **Production Optimized**: Automatic filtering and level adjustment - üì± **Environment Aware**: Different behavior for dev/staging/production - üé® **Structured Output**: Consistent formatting with metadata - üîß **Configurable**: Flexible configuration per component/module ## Basic Usage ```tsx import { createLogger } from '@/lib/logging'; const logger = createLogger({ context: { component: 'MyComponent', module: 'user-interface' } }); function MyComponent() { logger.info('Component mounted'); logger.debug('Rendering with props:', { userId: 123 }); const handleClick = () => { logger.debug('Button clicked'); try { // Some operation logger.info('Operation completed successfully'); } catch (error) { logger.error('Operation failed:', error); } }; return <button onClick={handleClick}>Click me</button>; } ``` ## Advanced Configuration ```tsx import { createLogger, createComponentLogger } from '@/lib/logging'; // Component-specific logger const componentLogger = createComponentLogger('UserProfile', { enabled: process.env.NODE_ENV === 'development', level: 'debug', context: { feature: 'user-management', version: '2.1.0' } }); // Module-specific logger with performance monitoring const moduleLogger = createLogger({ context: { module: 'api-client', service: 'user-service' }, enableProfiling: true, enableStackTrace: true }); function UserProfile({ userId }: { userId: string }) { componentLogger.info('UserProfile mounted', { userId }); useEffect(() => { const timer = moduleLogger.startTimer('fetch-user-data'); fetchUserData(userId) .then((data) => { timer.end('User data fetched successfully'); componentLogger.debug('User data loaded:', data); }) .catch((error) => { timer.end('User data fetch failed'); componentLogger.error('Failed to fetch user data:', error); }); }, [userId]); return <div>User Profile Content</div>; } ``` ## Logger Configuration ### LoggerConfig Interface ```tsx interface LoggerConfig { context?: LoggerContext; level?: LogLevel; enabled?: boolean; enableProfiling?: boolean; enableStackTrace?: boolean; enableColors?: boolean; enableTimestamp?: boolean; enableMetadata?: boolean; outputFormat?: 'json' | 'pretty' | 'compact'; } interface LoggerContext { component?: string; module?: string; feature?: string; version?: string; userId?: string; sessionId?: string; [key: string]: any; } type LogLevel = 'trace' | 'debug' | 'info' | 'warn' | 'error' | 'fatal'; ``` ### Environment-Based Configuration ```tsx import { createLogger } from '@/lib/logging'; const logger = createLogger({ // Development: Full logging with debugging ...(process.env.NODE_ENV === 'development' && { level: 'debug', enabled: true, enableProfiling: true, enableStackTrace: true, enableColors: true, outputFormat: 'pretty' }), // Production: Minimal logging, performance focused ...(process.env.NODE_ENV === 'production' && { level: 'warn', enabled: true, enableProfiling: false, enableStackTrace: false, enableColors: false, outputFormat: 'json' }), // Testing: Structured logging for test analysis ...(process.env.NODE_ENV === 'test' && { level: 'error', enabled: false, outputFormat: 'compact' }) }); ``` ## Logging Methods ### Basic Logging ```tsx logger.trace('Detailed trace information'); logger.debug('Debug information for developers'); logger.info('General information'); logger.warn('Warning - something might be wrong'); logger.error('Error occurred', error); logger.fatal('Critical error - system unusable'); ``` ### Structured Logging ```tsx logger.info('User action completed', { action: 'profile-update', userId: '12345', timestamp: Date.now(), metadata: { fields: ['name', 'email'], source: 'user-settings' } }); ``` ### Performance Monitoring ```tsx // Timer-based profiling const timer = logger.startTimer('database-query'); await performDatabaseQuery(); timer.end('Query completed'); // Automatically logs duration // Manual profiling const startTime = performance.now(); await performOperation(); logger.profile('Operation duration', performance.now() - startTime); // Group profiling logger.group('User Registration Process'); logger.info('Validating user input'); logger.info('Creating user account'); logger.info('Sending welcome email'); logger.groupEnd(); ``` ## Context Management ### Automatic Context Injection ```tsx // Context is automatically included in all log messages const logger = createLogger({ context: { component: 'ShoppingCart', userId: getCurrentUserId(), sessionId: getSessionId() } }); logger.info('Item added to cart'); // Output: [ShoppingCart] Item added to cart {userId: \"123\", sessionId: \"abc\"} ``` ### Dynamic Context Updates ```tsx function ShoppingCart() { const logger = createComponentLogger('ShoppingCart'); const addItem = (item: Item) => { // Add temporary context for this operation logger .withContext({ itemId: item.id, action: 'add-item' }) .info('Adding item to cart', { item }); // Context is automatically cleared after the log }; const updateUserId = (userId: string) => { // Update persistent context logger.setContext({ userId }); logger.info('User context updated'); }; } ``` ### Context Inheritance ```tsx // Parent component logger const parentLogger = createComponentLogger('ParentComponent'); // Child component inherits parent context const childLogger = parentLogger.createChild('ChildComponent', { additionalContext: { childId: 'child-123' } }); childLogger.info('Child component action'); // Output includes both parent and child context ``` ## Development Features ### Enhanced Debugging ```tsx // Development-only detailed logging if (process.env.NODE_ENV === 'development') { logger.debug('Component state:', { props: this.props, state: this.state, refs: Object.keys(this.refs) }); } // Conditional logging with lambda functions (performance optimized) logger.debug(() => `Expensive computation result: ${expensiveOperation()}`); ``` ### Source Map Integration ```tsx // Automatically includes source file and line numbers in development logger.error('Something went wrong'); // Output: [Component] Something went wrong (MyComponent.tsx:42:15) ``` ### Console Integration ```tsx // Integrates with browser dev tools logger.logClick({ element: 'submit-button', coordinates: { x: 100, y: 200 } }); logger.logNavigation('/dashboard', { from: '/profile' }); logger.logError(error, { context: 'form-submission' }); ``` ## Production Optimization ### Automatic Log Level Adjustment ```tsx // Automatically adjusts log levels based on environment const logger = createLogger({ level: process.env.NODE_ENV === 'production' ? 'warn' : 'debug' }); // Debug messages are completely stripped in production builds logger.debug('This will not appear in production'); ``` ### Performance Monitoring ```tsx // Production-safe performance monitoring const logger = createLogger({ enableProfiling: process.env.NODE_ENV !== 'production' }); // Profiling is automatically disabled in production const timer = logger.startTimer('expensive-operation'); await performExpensiveOperation(); timer.end(); // No-op in production ``` ### Memory Management ```tsx // Automatic cleanup of log buffers and contexts logger.cleanup(); // Clears internal buffers logger.resetContext(); // Clears context data // Automatic cleanup on component unmount useEffect(() => { return () => logger.cleanup(); }, []); ``` ## Integration Examples ### React Component Integration ```tsx import { createComponentLogger } from '@/lib/logging'; function UserDashboard({ userId }: { userId: string }) { const logger = createComponentLogger('UserDashboard', { context: { userId }, enabled: true }); useEffect(() => { logger.info('Dashboard mounted'); return () => { logger.info('Dashboard unmounted'); logger.cleanup(); }; }, []); const handleAction = async (action: string) => { const timer = logger.startTimer(`action-${action}`); try { await performUserAction(action); timer.end('Action completed successfully'); logger.info('User action completed', { action }); } catch (error) { timer.end('Action failed'); logger.error('User action failed', { action, error }); } }; return <div>Dashboard Content</div>; } ``` ### API Client Integration ```tsx import { createLogger } from '@/lib/logging'; class ApiClient { private logger = createLogger({ context: { module: 'api-client', service: 'user-service' }, enableProfiling: true }); async fetchUser(userId: string) { const requestId = generateRequestId(); const timer = this.logger.startTimer('fetch-user'); this.logger.info('Fetching user data', { userId, requestId }); try { const response = await fetch(`/api/users/${userId}`); const data = await response.json(); timer.end('User data fetched successfully'); this.logger.info('User data retrieved', { userId, requestId, dataSize: JSON.stringify(data).length }); return data; } catch (error) { timer.end('User data fetch failed'); this.logger.error('Failed to fetch user data', { userId, requestId, error }); throw error; } } } ``` ### Error Boundary Integration ```tsx import { createComponentLogger } from '@/lib/logging'; class ErrorBoundary extends React.Component { private logger = createComponentLogger('ErrorBoundary'); componentDidCatch(error: Error, errorInfo: React.ErrorInfo) { this.logger.error('Component error caught', { error: error.message, stack: error.stack, componentStack: errorInfo.componentStack, errorBoundary: this.constructor.name }); // Send to error reporting service this.reportError(error, errorInfo); } render() { if (this.state.hasError) { this.logger.warn('Rendering error fallback UI'); return <ErrorFallback />; } return this.props.children; } } ``` ## Testing ### Unit Tests ```tsx import { createLogger } from '@/lib/logging'; describe('Logger', () => { test('creates logger with context', () => { const logger = createLogger({ context: { component: 'TestComponent' } }); expect(logger.getContext()).toEqual({ component: 'TestComponent' }); }); test('logs with correct level', () => { const consoleSpy = jest.spyOn(console, 'log'); const logger = createLogger({ level: 'info' }); logger.info('Test message'); expect(consoleSpy).toHaveBeenCalledWith( expect.stringContaining('Test message') ); }); }); ``` ### Integration Tests ```tsx test('component logs lifecycle events', () => { const consoleSpy = jest.spyOn(console, 'log'); const { unmount } = render(<MyComponent />); expect(consoleSpy).toHaveBeenCalledWith( expect.stringContaining('Component mounted') ); unmount(); expect(consoleSpy).toHaveBeenCalledWith( expect.stringContaining('Component unmounted') ); }); ``` ## Browser Support - **Modern Browsers**: Chrome 90+, Firefox 88+, Safari 14+, Edge 90+ - **Console API**: console.log, console.group, console.time - **Performance API**: performance.now(), performance.mark() - **Fallback**: Graceful degradation with basic console.log ## Related Utilities - **Error Handling**: Error boundary and error reporting integration - **Performance Monitoring**: Built-in timing and profiling capabilities - **Development Tools**: Enhanced debugging and source mapping - **Context Management**: Automatic context injection and inheritance ",
    "./src/lib/utils/scroll-highlight.md": "--- layout: default title: Scroll Highlight Utilities description: Visual highlighting system for scroll restoration and user feedback --- # Scroll Highlight Utilities The scroll highlight utilities provide a sophisticated system for visually highlighting elements after scroll restoration or for user feedback. Located in `src/lib/utils/scroll-highlight.ts`, this system offers smooth animations with customizable colors, intensities, and behaviors. ## Overview The scroll highlight system consists of: - **Core Animation Engine**: CSS-based animations with JavaScript control - **Preset Configurations**: Pre-defined styles for common use cases - **Smart Detection**: Automatic element detection and highlighting - **Performance Optimized**: Hardware-accelerated animations with minimal DOM manipulation ## Key Features - üé® **Customizable Animations**: Multiple colors, intensities, and speeds - üîÑ **Smooth Transitions**: Hardware-accelerated CSS animations - üì± **Mobile Optimized**: Touch-friendly animations with proper timing - ‚ôø **Accessibility Aware**: Respects user motion preferences - üéØ **Smart Targeting**: Automatic element detection and boundary snapping - üöÄ **Performance First**: Minimal DOM manipulation and efficient cleanup ## Basic Usage ```tsx import { applyScrollHighlight } from '@/lib/utils/scroll-highlight'; function MyComponent() { const handleHighlight = () => { const element = document.getElementById('target-element'); if (element) { applyScrollHighlight(element); } }; return ( <div> <div id=\"target-element\">Content to highlight</div> <button onClick={handleHighlight}>Highlight Element</button> </div> ); } ``` ## Advanced Configuration ```tsx import { applyScrollHighlight, HIGHLIGHT_PRESETS, type ScrollHighlightOptions } from '@/lib/utils/scroll-highlight'; function AdvancedHighlight() { const handleCustomHighlight = () => { const element = document.querySelector('.my-element'); if (element) { applyScrollHighlight(element, { duration: 2000, intensity: 'intense', color: 'success', speed: 'slow', enablePulse: true, enableScale: true, offset: 10 }); } }; const handlePresetHighlight = () => { const element = document.querySelector('.preset-element'); if (element) { applyScrollHighlight(element, HIGHLIGHT_PRESETS.SUCCESS_FAST); } }; return ( <div> <div className=\"my-element\">Custom highlight target</div> <div className=\"preset-element\">Preset highlight target</div> <button onClick={handleCustomHighlight}>Custom Highlight</button> <button onClick={handlePresetHighlight}>Preset Highlight</button> </div> ); } ``` ## Configuration Options ### ScrollHighlightOptions ```tsx interface ScrollHighlightOptions { duration?: number; // Animation duration in milliseconds offset?: number; // Offset from element edges className?: string; // Custom CSS class name intensity?: 'subtle' | 'normal' | 'intense'; color?: 'default' | 'success' | 'warning' | 'error'; speed?: 'instant' | 'fast' | 'normal' | 'slow'; enablePulse?: boolean; // Enable pulsing animation enableScale?: boolean; // Enable scaling animation } ``` ### Preset Configurations ```tsx import { HIGHLIGHT_PRESETS } from '@/lib/utils/scroll-highlight'; // Available presets HIGHLIGHT_PRESETS.DEFAULT; // Standard highlight HIGHLIGHT_PRESETS.SUCCESS; // Success feedback HIGHLIGHT_PRESETS.SUCCESS_FAST; // Quick success feedback HIGHLIGHT_PRESETS.WARNING; // Warning highlight HIGHLIGHT_PRESETS.ERROR; // Error highlight HIGHLIGHT_PRESETS.SUBTLE; // Minimal highlight HIGHLIGHT_PRESETS.INTENSE; // Maximum visibility ``` ## Animation Types ### Box Shadow Highlight The primary animation method using CSS box-shadow: ```css .scroll-restore-highlight { box-shadow: 0 0 0 4px rgba(var(--highlight-color-rgb), 0.3); transition: box-shadow var(--highlight-duration) ease-out; } ``` ### Pulse Animation Optional pulsing effect for enhanced visibility: ```css .scroll-restore-highlight--pulse { animation: scroll-highlight-pulse var(--highlight-duration) ease-out; } @keyframes scroll-highlight-pulse { 0%, 100% { box-shadow: 0 0 0 2px rgba(var(--highlight-color-rgb), 0.2); } 50% { box-shadow: 0 0 0 8px rgba(var(--highlight-color-rgb), 0.4); } } ``` ### Scale Animation Optional scaling effect for dynamic feedback: ```css .scroll-restore-highlight--scale { animation: scroll-highlight-scale var(--highlight-duration) ease-out; } @keyframes scroll-highlight-scale { 0% { transform: scale(1); } 50% { transform: scale(var(--highlight-scale-max, 1.02)); } 100% { transform: scale(1); } } ``` ## Color System ### CSS Custom Properties The system uses CSS custom properties for theming: ```css :root { --scroll-highlight-default: #007bff; --scroll-highlight-default-rgb: 0, 123, 255; --scroll-highlight-success: #28a745; --scroll-highlight-success-rgb: 40, 167, 69; --scroll-highlight-warning: #ffc107; --scroll-highlight-warning-rgb: 255, 193, 7; --scroll-highlight-error: #dc3545; --scroll-highlight-error-rgb: 220, 53, 69; } ``` ### Dynamic Color Application Colors are applied dynamically based on configuration: ```tsx function applyHighlightColor(element: HTMLElement, color: string) { const colorMap = { default: 'var(--scroll-highlight-default-rgb)', success: 'var(--scroll-highlight-success-rgb)', warning: 'var(--scroll-highlight-warning-rgb)', error: 'var(--scroll-highlight-error-rgb)' }; element.style.setProperty('--highlight-color-rgb', colorMap[color]); } ``` ## Performance Considerations ### Hardware Acceleration All animations use hardware-accelerated CSS properties: ```css .scroll-restore-highlight { will-change: box-shadow, transform; backface-visibility: hidden; perspective: 1000px; } ``` ### Efficient Cleanup Automatic cleanup prevents memory leaks: ```tsx function cleanupHighlight(element: HTMLElement, duration: number) { setTimeout(() => { element.classList.remove('scroll-restore-highlight'); element.style.removeProperty('--highlight-duration'); element.style.removeProperty('--highlight-color-rgb'); element.style.removeProperty('will-change'); }, duration + 100); } ``` ### Debounced Application Multiple highlights on the same element are debounced: ```tsx const highlightTimers = new WeakMap<HTMLElement, number>(); function applyScrollHighlight( element: HTMLElement, options: ScrollHighlightOptions ) { // Clear existing timer const existingTimer = highlightTimers.get(element); if (existingTimer) { clearTimeout(existingTimer); } // Apply new highlight // ... highlight logic // Set cleanup timer const timer = setTimeout(() => cleanup(element), duration); highlightTimers.set(element, timer); } ``` ## Accessibility ### Motion Preferences Respects user motion preferences: ```tsx function shouldUseAnimation(): boolean { if (typeof window === 'undefined') return false; const mediaQuery = window.matchMedia('(prefers-reduced-motion: reduce)'); return !mediaQuery.matches; } ``` ### Screen Reader Support Provides appropriate ARIA announcements: ```tsx function announceHighlight(element: HTMLElement, type: string) { const announcement = `${type} highlight applied to ${element.tagName.toLowerCase()}`; // Create temporary announcement element const announcer = document.createElement('div'); announcer.setAttribute('aria-live', 'polite'); announcer.setAttribute('aria-atomic', 'true'); announcer.className = 'sr-only'; announcer.textContent = announcement; document.body.appendChild(announcer); setTimeout(() => document.body.removeChild(announcer), 1000); } ``` ## Integration Examples ### Scroll Restoration Highlight elements after scroll restoration: ```tsx import { applyScrollHighlight } from '@/lib/utils/scroll-highlight'; function useScrollRestoration() { const highlightRestoredElement = (elementId: string) => { const element = document.getElementById(elementId); if (element) { // Scroll to element element.scrollIntoView({ behavior: 'smooth', block: 'center' }); // Highlight after scroll setTimeout(() => { applyScrollHighlight(element, { color: 'default', intensity: 'normal', duration: 1500 }); }, 500); } }; return { highlightRestoredElement }; } ``` ### Form Validation Highlight form fields with validation errors: ```tsx function FormField({ error, children }) { const fieldRef = useRef<HTMLDivElement>(null); useEffect(() => { if (error && fieldRef.current) { applyScrollHighlight(fieldRef.current, { color: 'error', intensity: 'subtle', duration: 1000, enablePulse: true }); } }, [error]); return ( <div ref={fieldRef} className={error ? 'field-error' : ''}> {children} </div> ); } ``` ### Success Feedback Highlight successful actions: ```tsx function SuccessButton() { const buttonRef = useRef<HTMLButtonElement>(null); const handleSuccess = () => { if (buttonRef.current) { applyScrollHighlight(buttonRef.current, { color: 'success', intensity: 'normal', duration: 1200, enableScale: true }); } }; return ( <button ref={buttonRef} onClick={handleSuccess}> Save Changes </button> ); } ``` ## Browser Support - **Modern Browsers**: Chrome 90+, Firefox 88+, Safari 14+, Edge 90+ - **CSS Features**: CSS Custom Properties, CSS Animations, box-shadow - **JavaScript Features**: ES2020+, WeakMap, setTimeout/clearTimeout - **Fallback**: Graceful degradation with no animation ## Testing ### Unit Tests ```tsx import { applyScrollHighlight } from '@/lib/utils/scroll-highlight'; describe('ScrollHighlight', () => { test('applies highlight class to element', () => { const element = document.createElement('div'); applyScrollHighlight(element); expect(element.classList.contains('scroll-restore-highlight')).toBe(true); }); test('respects custom duration', () => { const element = document.createElement('div'); applyScrollHighlight(element, { duration: 2000 }); expect(element.style.getPropertyValue('--highlight-duration')).toBe( '2000ms' ); }); }); ``` ### Integration Tests ```tsx test('highlights element after scroll restoration', async () => { const { getByTestId } = render(<MyComponent />); const element = getByTestId('highlight-target'); // Trigger scroll restoration fireEvent.click(getByTestId('restore-button')); // Wait for highlight to apply await waitFor(() => { expect(element).toHaveClass('scroll-restore-highlight'); }); }); ``` ## Related Utilities - **Scroll Position**: Scroll position management and restoration - **Smooth Scrolling**: Enhanced scrolling with easing functions - **Viewport Detection**: Element visibility and intersection detection - **Animation Utils**: General animation utilities and helpers ",
    "./src/lib/utils/service-worker-cleanup.md": "--- layout: default title: Service Worker Cleanup Utility description: Comprehensive browser service worker management and cleanup system for debugging and maintenance --- # üßπ Service Worker Cleanup Utility The **Service Worker Cleanup Utility** is a comprehensive browser-based debugging and maintenance system designed to help developers and users manage problematic service worker registrations in web applications. ## üéØ What is a Service Worker? A **service worker** is a special type of web technology that runs in the background of your browser, separate from your web page. Think of it as a helpful assistant that: - **Caches resources** - Stores copies of web pages, images, and files so they load faster - **Enables offline functionality** - Allows web apps to work even without internet connection - **Manages push notifications** - Handles notifications from web applications - **Intercepts network requests** - Can modify or cache network requests for better performance ### Why Service Workers Can Cause Problems Sometimes service workers can get \"stuck\" or accumulate in large numbers, causing: - **Slow page loading** - Too many service workers competing for resources - **Broken functionality** - Conflicting service workers interfering with each other - **Memory issues** - Multiple service workers consuming browser memory - **Update failures** - New versions of your app can't install properly ## üõ†Ô∏è Available Tools ### üîç Diagnostic Tools #### `diagnoseServiceWorkerIssues()` **Purpose**: Analyze your current service worker state and get personalized recommendations. **What it does**: - Scans all registered service workers - Identifies problematic states (stuck installations, conflicts) - Provides specific recommendations for your situation - Shows you exactly which cleanup tool to use **When to use**: Always start here when experiencing service worker issues. **Example output**: ``` üîç DIAGNOSIS COMPLETE Found 3 service workers: - 1 stuck in \"installing\" state - 2 active registrations Recommendation: Use advancedServiceWorkerCleanup() ``` #### `inspectServiceWorkers()` **Purpose**: Show detailed information about all registered service workers. **What it displays**: - **Scope** - Which parts of your website each service worker controls - **Script URL** - The location of the service worker code - **State** - Whether it's installing, waiting, or active - **Update cache policy** - How the service worker handles updates **When to use**: When you need detailed technical information about your service workers. ### üßπ Cleanup Tools #### `advancedServiceWorkerCleanup()` ‚≠ê **RECOMMENDED** **Purpose**: Handle stuck or failed service worker registrations that appear in DevTools. **What it does**: - Identifies service workers stuck in \"installing\" or \"waiting\" states - Forcefully removes problematic registrations - Clears associated caches - Handles edge cases that normal cleanup can't fix **When to use**: - Service workers showing \"trying to install\" messages - DevTools showing stuck service worker states - Normal cleanup methods aren't working **Technical details**: - Uses advanced browser APIs to force unregistration - Handles browser-specific edge cases - Includes retry logic for stubborn registrations #### `enforceOneServiceWorker()` **Purpose**: Keep only the most recent service worker, remove the rest. **What it does**: - Identifies all service worker registrations - Keeps the newest/most recent one - Removes all older registrations - Gentle cleanup that maintains functionality **When to use**: - You have multiple service workers but want to keep one working - Gradual cleanup without breaking functionality - When you want to maintain offline capabilities #### `nukeAllServiceWorkers()` **Purpose**: Remove ALL service workers and clear ALL caches. **What it does**: - Unregisters every service worker for your domain - Clears all cache storage - Provides detailed progress reporting - Nuclear option for complete cleanup **When to use**: - Too many service workers causing conflicts - Complete reset needed - Preparing for fresh installation **‚ö†Ô∏è Warning**: This will remove offline functionality until service workers are re-registered. #### `nuclearServiceWorkerReset()` ‚ò¢Ô∏è **Purpose**: Ultimate nuclear option - complete browser state reset. **What it does**: - Removes all service workers - Clears all caches - Clears local storage - Clears session storage - Clears IndexedDB - Complete browser state reset **When to use**: - Last resort when everything else fails - Complete application reset needed - Preparing for clean development environment **‚ö†Ô∏è Critical Warning**: This will remove ALL stored data for your domain. ## üöÄ How to Use These Tools ### Step 1: Access the Browser Console 1. **Open Developer Tools**: - **Chrome/Edge**: Press `F12` or `Ctrl+Shift+I` (Windows) / `Cmd+Option+I` (Mac) - **Firefox**: Press `F12` or `Ctrl+Shift+I` (Windows) / `Cmd+Option+I` (Mac) - **Safari**: Press `Cmd+Option+I` (Mac) 2. **Navigate to Console Tab**: - Look for the \"Console\" tab in the developer tools - This is where you'll type the commands ### Step 2: Load the Utility The utility is automatically loaded when you visit the application. You'll see a large ASCII art banner in the console indicating the tools are available. ### Step 3: Run Diagnostic ```javascript // Always start with diagnosis diagnoseServiceWorkerIssues(); ``` This will analyze your situation and tell you exactly which tool to use. ### Step 4: Follow the Recommendation Based on the diagnosis, run the recommended cleanup tool: ```javascript // For stuck service workers advancedServiceWorkerCleanup(); // For multiple service workers enforceOneServiceWorker(); // For complete cleanup nukeAllServiceWorkers(); ``` ### Step 5: Restart Browser After running any cleanup tool: 1. **Close ALL tabs** of your application 2. **Close the browser completely** 3. **Reopen the browser** 4. **Visit your application again** This ensures all service worker changes take effect properly. ## üîß Technical Implementation ### Architecture The utility is built using modern JavaScript and browser APIs: ```typescript // Core service worker management navigator.serviceWorker.getRegistrations(); registration.unregister(); caches.keys(); caches.delete(); // Advanced cleanup techniques registration.installing?.postMessage(); registration.waiting?.postMessage(); ``` ### Error Handling The utility includes comprehensive error handling: - **Graceful degradation** - Works even when some APIs fail - **Detailed logging** - Provides specific error messages - **Retry logic** - Attempts multiple cleanup strategies - **Progress reporting** - Shows exactly what's happening ### Browser Compatibility Supported browsers: - ‚úÖ **Chrome 45+** - Full support - ‚úÖ **Firefox 44+** - Full support - ‚úÖ **Safari 11.1+** - Full support - ‚úÖ **Edge 17+** - Full support Unsupported browsers gracefully display warning messages. ## üêõ Common Issues and Solutions ### Issue: \"Service worker stuck in installing state\" **Solution**: Use `advancedServiceWorkerCleanup()` ### Issue: \"Multiple service workers showing in DevTools\" **Solution**: Use `enforceOneServiceWorker()` or `nukeAllServiceWorkers()` ### Issue: \"App won't update to new version\" **Solution**: Use `advancedServiceWorkerCleanup()` then refresh ### Issue: \"Console says 'Service workers not supported'\" **Solution**: Update your browser or use a supported browser ### Issue: \"Cleanup tools don't seem to work\" **Solution**: 1. Try `nuclearServiceWorkerReset()` 2. Close ALL browser tabs 3. Restart browser completely 4. Clear browser cache manually if needed ## üìä Logging and Monitoring The utility includes comprehensive logging through our internal logging system: ```typescript const logger = createLogger({ context: { component: 'ServiceWorkerCleanup', module: 'utils' } }); ``` ### Log Levels - **Info**: Normal operation status - **Warn**: Non-critical issues - **Error**: Failed operations - **Group**: Organized log sections ### Monitoring Features - **Operation counts** - How many service workers affected - **Success rates** - Percentage of successful operations - **Error tracking** - Detailed error information - **Performance metrics** - How long operations take ## üîí Security Considerations ### Domain Isolation The utility only affects service workers for the current domain: - ‚úÖ **Safe**: Only cleans your application's service workers - ‚úÖ **Isolated**: Cannot affect other websites - ‚úÖ **Controlled**: Requires explicit user action ### Data Protection Different cleanup levels provide different data protection: - **`enforceOneServiceWorker()`** - Preserves most data - **`nukeAllServiceWorkers()`** - Removes cache data - **`nuclearServiceWorkerReset()`** - Removes all stored data ### User Consent All cleanup operations: - Require explicit user action (typing commands) - Display clear warnings about data loss - Provide detailed information about what will be removed ## üöÄ Best Practices ### For Developers 1. **Always diagnose first** - Use `diagnoseServiceWorkerIssues()` before cleanup 2. **Test thoroughly** - Verify functionality after cleanup 3. **Document issues** - Keep track of what caused problems 4. **Monitor regularly** - Check service worker health periodically ### For Users 1. **Follow recommendations** - Use the tool suggested by diagnosis 2. **Close all tabs** - Always restart browser after cleanup 3. **Backup important data** - Some cleanup methods remove stored data 4. **Contact support** - If issues persist, report to development team ### For Production 1. **Monitor service worker health** - Track registration states 2. **Implement proper update strategies** - Prevent stuck states 3. **Test cleanup procedures** - Ensure tools work in production 4. **Document escalation procedures** - When to use nuclear options ## üìö Related Documentation - **[Development Setup](../development/getting-started.html)** - Setting up development environment - **[Troubleshooting Guide](../troubleshooting/)** - General application troubleshooting - **[Browser Compatibility](../compatibility/)** - Supported browsers and features - **[Logging System](../libraries/logging.html)** - Application logging and monitoring ## üîó External Resources - **[Service Worker API Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API)** - MDN Web Docs - **[Service Worker Debugging](https://developers.google.com/web/tools/chrome-devtools/progressive-web-apps)** - Chrome DevTools Guide - **[Cache API Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Cache)** - MDN Web Docs --- _The Service Worker Cleanup Utility is designed to help both technical and non-technical users manage browser service workers effectively. When in doubt, always start with the diagnostic tool and follow its recommendations._ ",
    "./src/lib/utils/text-extraction.md": "--- layout: default title: Text Extraction Utility description: Comprehensive text parsing and manipulation system for extracting structured content from user input --- # üìù Text Extraction Utility The **Text Extraction Utility** is a powerful text parsing and manipulation system designed to extract structured content from user input. It provides comprehensive tools for parsing hashtags, mentions, URLs, emojis, and other structured elements from text, as well as advanced text manipulation capabilities. ## üéØ What is Text Extraction? **Text extraction** is the process of identifying and extracting specific patterns or structured content from raw text. Think of it as a smart text analyzer that can: - **Find hashtags** - Identify #tags in social media posts - **Extract mentions** - Find @username references and user IDs - **Locate URLs** - Identify web links in text - **Parse emojis** - Extract emoji shortcodes like :smile: - **Manipulate text** - Insert, replace, and modify text content intelligently ### Why Text Extraction is Important In social media and content management applications, users often include structured elements in their text: - **Social engagement** - Hashtags help categorize and discover content - **User connections** - Mentions create links between users - **Rich content** - URLs and emojis enhance the user experience - **Data analysis** - Extracted elements can be analyzed for insights ## üõ†Ô∏è Core Components ### TextExtractor Class The main class for extracting structured content from text. #### `extractHashtags(text, includeHash)` **Purpose**: Extract hashtags from text content. **Parameters**: - `text` (string) - The text to analyze - `includeHash` (boolean, optional) - Whether to include the # symbol in results (default: true) **Returns**: Array of hashtag strings **Example**: ```typescript const text = 'Check out this #amazing #javascript tutorial!'; const hashtags = TextExtractor.extractHashtags(text); // Result: [\"#amazing\", \"#javascript\"] const hashtagsWithoutSymbol = TextExtractor.extractHashtags(text, false); // Result: [\"amazing\", \"javascript\"] ``` **How it works**: - Uses regex pattern `/#(\w+)/g` to find hashtag patterns - Captures word characters after the # symbol - Returns array of found hashtags #### `extractUserMentions(text)` **Purpose**: Extract structured user mentions from text. **Parameters**: - `text` (string) - The text to analyze **Returns**: Array of mention objects with: - `username` (string) - The displayed username - `userId` (string) - The unique user identifier - `filterType` (string, optional) - Type of mention filter ('author' or 'mentions') - `fullMatch` (string) - The complete mention text **Example**: ```typescript const text = 'Hey @[john_doe|user123] and @[jane_smith|user456|mentions]!'; const mentions = TextExtractor.extractUserMentions(text); // Result: [ // { // username: \"john_doe\", // userId: \"user123\", // filterType: undefined, // fullMatch: \"@[john_doe|user123]\" // }, // { // username: \"jane_smith\", // userId: \"user456\", // filterType: \"mentions\", // fullMatch: \"@[jane_smith|user456|mentions]\" // } // ] ``` **Mention Format**: - **Standard**: `@[username|userId]` - **Enhanced**: `@[username|userId|filterType]` #### `extractUserIds(text)` **Purpose**: Extract only the user IDs from mentions. **Parameters**: - `text` (string) - The text to analyze **Returns**: Array of user ID strings **Example**: ```typescript const text = 'Meeting with @[alice|user789] and @[bob|user101]'; const userIds = TextExtractor.extractUserIds(text); // Result: [\"user789\", \"user101\"] ``` #### `extractUrls(text)` **Purpose**: Extract HTTP/HTTPS URLs from text. **Parameters**: - `text` (string) - The text to analyze **Returns**: Array of URL strings **Example**: ```typescript const text = 'Visit https://example.com and http://test.org for more info'; const urls = TextExtractor.extractUrls(text); // Result: [\"https://example.com\", \"http://test.org\"] ``` **URL Pattern**: Matches `https?://[^\s<>\"{}|\\^`[\]]+` #### `extractEmojiShortcodes(text)` **Purpose**: Extract emoji shortcodes from text. **Parameters**: - `text` (string) - The text to analyze **Returns**: Array of emoji shortcode strings (without colons) **Example**: ```typescript const text = \"I'm so happy :smile: and excited :tada:!\"; const emojis = TextExtractor.extractEmojiShortcodes(text); // Result: [\"smile\", \"tada\"] ``` #### `extractAll(text)` **Purpose**: Extract all structured content in one operation. **Parameters**: - `text` (string) - The text to analyze **Returns**: Object containing all extracted content: - `hashtags` - Array of hashtags - `mentions` - Array of mention objects - `userIds` - Array of user IDs - `urls` - Array of URLs - `emojiShortcodes` - Array of emoji shortcodes **Example**: ```typescript const text = 'Check out #coding with @[dev|user123] at https://example.com :rocket:'; const extracted = TextExtractor.extractAll(text); // Result: { // hashtags: [\"#coding\"], // mentions: [{ username: \"dev\", userId: \"user123\", ... }], // userIds: [\"user123\"], // urls: [\"https://example.com\"], // emojiShortcodes: [\"rocket\"] // } ``` ### TextManipulator Class Advanced text manipulation and cursor management system. #### `insertAtPosition(originalText, insertText, position)` **Purpose**: Insert text at a specific position while tracking cursor movement. **Parameters**: - `originalText` (string) - The original text content - `insertText` (string) - The text to insert - `position` (number) - The character position to insert at **Returns**: Object with: - `newText` (string) - The modified text - `newCursorPosition` (number) - Where the cursor should be positioned **Example**: ```typescript const result = TextManipulator.insertAtPosition( 'Hello world!', ' beautiful', 5 ); // Result: { // newText: \"Hello beautiful world!\", // newCursorPosition: 15 // } ``` **Use cases**: - Inserting mentions at cursor position - Adding hashtags or emojis - Auto-completion of text elements #### `replaceBetween(originalText, replaceText, startPosition, endPosition)` **Purpose**: Replace text between two positions. **Parameters**: - `originalText` (string) - The original text content - `replaceText` (string) - The replacement text - `startPosition` (number) - Start position of replacement - `endPosition` (number) - End position of replacement **Returns**: Object with: - `newText` (string) - The modified text - `newCursorPosition` (number) - Where the cursor should be positioned **Example**: ```typescript const result = TextManipulator.replaceBetween( 'The quick brown fox', 'red', 10, 15 // Replace \"brown\" ); // Result: { // newText: \"The quick red fox\", // newCursorPosition: 13 // } ``` **Use cases**: - Replacing selected text - Updating mentions or hashtags - Text correction and editing #### `findLastTrigger(text, position, triggers)` **Purpose**: Find the last occurrence of trigger characters before a position. **Parameters**: - `text` (string) - The text to search in - `position` (number) - The position to search before - `triggers` (string[]) - Array of trigger characters to look for **Returns**: Object with trigger info or null: - `index` (number) - Position of the trigger character - `character` (string) - The trigger character found - `query` (string) - Text after the trigger character **Example**: ```typescript const result = TextManipulator.findLastTrigger( 'Hello @john and #coding', 20, // Position after \"coding\" ['@', '#'] ); // Result: { // index: 12, // character: \"#\", // query: \"coding\" // } ``` **Use cases**: - Implementing autocomplete for mentions (@) - Hashtag suggestions (#) - Emoji picker triggers (:) - Command detection (/) ## üîß Technical Implementation ### Regular Expressions Used The utility uses carefully crafted regular expressions for reliable pattern matching: ```typescript // Hashtag pattern const hashtagRegex = /#(\w+)/g; // Mention pattern (structured format) const mentionRegex = /@\[([^|]+)\|([^|]+)(?:\|([^|]+))?\]/g; // URL pattern const urlRegex = /https?:\/\/[^\s<>\"{}|\\^`[\]]+/g; // Emoji shortcode pattern const emojiRegex = /:([a-zA-Z0-9_+-]+):/g; ``` ### Performance Considerations - **Efficient regex execution** - Uses global regex with proper reset - **Memory management** - Processes text in single passes - **Caching opportunities** - Results can be cached for repeated operations - **Streaming support** - Can process large texts incrementally ### Error Handling The utility includes robust error handling: ```typescript // Safe text processing if (!text) return []; // Graceful fallbacks try { // Process text } catch (error) { console.warn('Text extraction failed:', error); return []; } ``` ## üé® Integration Examples ### React Component Integration ```typescript import { TextExtractor, TextManipulator } from '@/lib/utils/text-extraction'; function SocialPostEditor() { const [text, setText] = useState(''); const [cursorPosition, setCursorPosition] = useState(0); const handleTextChange = (newText: string) => { setText(newText); // Extract structured content const extracted = TextExtractor.extractAll(newText); console.log('Hashtags:', extracted.hashtags); console.log('Mentions:', extracted.mentions); }; const insertMention = (username: string, userId: string) => { const mentionText = `@[${username}|${userId}]`; const result = TextManipulator.insertAtPosition( text, mentionText, cursorPosition ); setText(result.newText); setCursorPosition(result.newCursorPosition); }; return ( <textarea value={text} onChange={(e) => handleTextChange(e.target.value)} onSelect={(e) => setCursorPosition(e.target.selectionStart)} /> ); } ``` ### API Integration ```typescript // Process user input on the server import { TextExtractor } from '@/lib/utils/text-extraction'; export async function processUserPost(content: string) { const extracted = TextExtractor.extractAll(content); // Store hashtags for discovery await saveHashtags(extracted.hashtags); // Create user notifications for mentions await notifyMentionedUsers(extracted.userIds); // Process URLs for link previews await generateLinkPreviews(extracted.urls); return { content, metadata: { hashtags: extracted.hashtags, mentions: extracted.mentions, urls: extracted.urls, emojis: extracted.emojiShortcodes } }; } ``` ## üêõ Common Issues and Solutions ### Issue: \"Hashtags not detected in non-English text\" **Solution**: The current regex uses `\w+` which may not capture all Unicode characters. For international support, consider using `[^\s#]+` pattern. ### Issue: \"Mentions with special characters break parsing\" **Solution**: Ensure usernames are properly encoded when creating mention format. Use URL encoding for special characters. ### Issue: \"URLs with query parameters get truncated\" **Solution**: The URL regex is designed to stop at whitespace and common delimiters. This is intentional to avoid capturing surrounding punctuation. ### Issue: \"Cursor position becomes incorrect after text manipulation\" **Solution**: Always use the `newCursorPosition` returned by TextManipulator methods to maintain proper cursor tracking. ## üîí Security Considerations ### Input Validation - **Sanitize extracted content** - Always validate extracted URLs, usernames, and hashtags - **Prevent injection attacks** - Don't directly execute or render extracted content without sanitization - **Rate limiting** - Limit the number of mentions/hashtags per post to prevent spam ### Content Filtering ```typescript // Example security wrapper function secureExtractHashtags(text: string): string[] { const hashtags = TextExtractor.extractHashtags(text); return hashtags.filter((tag) => { // Remove potentially harmful content return ( tag.length <= 50 && !tag.includes('<script>') && /^[a-zA-Z0-9_-]+$/.test(tag) ); }); } ``` ## üöÄ Best Practices ### For Developers 1. **Always validate input** - Check for null/undefined text before processing 2. **Use appropriate extraction methods** - Don't use `extractAll()` if you only need hashtags 3. **Cache results when possible** - Extraction can be expensive for large texts 4. **Handle edge cases** - Empty strings, very long texts, malformed patterns ### For Performance 1. **Batch operations** - Process multiple texts together when possible 2. **Lazy evaluation** - Only extract what you need when you need it 3. **Memory management** - Clear large result arrays when done 4. **Streaming for large content** - Process very large texts in chunks ### For User Experience 1. **Real-time feedback** - Show extracted elements as user types 2. **Visual indicators** - Highlight hashtags, mentions, and URLs in the UI 3. **Autocomplete integration** - Use `findLastTrigger()` for smart suggestions 4. **Error recovery** - Gracefully handle malformed input ## üìö Related Documentation - **[Content Parsers](content-parsers.html)** - Advanced content parsing and tokenization - **[Rich Text Parser](rich-text-parser.html)** - Markdown and rich text processing - **[Emoji Parser](emoji-parser.html)** - Emoji processing and rendering - **[Components - Rich Input System](../components/rich-input-system/index.md)** - UI components using text extraction ## üîó External Resources - **[Regular Expressions Guide](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions)** - MDN Web Docs - **[Unicode in JavaScript](https://mathiasbynens.be/notes/javascript-unicode)** - Unicode handling best practices - **[Text Processing Performance](https://v8.dev/blog/regexp-tier-up)** - V8 regex optimization --- _The Text Extraction Utility provides the foundation for intelligent text processing in social media applications. It enables rich user experiences while maintaining performance and security._ ",
    "./src/templates/api-template.md": "--- layout: default title: 'API Endpoint Template' description: 'Template for API endpoint documentation' permalink: /templates/api-template/ --- # üìã API Endpoint Template Use this template when documenting API endpoints for the Idling.app project. ## üìù Template Instructions 1. **Copy this template** to your API documentation location 2. **Replace placeholders** with your specific information 3. **Delete this instruction section** before publishing 4. **Follow the structure** provided below --- # [Endpoint Name] API Brief description of the API endpoint and its purpose. ## üéØ Overview ### Purpose Explain what this endpoint does and why it exists. ### Key Features - **Feature 1**: Description of the first key feature - **Feature 2**: Description of the second key feature - **Feature 3**: Description of the third key feature ## üìç Endpoint Details ### Base URL ``` https://api.idling.app ``` ### Endpoint Path ``` [METHOD] /api/v1/[endpoint-path] ``` ### Full URL ``` [METHOD] https://api.idling.app/api/v1/[endpoint-path] ``` ## üîê Authentication ### Required Authentication - **Type**: Bearer Token (JWT) - **Header**: `Authorization: Bearer <token>` - **Scope**: `[required-scope]` ### Permissions This endpoint requires the following permissions: - `[permission-1]` - Description of permission - `[permission-2]` - Description of permission ### Example Authentication ```bash curl -X GET \"https://api.idling.app/api/v1/endpoint\" \ -H \"Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\" ``` ## üìù Request Specification ### HTTP Method ``` [GET|POST|PUT|DELETE|PATCH] ``` ### Request Headers | Header | Type | Required | Description | | --------------- | -------- | -------- | ------------------------------- | | `Authorization` | `string` | **Yes** | Bearer token for authentication | | `Content-Type` | `string` | **Yes** | Must be `application/json` | | `Accept` | `string` | No | Response format preference | | `X-Request-ID` | `string` | No | Request tracking identifier | ### Path Parameters | Parameter | Type | Required | Description | | --------- | -------- | -------- | ---------------------------------- | | `id` | `string` | **Yes** | Unique identifier for the resource | | `userId` | `string` | No | User identifier for filtering | ### Query Parameters | Parameter | Type | Required | Default | Description | | --------- | -------- | -------- | ------------ | ---------------------------- | | `limit` | `number` | No | `20` | Maximum number of results | | `offset` | `number` | No | `0` | Number of results to skip | | `sort` | `string` | No | `created_at` | Sort field | | `order` | `string` | No | `desc` | Sort order (`asc` or `desc`) | | `filter` | `string` | No | - | Filter criteria | ### Request Body ```typescript interface RequestBody { // Required fields name: string; description: string; // Optional fields tags?: string[]; metadata?: Record<string, any>; settings?: { enabled: boolean; priority: number; }; } ``` ### Request Example ```json { \"name\": \"Example Resource\", \"description\": \"This is an example resource\", \"tags\": [\"example\", \"demo\"], \"metadata\": { \"category\": \"test\", \"version\": \"1.0.0\" }, \"settings\": { \"enabled\": true, \"priority\": 1 } } ``` ## üì§ Response Specification ### Success Response #### Status Code: `200 OK` ```typescript interface SuccessResponse { success: true; data: { id: string; name: string; description: string; tags: string[]; metadata: Record<string, any>; settings: { enabled: boolean; priority: number; }; createdAt: string; updatedAt: string; }; meta?: { pagination?: { total: number; limit: number; offset: number; hasMore: boolean; }; }; } ``` #### Response Example ```json { \"success\": true, \"data\": { \"id\": \"550e8400-e29b-41d4-a716-446655440000\", \"name\": \"Example Resource\", \"description\": \"This is an example resource\", \"tags\": [\"example\", \"demo\"], \"metadata\": { \"category\": \"test\", \"version\": \"1.0.0\" }, \"settings\": { \"enabled\": true, \"priority\": 1 }, \"createdAt\": \"2024-01-01T00:00:00.000Z\", \"updatedAt\": \"2024-01-01T00:00:00.000Z\" }, \"meta\": { \"pagination\": { \"total\": 100, \"limit\": 20, \"offset\": 0, \"hasMore\": true } } } ``` ### Error Responses #### Status Code: `400 Bad Request` ```typescript interface BadRequestResponse { success: false; error: { code: 'VALIDATION_ERROR'; message: string; details: { field: string; message: string; }[]; }; } ``` ```json { \"success\": false, \"error\": { \"code\": \"VALIDATION_ERROR\", \"message\": \"Request validation failed\", \"details\": [ { \"field\": \"name\", \"message\": \"Name is required\" }, { \"field\": \"description\", \"message\": \"Description must be at least 10 characters\" } ] } } ``` #### Status Code: `401 Unauthorized` ```json { \"success\": false, \"error\": { \"code\": \"UNAUTHORIZED\", \"message\": \"Authentication required\" } } ``` #### Status Code: `403 Forbidden` ```json { \"success\": false, \"error\": { \"code\": \"FORBIDDEN\", \"message\": \"Insufficient permissions\" } } ``` #### Status Code: `404 Not Found` ```json { \"success\": false, \"error\": { \"code\": \"NOT_FOUND\", \"message\": \"Resource not found\" } } ``` #### Status Code: `429 Too Many Requests` ```json { \"success\": false, \"error\": { \"code\": \"RATE_LIMIT_EXCEEDED\", \"message\": \"Rate limit exceeded\", \"retryAfter\": 60 } } ``` #### Status Code: `500 Internal Server Error` ```json { \"success\": false, \"error\": { \"code\": \"INTERNAL_ERROR\", \"message\": \"An internal server error occurred\" } } ``` ## üö¶ Rate Limiting ### Limits - **Authenticated Users**: 100 requests per minute - **Anonymous Users**: 20 requests per minute - **Premium Users**: 500 requests per minute ### Rate Limit Headers Response includes rate limit information: ``` X-RateLimit-Limit: 100 X-RateLimit-Remaining: 95 X-RateLimit-Reset: 1640995200 ``` ### Rate Limit Exceeded When rate limit is exceeded: ```json { \"success\": false, \"error\": { \"code\": \"RATE_LIMIT_EXCEEDED\", \"message\": \"Rate limit exceeded. Try again in 60 seconds.\", \"retryAfter\": 60 } } ``` ## üìö Code Examples ### cURL ```bash # GET request curl -X GET \"https://api.idling.app/api/v1/endpoint?limit=10&offset=0\" \ -H \"Authorization: Bearer YOUR_TOKEN\" \ -H \"Accept: application/json\" # POST request curl -X POST \"https://api.idling.app/api/v1/endpoint\" \ -H \"Authorization: Bearer YOUR_TOKEN\" \ -H \"Content-Type: application/json\" \ -d '{ \"name\": \"Example Resource\", \"description\": \"This is an example resource\" }' ``` ### JavaScript/TypeScript ```typescript // Using fetch async function callEndpoint() { const response = await fetch('https://api.idling.app/api/v1/endpoint', { method: 'POST', headers: { Authorization: `Bearer ${token}`, 'Content-Type': 'application/json' }, body: JSON.stringify({ name: 'Example Resource', description: 'This is an example resource' }) }); const data = await response.json(); return data; } // Using axios import axios from 'axios'; const api = axios.create({ baseURL: 'https://api.idling.app/api/v1', headers: { Authorization: `Bearer ${token}` } }); async function callEndpoint() { const response = await api.post('/endpoint', { name: 'Example Resource', description: 'This is an example resource' }); return response.data; } ``` ### Python ```python import requests # GET request response = requests.get( 'https://api.idling.app/api/v1/endpoint', headers={ 'Authorization': f'Bearer {token}', 'Accept': 'application/json' }, params={ 'limit': 10, 'offset': 0 } ) data = response.json() # POST request response = requests.post( 'https://api.idling.app/api/v1/endpoint', headers={ 'Authorization': f'Bearer {token}', 'Content-Type': 'application/json' }, json={ 'name': 'Example Resource', 'description': 'This is an example resource' } ) data = response.json() ``` ### Node.js ```javascript const https = require('https'); function callEndpoint(token, data) { return new Promise((resolve, reject) => { const postData = JSON.stringify(data); const options = { hostname: 'api.idling.app', port: 443, path: '/api/v1/endpoint', method: 'POST', headers: { Authorization: `Bearer ${token}`, 'Content-Type': 'application/json', 'Content-Length': Buffer.byteLength(postData) } }; const req = https.request(options, (res) => { let responseData = ''; res.on('data', (chunk) => { responseData += chunk; }); res.on('end', () => { resolve(JSON.parse(responseData)); }); }); req.on('error', (error) => { reject(error); }); req.write(postData); req.end(); }); } ``` ## üß™ Testing ### Unit Tests ```typescript import { testEndpoint } from './api-client'; describe('Endpoint API', () => { test('should create resource successfully', async () => { const mockData = { name: 'Test Resource', description: 'Test description' }; const response = await testEndpoint.post('/endpoint', mockData); expect(response.success).toBe(true); expect(response.data.name).toBe('Test Resource'); }); test('should handle validation errors', async () => { const invalidData = { name: '', // Invalid: empty name description: 'Test' }; try { await testEndpoint.post('/endpoint', invalidData); } catch (error) { expect(error.response.status).toBe(400); expect(error.response.data.error.code).toBe('VALIDATION_ERROR'); } }); }); ``` ### Integration Tests ```typescript import { request } from 'supertest'; import { app } from '../app'; describe('Endpoint Integration', () => { test('should integrate with authentication', async () => { const response = await request(app) .post('/api/v1/endpoint') .set('Authorization', `Bearer ${validToken}`) .send({ name: 'Integration Test', description: 'Integration test description' }) .expect(201); expect(response.body.success).toBe(true); }); }); ``` ## üìä Performance ### Response Times - **Average**: 150ms - **95th Percentile**: 300ms - **99th Percentile**: 500ms ### Throughput - **Requests per second**: 1000 - **Concurrent users**: 500 ### Caching - **Cache TTL**: 300 seconds - **Cache Key**: `endpoint:{id}:{version}` ## üîß Implementation Notes ### Database Queries ```sql -- Main query for fetching resources SELECT id, name, description, tags, metadata, settings, created_at, updated_at FROM resources WHERE user_id = $1 ORDER BY created_at DESC LIMIT $2 OFFSET $3; ``` ### Validation Rules ```typescript const validationSchema = { name: { required: true, type: 'string', minLength: 1, maxLength: 255 }, description: { required: true, type: 'string', minLength: 10, maxLength: 1000 }, tags: { type: 'array', items: { type: 'string', maxLength: 50 }, maxItems: 10 } }; ``` ## üîó Related Endpoints - **[GET /api/v1/related-endpoint](../related-endpoint/)** - Related functionality - **[POST /api/v1/other-endpoint](../other-endpoint/)** - Other related functionality - **[DELETE /api/v1/endpoint/:id](../endpoint-delete/)** - Delete this resource ## üìö References - **[API Authentication](../authentication/)** - Authentication guide - **[Rate Limiting](../rate-limiting/)** - Rate limiting details - **[Error Handling](../error-handling/)** - Error response format - **[Pagination](../pagination/)** - Pagination standards ## üìù Changelog ### Version 1.2.0 - Added new query parameters - Improved error messages - Performance optimizations ### Version 1.1.0 - Added metadata field - Enhanced validation - Bug fixes ### Version 1.0.0 - Initial release - Basic CRUD operations - Authentication integration --- **Last Updated**: {{ site.time | date: \"%B %d, %Y\" }} **Author**: [Your Name] **Reviewers**: [Reviewer Names] ",
    "./src/templates/component-template.md": "--- layout: default title: 'Component Documentation Template' description: 'Template for React component documentation' permalink: /templates/component-template/ --- # üìã Component Documentation Template Use this template when documenting React components for the Idling.app project. ## üìù Template Instructions 1. **Copy this template** to your component documentation location 2. **Replace placeholders** with your specific information 3. **Delete this instruction section** before publishing 4. **Follow the structure** provided below --- # [ComponentName] Brief description of the component and its purpose. ## üéØ Overview ### Purpose Explain what this component does and why it exists. ### Key Features - **Feature 1**: Description of the first key feature - **Feature 2**: Description of the second key feature - **Feature 3**: Description of the third key feature ## üì¶ Installation ```bash # If it's a standalone component npm install @idling/component-name # Or import from the component library import { ComponentName } from '@/components/ComponentName'; ``` ## üîß Props Interface ```typescript interface ComponentNameProps { // Required props id: string; title: string; // Optional props description?: string; variant?: 'primary' | 'secondary' | 'danger'; size?: 'small' | 'medium' | 'large'; disabled?: boolean; // Event handlers onClick?: (event: MouseEvent) => void; onSubmit?: (data: FormData) => void; // Children and styling children?: React.ReactNode; className?: string; style?: React.CSSProperties; } ``` ### Prop Descriptions | Prop | Type | Default | Description | | ------------- | -------------------------------------- | ----------- | ------------------------------------------------- | | `id` | `string` | - | **Required.** Unique identifier for the component | | `title` | `string` | - | **Required.** Display title for the component | | `description` | `string` | `undefined` | Optional description text | | `variant` | `'primary' \| 'secondary' \| 'danger'` | `'primary'` | Visual variant of the component | | `size` | `'small' \| 'medium' \| 'large'` | `'medium'` | Size variant of the component | | `disabled` | `boolean` | `false` | Whether the component is disabled | | `onClick` | `(event: MouseEvent) => void` | `undefined` | Click event handler | | `onSubmit` | `(data: FormData) => void` | `undefined` | Submit event handler | | `children` | `React.ReactNode` | `undefined` | Child components or content | | `className` | `string` | `undefined` | Additional CSS classes | | `style` | `React.CSSProperties` | `undefined` | Inline styles | ## üöÄ Usage Examples ### Basic Usage ```tsx import { ComponentName } from '@/components/ComponentName'; function MyPage() { return ( <ComponentName id=\"example-component\" title=\"Example Component\" description=\"This is an example component\" /> ); } ``` ### With Event Handlers ```tsx import { ComponentName } from '@/components/ComponentName'; function InteractiveExample() { const handleClick = (event: MouseEvent) => { console.log('Component clicked!', event); }; const handleSubmit = (data: FormData) => { console.log('Form submitted:', data); }; return ( <ComponentName id=\"interactive-component\" title=\"Interactive Component\" variant=\"primary\" size=\"large\" onClick={handleClick} onSubmit={handleSubmit} /> ); } ``` ### With Children ```tsx import { ComponentName } from '@/components/ComponentName'; function WithChildren() { return ( <ComponentName id=\"container-component\" title=\"Container Component\"> <p>This is child content</p> <button>Child Button</button> </ComponentName> ); } ``` ### All Variants ```tsx import { ComponentName } from '@/components/ComponentName'; function AllVariants() { return ( <div> <ComponentName id=\"primary-component\" title=\"Primary Variant\" variant=\"primary\" /> <ComponentName id=\"secondary-component\" title=\"Secondary Variant\" variant=\"secondary\" /> <ComponentName id=\"danger-component\" title=\"Danger Variant\" variant=\"danger\" /> </div> ); } ``` ## üé® Styling Guidelines ### CSS Classes The component uses the following CSS classes: ```css /Docker /app /bin /bin.usr-is-merged /boot /dev /etc /home /init /lib /lib.usr-is-merged /lib64 /lost+found /media /mnt /opt /proc /root /run /sbin /sbin.usr-is-merged /snap /srv /sys /tmp /usr /var /wslAOHfEh /wslFgieig /wslGiDGlg /wslHdGhjg /wslMEKAlg /wslOFllck /wslPFkBGh /wslaamLFh /wslajcDlg /wslcLijck /wsldLlHck /wsliANAGh /wsllKaoFh /wslmHHock /wsloLDFbk Base component styles __mocks__/ commits/ community/ coverage/ custom-eslint-rules/ docker-postgres/ docs/ e2e/ jekyll/ logs/ migrations/ node_modules/ playwright-report/ public/ scripts/ src/ test-results/ updates/ .component-name { /Docker /app /bin /bin.usr-is-merged /boot /dev /etc /home /init /lib /lib.usr-is-merged /lib64 /lost+found /media /mnt /opt /proc /root /run /sbin /sbin.usr-is-merged /snap /srv /sys /tmp /usr /var /wslAOHfEh /wslFgieig /wslGiDGlg /wslHdGhjg /wslMEKAlg /wslOFllck /wslPFkBGh /wslaamLFh /wslajcDlg /wslcLijck /wsldLlHck /wsliANAGh /wsllKaoFh /wslmHHock /wsloLDFbk Base styles __mocks__/ commits/ community/ coverage/ custom-eslint-rules/ docker-postgres/ docs/ e2e/ jekyll/ logs/ migrations/ node_modules/ playwright-report/ public/ scripts/ src/ test-results/ updates/ } /Docker /app /bin /bin.usr-is-merged /boot /dev /etc /home /init /lib /lib.usr-is-merged /lib64 /lost+found /media /mnt /opt /proc /root /run /sbin /sbin.usr-is-merged /snap /srv /sys /tmp /usr /var /wslAOHfEh /wslFgieig /wslGiDGlg /wslHdGhjg /wslMEKAlg /wslOFllck /wslPFkBGh /wslaamLFh /wslajcDlg /wslcLijck /wsldLlHck /wsliANAGh /wsllKaoFh /wslmHHock /wsloLDFbk Variant styles __mocks__/ commits/ community/ coverage/ custom-eslint-rules/ docker-postgres/ docs/ e2e/ jekyll/ logs/ migrations/ node_modules/ playwright-report/ public/ scripts/ src/ test-results/ updates/ .component-name--primary { /Docker /app /bin /bin.usr-is-merged /boot /dev /etc /home /init /lib /lib.usr-is-merged /lib64 /lost+found /media /mnt /opt /proc /root /run /sbin /sbin.usr-is-merged /snap /srv /sys /tmp /usr /var /wslAOHfEh /wslFgieig /wslGiDGlg /wslHdGhjg /wslMEKAlg /wslOFllck /wslPFkBGh /wslaamLFh /wslajcDlg /wslcLijck /wsldLlHck /wsliANAGh /wsllKaoFh /wslmHHock /wsloLDFbk Primary variant styles __mocks__/ commits/ community/ coverage/ custom-eslint-rules/ docker-postgres/ docs/ e2e/ jekyll/ logs/ migrations/ node_modules/ playwright-report/ public/ scripts/ src/ test-results/ updates/ } .component-name--secondary { /Docker /app /bin /bin.usr-is-merged /boot /dev /etc /home /init /lib /lib.usr-is-merged /lib64 /lost+found /media /mnt /opt /proc /root /run /sbin /sbin.usr-is-merged /snap /srv /sys /tmp /usr /var /wslAOHfEh /wslFgieig /wslGiDGlg /wslHdGhjg /wslMEKAlg /wslOFllck /wslPFkBGh /wslaamLFh /wslajcDlg /wslcLijck /wsldLlHck /wsliANAGh /wsllKaoFh /wslmHHock /wsloLDFbk Secondary variant styles __mocks__/ commits/ community/ coverage/ custom-eslint-rules/ docker-postgres/ docs/ e2e/ jekyll/ logs/ migrations/ node_modules/ playwright-report/ public/ scripts/ src/ test-results/ updates/ } .component-name--danger { /Docker /app /bin /bin.usr-is-merged /boot /dev /etc /home /init /lib /lib.usr-is-merged /lib64 /lost+found /media /mnt /opt /proc /root /run /sbin /sbin.usr-is-merged /snap /srv /sys /tmp /usr /var /wslAOHfEh /wslFgieig /wslGiDGlg /wslHdGhjg /wslMEKAlg /wslOFllck /wslPFkBGh /wslaamLFh /wslajcDlg /wslcLijck /wsldLlHck /wsliANAGh /wsllKaoFh /wslmHHock /wsloLDFbk Danger variant styles __mocks__/ commits/ community/ coverage/ custom-eslint-rules/ docker-postgres/ docs/ e2e/ jekyll/ logs/ migrations/ node_modules/ playwright-report/ public/ scripts/ src/ test-results/ updates/ } /Docker /app /bin /bin.usr-is-merged /boot /dev /etc /home /init /lib /lib.usr-is-merged /lib64 /lost+found /media /mnt /opt /proc /root /run /sbin /sbin.usr-is-merged /snap /srv /sys /tmp /usr /var /wslAOHfEh /wslFgieig /wslGiDGlg /wslHdGhjg /wslMEKAlg /wslOFllck /wslPFkBGh /wslaamLFh /wslajcDlg /wslcLijck /wsldLlHck /wsliANAGh /wsllKaoFh /wslmHHock /wsloLDFbk Size styles __mocks__/ commits/ community/ coverage/ custom-eslint-rules/ docker-postgres/ docs/ e2e/ jekyll/ logs/ migrations/ node_modules/ playwright-report/ public/ scripts/ src/ test-results/ updates/ .component-name--small { /Docker /app /bin /bin.usr-is-merged /boot /dev /etc /home /init /lib /lib.usr-is-merged /lib64 /lost+found /media /mnt /opt /proc /root /run /sbin /sbin.usr-is-merged /snap /srv /sys /tmp /usr /var /wslAOHfEh /wslFgieig /wslGiDGlg /wslHdGhjg /wslMEKAlg /wslOFllck /wslPFkBGh /wslaamLFh /wslajcDlg /wslcLijck /wsldLlHck /wsliANAGh /wsllKaoFh /wslmHHock /wsloLDFbk Small size styles __mocks__/ commits/ community/ coverage/ custom-eslint-rules/ docker-postgres/ docs/ e2e/ jekyll/ logs/ migrations/ node_modules/ playwright-report/ public/ scripts/ src/ test-results/ updates/ } .component-name--medium { /Docker /app /bin /bin.usr-is-merged /boot /dev /etc /home /init /lib /lib.usr-is-merged /lib64 /lost+found /media /mnt /opt /proc /root /run /sbin /sbin.usr-is-merged /snap /srv /sys /tmp /usr /var /wslAOHfEh /wslFgieig /wslGiDGlg /wslHdGhjg /wslMEKAlg /wslOFllck /wslPFkBGh /wslaamLFh /wslajcDlg /wslcLijck /wsldLlHck /wsliANAGh /wsllKaoFh /wslmHHock /wsloLDFbk Medium size styles __mocks__/ commits/ community/ coverage/ custom-eslint-rules/ docker-postgres/ docs/ e2e/ jekyll/ logs/ migrations/ node_modules/ playwright-report/ public/ scripts/ src/ test-results/ updates/ } .component-name--large { /Docker /app /bin /bin.usr-is-merged /boot /dev /etc /home /init /lib /lib.usr-is-merged /lib64 /lost+found /media /mnt /opt /proc /root /run /sbin /sbin.usr-is-merged /snap /srv /sys /tmp /usr /var /wslAOHfEh /wslFgieig /wslGiDGlg /wslHdGhjg /wslMEKAlg /wslOFllck /wslPFkBGh /wslaamLFh /wslajcDlg /wslcLijck /wsldLlHck /wsliANAGh /wsllKaoFh /wslmHHock /wsloLDFbk Large size styles __mocks__/ commits/ community/ coverage/ custom-eslint-rules/ docker-postgres/ docs/ e2e/ jekyll/ logs/ migrations/ node_modules/ playwright-report/ public/ scripts/ src/ test-results/ updates/ } /Docker /app /bin /bin.usr-is-merged /boot /dev /etc /home /init /lib /lib.usr-is-merged /lib64 /lost+found /media /mnt /opt /proc /root /run /sbin /sbin.usr-is-merged /snap /srv /sys /tmp /usr /var /wslAOHfEh /wslFgieig /wslGiDGlg /wslHdGhjg /wslMEKAlg /wslOFllck /wslPFkBGh /wslaamLFh /wslajcDlg /wslcLijck /wsldLlHck /wsliANAGh /wsllKaoFh /wslmHHock /wsloLDFbk State styles __mocks__/ commits/ community/ coverage/ custom-eslint-rules/ docker-postgres/ docs/ e2e/ jekyll/ logs/ migrations/ node_modules/ playwright-report/ public/ scripts/ src/ test-results/ updates/ .component-name--disabled { /Docker /app /bin /bin.usr-is-merged /boot /dev /etc /home /init /lib /lib.usr-is-merged /lib64 /lost+found /media /mnt /opt /proc /root /run /sbin /sbin.usr-is-merged /snap /srv /sys /tmp /usr /var /wslAOHfEh /wslFgieig /wslGiDGlg /wslHdGhjg /wslMEKAlg /wslOFllck /wslPFkBGh /wslaamLFh /wslajcDlg /wslcLijck /wsldLlHck /wsliANAGh /wsllKaoFh /wslmHHock /wsloLDFbk Disabled state styles __mocks__/ commits/ community/ coverage/ custom-eslint-rules/ docker-postgres/ docs/ e2e/ jekyll/ logs/ migrations/ node_modules/ playwright-report/ public/ scripts/ src/ test-results/ updates/ } .component-name--loading { /Docker /app /bin /bin.usr-is-merged /boot /dev /etc /home /init /lib /lib.usr-is-merged /lib64 /lost+found /media /mnt /opt /proc /root /run /sbin /sbin.usr-is-merged /snap /srv /sys /tmp /usr /var /wslAOHfEh /wslFgieig /wslGiDGlg /wslHdGhjg /wslMEKAlg /wslOFllck /wslPFkBGh /wslaamLFh /wslajcDlg /wslcLijck /wsldLlHck /wsliANAGh /wsllKaoFh /wslmHHock /wsloLDFbk Loading state styles __mocks__/ commits/ community/ coverage/ custom-eslint-rules/ docker-postgres/ docs/ e2e/ jekyll/ logs/ migrations/ node_modules/ playwright-report/ public/ scripts/ src/ test-results/ updates/ } ``` ### Custom Styling You can customize the component using CSS custom properties: ```css .component-name { --component-background: #f0f0f0; --component-text-color: #333; --component-border-color: #ccc; --component-border-radius: 4px; --component-padding: 1rem; } ``` ### Theme Integration The component integrates with the design system: ```tsx import { ComponentName } from '@/components/ComponentName'; import { useTheme } from '@/hooks/useTheme'; function ThemedComponent() { const theme = useTheme(); return ( <ComponentName id=\"themed-component\" title=\"Themed Component\" style={{ backgroundColor: theme.colors.background, color: theme.colors.text }} /> ); } ``` ## ‚ôø Accessibility ### ARIA Attributes The component implements proper ARIA attributes: ```tsx <ComponentName id=\"accessible-component\" title=\"Accessible Component\" aria-label=\"Component description\" aria-describedby=\"component-help-text\" role=\"button\" tabIndex={0} /> ``` ### Keyboard Navigation - **Tab**: Navigate to the component - **Enter/Space**: Activate the component (if interactive) - **Escape**: Close or cancel (if applicable) ### Screen Reader Support The component provides proper announcements: ```tsx <ComponentName id=\"announced-component\" title=\"Announced Component\" aria-live=\"polite\" aria-atomic=\"true\" /> ``` ### Color Contrast All variants meet WCAG 2.1 AA standards: - **Primary**: 4.5:1 contrast ratio - **Secondary**: 4.5:1 contrast ratio - **Danger**: 4.5:1 contrast ratio ## üß™ Testing ### Unit Tests ```typescript import { render, screen, fireEvent } from '@testing-library/react'; import { ComponentName } from './ComponentName'; describe('ComponentName', () => { test('renders with required props', () => { render( <ComponentName id=\"test-component\" title=\"Test Component\" /> ); expect(screen.getByText('Test Component')).toBeInTheDocument(); }); test('handles click events', () => { const handleClick = jest.fn(); render( <ComponentName id=\"test-component\" title=\"Test Component\" onClick={handleClick} /> ); fireEvent.click(screen.getByText('Test Component')); expect(handleClick).toHaveBeenCalledTimes(1); }); test('applies custom className', () => { render( <ComponentName id=\"test-component\" title=\"Test Component\" className=\"custom-class\" /> ); expect(screen.getByText('Test Component')).toHaveClass('custom-class'); }); }); ``` ### Integration Tests ```typescript import { render, screen } from '@testing-library/react'; import { ComponentName } from './ComponentName'; import { ThemeProvider } from '@/contexts/ThemeContext'; describe('ComponentName Integration', () => { test('integrates with theme provider', () => { render( <ThemeProvider> <ComponentName id=\"themed-component\" title=\"Themed Component\" /> </ThemeProvider> ); expect(screen.getByText('Themed Component')).toBeInTheDocument(); }); }); ``` ### E2E Tests ```typescript import { test, expect } from '@playwright/test'; test('ComponentName E2E', async ({ page }) => { await page.goto('/components/component-name'); // Test component rendering await expect(page.locator('[data-testid=\"component-name\"]')).toBeVisible(); // Test interaction await page.click('[data-testid=\"component-name\"]'); await expect(page.locator('[data-testid=\"result\"]')).toContainText('Clicked'); }); ``` ## üìä Performance ### Bundle Size - **Minified**: ~5KB - **Gzipped**: ~2KB ### Rendering Performance - **Initial Render**: <16ms - **Re-render**: <8ms - **Memory Usage**: <1MB ### Optimization Tips ```tsx // Use React.memo for expensive components const ComponentName = React.memo(({ id, title, ...props }) => { // Component implementation }); // Use useMemo for expensive calculations const expensiveValue = useMemo(() => { return calculateExpensiveValue(props); }, [props.dependency]); // Use useCallback for event handlers const handleClick = useCallback( (event) => { // Handle click }, [dependency] ); ``` ## üîß Implementation Details ### File Structure ``` src/components/ComponentName/ ‚îú‚îÄ‚îÄ index.ts # Export file ‚îú‚îÄ‚îÄ ComponentName.tsx # Main component ‚îú‚îÄ‚îÄ ComponentName.test.tsx # Unit tests ‚îú‚îÄ‚îÄ ComponentName.stories.tsx # Storybook stories ‚îú‚îÄ‚îÄ ComponentName.module.css # Component styles ‚îî‚îÄ‚îÄ types.ts # TypeScript types ``` ### Dependencies ```json { \"dependencies\": { \"react\": \"^18.0.0\", \"react-dom\": \"^18.0.0\" }, \"devDependencies\": { \"@testing-library/react\": \"^13.0.0\", \"@testing-library/jest-dom\": \"^5.0.0\" } } ``` ## üìö Related Components - **[RelatedComponent1](../RelatedComponent1/)** - Description of relationship - **[RelatedComponent2](../RelatedComponent2/)** - Description of relationship - **[ParentComponent](../ParentComponent/)** - Parent component that uses this ## üîó References - **[Design System](../../dev/components/library/)** - Component library guidelines - **[Testing Guide](../../dev/testing/)** - Testing best practices - **[Accessibility Guide](../../community/standards/design/)** - Accessibility standards - **[API Documentation](../../docs/api/)** - Related API endpoints ## üìù Changelog ### Version 1.2.0 - Added new `variant` prop - Improved accessibility support - Performance optimizations ### Version 1.1.0 - Added `size` prop - Enhanced TypeScript types - Bug fixes ### Version 1.0.0 - Initial release - Basic functionality - Unit tests --- **Last Updated**: {{ site.time | date: \"%B %d, %Y\" }} **Author**: [Your Name] **Reviewers**: [Reviewer Names] ",
    "./src/templates/feature-template.md": "--- layout: default title: 'Feature Documentation Template' description: 'Template for documenting new features' permalink: /templates/feature-template/ --- # üìã Feature Documentation Template Use this template when documenting new features for the Idling.app project. ## üìù Template Instructions 1. **Copy this template** to your feature documentation location 2. **Replace placeholders** with your specific information 3. **Delete this instruction section** before publishing 4. **Follow the structure** provided below --- # [Feature Name] Brief description of the feature and its purpose. ## üéØ Overview ### Purpose Explain why this feature was created and what problem it solves. ### Key Benefits - **Benefit 1**: Description of the first key benefit - **Benefit 2**: Description of the second key benefit - **Benefit 3**: Description of the third key benefit ## üë• User Stories ### Primary Use Cases **As a [user type], I want to [action] so that [benefit].** Example scenarios: - **Scenario 1**: Detailed description of the first use case - **Scenario 2**: Detailed description of the second use case - **Scenario 3**: Detailed description of the third use case ### Edge Cases Document important edge cases and how they're handled: - **Edge Case 1**: Description and handling approach - **Edge Case 2**: Description and handling approach ## üîß Technical Specification ### Architecture Overview ```mermaid graph TD A[User Interface] --> B[Feature Logic] B --> C[Data Layer] C --> D[Database] B --> E[External APIs] ``` ### Components #### Frontend Components - **Component 1**: `ComponentName` - Description and purpose - **Component 2**: `ComponentName` - Description and purpose - **Component 3**: `ComponentName` - Description and purpose #### Backend Services - **Service 1**: `ServiceName` - Description and purpose - **Service 2**: `ServiceName` - Description and purpose ### Data Models ```typescript interface FeatureData { id: string; name: string; description: string; createdAt: Date; updatedAt: Date; } ``` ### Database Schema ```sql CREATE TABLE feature_table ( id UUID PRIMARY KEY DEFAULT gen_random_uuid(), name VARCHAR(255) NOT NULL, description TEXT, created_at TIMESTAMP DEFAULT NOW(), updated_at TIMESTAMP DEFAULT NOW() ); ``` ## üîå API Documentation ### Endpoints #### GET /api/feature **Description**: Retrieve feature data **Request**: ```bash curl -X GET \"https://api.idling.app/api/feature\" \ -H \"Authorization: Bearer YOUR_TOKEN\" ``` **Response**: ```json { \"success\": true, \"data\": { \"id\": \"uuid\", \"name\": \"Feature Name\", \"description\": \"Feature description\" } } ``` #### POST /api/feature **Description**: Create new feature data **Request**: ```bash curl -X POST \"https://api.idling.app/api/feature\" \ -H \"Authorization: Bearer YOUR_TOKEN\" \ -H \"Content-Type: application/json\" \ -d '{ \"name\": \"New Feature\", \"description\": \"Feature description\" }' ``` **Response**: ```json { \"success\": true, \"data\": { \"id\": \"uuid\", \"name\": \"New Feature\", \"description\": \"Feature description\" } } ``` ### Authentication This feature requires: - **Authentication**: Valid JWT token - **Authorization**: `feature:read` and `feature:write` permissions ### Rate Limiting - **Read operations**: 100 requests per minute - **Write operations**: 20 requests per minute ## üß™ Testing Strategy ### Unit Tests ```typescript describe('FeatureService', () => { test('should create feature successfully', async () => { const featureData = { name: 'Test Feature', description: 'Test description' }; const result = await featureService.create(featureData); expect(result.success).toBe(true); expect(result.data.name).toBe('Test Feature'); }); }); ``` ### Integration Tests ```typescript describe('Feature API', () => { test('POST /api/feature should create feature', async () => { const response = await request(app) .post('/api/feature') .send({ name: 'Integration Test Feature', description: 'Test description' }) .expect(201); expect(response.body.success).toBe(true); }); }); ``` ### E2E Tests ```typescript test('user can create and view feature', async ({ page }) => { await page.goto('/features'); await page.click('[data-testid=\"create-feature-button\"]'); await page.fill('[data-testid=\"feature-name\"]', 'E2E Test Feature'); await page.fill('[data-testid=\"feature-description\"]', 'E2E description'); await page.click('[data-testid=\"submit-button\"]'); await expect(page.locator('[data-testid=\"feature-list\"]')).toContainText( 'E2E Test Feature' ); }); ``` ### Test Coverage - **Unit Tests**: 95% coverage minimum - **Integration Tests**: All API endpoints covered - **E2E Tests**: Critical user paths covered ## üöÄ Deployment Notes ### Prerequisites - Database migrations applied - Environment variables configured - Feature flags enabled (if applicable) ### Release Steps 1. **Pre-deployment**: - [ ] Run full test suite - [ ] Verify database migrations - [ ] Check environment configuration 2. **Deployment**: - [ ] Deploy backend services - [ ] Deploy frontend changes - [ ] Run smoke tests 3. **Post-deployment**: - [ ] Monitor error rates - [ ] Verify feature functionality - [ ] Update documentation ### Rollback Plan If issues arise: 1. Disable feature flag (if applicable) 2. Revert to previous deployment 3. Investigate and fix issues 4. Redeploy with fixes ## üìä Monitoring and Analytics ### Key Metrics - **Usage Metrics**: Feature adoption rate, user engagement - **Performance Metrics**: Response times, error rates - **Business Metrics**: Conversion rates, user satisfaction ### Alerts - **Error Rate**: Alert if error rate > 1% - **Response Time**: Alert if p95 > 500ms - **Usage**: Alert if usage drops > 50% ## üîó Related Documentation - **[API Documentation](../docs/api/)** - Complete API reference - **[Component Library](../dev/components/)** - UI components used - **[Testing Guide](../dev/testing/)** - Testing best practices - **[Deployment Guide](../docs/deployment/)** - Deployment procedures ## üìù Changelog ### Version 1.0.0 (Initial Release) - Initial feature implementation - Basic CRUD operations - User interface components - API endpoints - Test coverage --- **Last Updated**: {{ site.time | date: \"%B %d, %Y\" }} **Author**: [Your Name] **Reviewers**: [Reviewer Names] ",
    "./src/templates/index.md": "--- layout: default title: 'Documentation Templates' description: 'Standardized templates for consistent documentation' permalink: /templates/ --- # üìã Documentation Templates Standardized templates for creating consistent, high-quality documentation across the Idling.app project. ## üéØ Template Purpose Templates ensure: - **Consistency**: Uniform structure across all documentation - **Completeness**: All necessary sections are included - **Quality**: Professional and comprehensive documentation - **Efficiency**: Faster documentation creation process ## üìö Available Templates ### [Pull Request Template](pull_request_template/) Standardized pull request description format: - **Summary**: Clear description of changes - **Type of Change**: Feature, fix, docs, etc. - **Testing**: Testing approach and coverage - **Checklist**: Pre-merge verification steps - **Screenshots**: Visual changes documentation - **Breaking Changes**: Impact assessment ### [Feature Documentation Template](feature-template/) Template for documenting new features: - **Overview**: Feature description and purpose - **User Stories**: Use cases and scenarios - **Technical Specification**: Implementation details - **API Documentation**: Endpoint specifications - **Testing Strategy**: Test coverage and scenarios - **Deployment Notes**: Release considerations ### [Component Documentation Template](component-template/) Template for React component documentation: - **Component Overview**: Purpose and usage - **Props Interface**: TypeScript prop definitions - **Usage Examples**: Code examples and demos - **Styling Guidelines**: CSS and theme integration - **Accessibility**: WCAG compliance notes - **Testing Examples**: Unit and integration tests ### [API Endpoint Template](api-template/) Template for API endpoint documentation: - **Endpoint Description**: Purpose and functionality - **Request/Response**: Schema and examples - **Authentication**: Required permissions - **Error Handling**: Error codes and messages - **Rate Limiting**: Usage restrictions - **Examples**: cURL and SDK examples ## üîß Template Usage ### 1. Choose Template Select the appropriate template for your documentation type: ```bash # Copy template to your documentation location cp DOCS/templates/feature-template.md your-feature-docs.md ``` ### 2. Customize Content Replace placeholder content with your specific information: - Update title and description - Fill in all required sections - Add relevant examples and code snippets - Include necessary diagrams or screenshots ### 3. Review Checklist Before publishing, ensure: - [ ] All sections are completed - [ ] Code examples are tested - [ ] Links are valid and working - [ ] Grammar and spelling are correct - [ ] Formatting follows style guide ## üìù Writing Guidelines ### Content Structure #### Clear Headings Use descriptive, hierarchical headings: ```markdown # Main Title ## Major Section ### Subsection #### Detail Section ``` #### Consistent Formatting - **Bold** for emphasis and labels - `Code` for inline code and filenames - _Italic_ for quotes and references - Lists for step-by-step instructions #### Code Examples Always include working code examples: ```typescript // Good: Complete, working example interface UserProps { id: string; name: string; email: string; } function UserCard({ id, name, email }: UserProps) { return ( <div className=\"user-card\"> <h3>{name}</h3> <p>{email}</p> </div> ); } ``` ### Writing Style #### Voice and Tone - **Professional**: Clear and authoritative - **Helpful**: Supportive and encouraging - **Concise**: Direct and to the point - **Inclusive**: Accessible to all skill levels #### Technical Accuracy - Verify all code examples work - Test all instructions step-by-step - Keep documentation up-to-date - Link to authoritative sources ## üé® Visual Elements ### Diagrams and Charts Use Mermaid for technical diagrams: ```mermaid graph TD A[User Request] --> B[Authentication] B --> C[Validation] C --> D[Business Logic] D --> E[Database] E --> F[Response] ``` ### Screenshots and Images Include visual aids when helpful: - UI screenshots for user-facing features - Architecture diagrams for system design - Flowcharts for complex processes - Before/after comparisons for changes ### Code Syntax Highlighting Use appropriate language tags: ```bash # Terminal commands npm install package-name ``` ```json { \"config\": \"value\", \"setting\": true } ``` ```sql SELECT DOCUMENTATION_ARCHITECTURE.md Dockerfile Dockerfile.docs LINK_AUDIT.md LinkedIn_Documentation_Infrastructure_Report.md PRODUCTION_PERFORMANCE_COMMANDS.txt PRODUCTION_PERFORMANCE_COMMANDS_WITH_PASSWORD.txt README-DB-EXPLORER.md README.md TESTING.md __mocks__ changelog-preset.js commitlint.config.js commits community coverage custom-eslint-rules debug-content-parser.js docker-compose.dev.yml docker-compose.yml docker-postgres docs documentation-coverage.md e2e global.d.ts index.md jekyll jest.config.js jest.env.js jest.setup.js logs migrations next-env.d.ts next.config.js node_modules package-lock.json package.json playwright-report playwright.config.ts pnpm-lock.yaml public scripts seed-db-faker.js sonar-project.properties src swagger.config.js test-results test_output.txt tsconfig.json tsconfig.tsbuildinfo updates yarn.lock FROM users WHERE active = true; ``` ## üìä Template Maintenance ### Regular Updates Templates are reviewed and updated: - **Monthly**: Minor improvements and fixes - **Quarterly**: Major structure updates - **Annually**: Complete template overhaul ### Version Control All templates are version controlled: - Track changes and improvements - Maintain backward compatibility - Document breaking changes - Provide migration guides ### Community Feedback Template improvements come from: - User feedback and suggestions - Best practice research - Industry standard updates - Team retrospectives ## üîó Related Resources ### Style Guides - **[Writing Style Guide](../community/standards/docs/)** - Writing conventions - **[Code Style Guide](../community/standards/code/)** - Code formatting rules - **[Design System](../dev/components/library/)** - UI component guidelines ### Tools - **[Markdown Guide](https://www.markdownguide.org/)** - Markdown syntax reference - **[Mermaid Documentation](https://mermaid-js.github.io/)** - Diagram syntax - **[Jekyll Documentation](https://jekyllrb.com/docs/)** - Static site generator ### Examples - **[API Documentation](../docs/api/)** - Real API documentation examples - **[Component Library](../dev/components/)** - Component documentation examples - **[Architecture Docs](../docs/architecture/)** - Technical documentation examples ## üöÄ Getting Started 1. **Choose Template**: Select the appropriate template for your needs 2. **Copy Template**: Create a new file from the template 3. **Customize Content**: Fill in your specific information 4. **Review Guidelines**: Follow the writing and formatting guidelines 5. **Submit for Review**: Get feedback before publishing 6. **Publish**: Add to the documentation site --- _Templates are continuously improved based on team feedback and best practices. Last updated: {{ site.time | date: \"%B %d, %Y\" }}_ ",
    "./src/templates/pull_request_template.md": "--- layout: default title: 'Pull Request Template' description: 'Standardized pull request description template' permalink: /templates/pull_request_template/ --- # üîÑ Pull Request Template Standardized template for creating comprehensive pull request descriptions. ## üìã Template Format Copy and paste this template when creating pull requests: ```markdown ## üìù Summary Brief description of the changes in this pull request. ## üîß Type of Change - [ ] üêõ Bug fix (non-breaking change which fixes an issue) - [ ] ‚ú® New feature (non-breaking change which adds functionality) - [ ] üí• Breaking change (fix or feature that would cause existing functionality to not work as expected) - [ ] üìö Documentation update - [ ] üé® Style/UI changes - [ ] ‚ôªÔ∏è Code refactoring (no functional changes) - [ ] ‚ö° Performance improvements - [ ] üß™ Test additions or modifications - [ ] üîß Build/CI changes - [ ] üèóÔ∏è Infrastructure changes ## üéØ Related Issues Closes #[issue_number] Fixes #[issue_number] Relates to #[issue_number] ## üöÄ Changes Made ### Added - New feature or functionality - New components or utilities - New documentation ### Changed - Modified existing functionality - Updated dependencies - Improved performance ### Removed - Deprecated features - Unused code or files - Outdated documentation ### Fixed - Bug fixes - Security vulnerabilities - Performance issues ## üß™ Testing ### Test Coverage - [ ] Unit tests added/updated - [ ] Integration tests added/updated - [ ] E2E tests added/updated - [ ] Manual testing completed ### Testing Checklist - [ ] All existing tests pass - [ ] New tests cover the changes - [ ] Edge cases are tested - [ ] Error handling is tested ### Manual Testing Steps 1. Step-by-step instructions for manual testing 2. Expected behavior and results 3. Any specific test data or setup required ## üì± Screenshots/Videos ### Before [Screenshot or description of current state] ### After [Screenshot or description of new state] ### Demo [Link to demo video or GIF if applicable] ## üîí Security Considerations - [ ] No sensitive data exposed - [ ] Input validation implemented - [ ] Authentication/authorization checked - [ ] Security headers configured - [ ] Dependencies scanned for vulnerabilities ## üìä Performance Impact - [ ] No performance regression - [ ] Performance improvements measured - [ ] Bundle size impact assessed - [ ] Database query optimization verified ## üåê Browser/Device Testing - [ ] Chrome - [ ] Firefox - [ ] Safari - [ ] Edge - [ ] Mobile devices - [ ] Tablet devices ## üìö Documentation - [ ] Code comments added/updated - [ ] README updated - [ ] API documentation updated - [ ] User documentation updated - [ ] Migration guide created (if needed) ## üîÑ Migration Notes [Include any migration steps, database changes, or breaking changes] ## ‚úÖ Pre-merge Checklist ### Code Quality - [ ] Code follows project style guidelines - [ ] Self-review completed - [ ] Code is well-commented - [ ] No console.log or debug code left - [ ] TypeScript types are properly defined ### Testing - [ ] All tests pass locally - [ ] CI/CD pipeline passes - [ ] Code coverage meets requirements - [ ] Manual testing completed ### Documentation - [ ] Documentation updated - [ ] Breaking changes documented - [ ] API changes documented - [ ] User-facing changes documented ### Security - [ ] Security review completed - [ ] No sensitive data in code - [ ] Dependencies are secure - [ ] Authentication/authorization tested ### Performance - [ ] Performance impact assessed - [ ] Bundle size checked - [ ] Database queries optimized - [ ] Caching implemented where appropriate ## ü§ù Review Requests ### Specific Areas for Review - [ ] Architecture/design decisions - [ ] Security implementation - [ ] Performance optimizations - [ ] User experience - [ ] Accessibility compliance ### Questions for Reviewers 1. Specific questions about implementation choices 2. Areas where you need feedback 3. Alternative approaches to consider ## üîó Additional Context [Any additional context, background information, or links that would help reviewers understand the changes] ## üìã Deployment Notes ### Pre-deployment - [ ] Database migrations ready - [ ] Environment variables configured - [ ] Feature flags configured - [ ] Monitoring alerts updated ### Post-deployment - [ ] Health checks verified - [ ] Performance metrics monitored - [ ] Error rates monitored - [ ] User feedback collected --- **Reviewer Guidelines:** - Review for code quality, security, and performance - Test the changes locally if possible - Check documentation completeness - Verify breaking changes are properly documented - Ensure tests cover the new functionality ``` ## üí° Usage Tips ### 1. Customize for Your PR Not all sections are required for every PR. Remove or modify sections as needed: - **Small bug fixes**: Focus on summary, testing, and fixes - **New features**: Include all sections thoroughly - **Documentation updates**: Emphasize documentation and review sections - **Refactoring**: Focus on changes made and testing ### 2. Be Specific Provide detailed information: - Use clear, descriptive language - Include code examples when helpful - Reference specific files or functions - Explain the reasoning behind decisions ### 3. Visual Evidence Include screenshots or videos when: - UI changes are involved - Complex workflows are modified - Before/after comparisons are helpful - Demonstrating new functionality ## üîß Automation Integration ### GitHub Integration This template can be automatically applied by creating `.github/pull_request_template.md`: ```markdown <!-- Copy the template content here --> ``` ### Custom Templates Create multiple templates for different types of PRs: ``` .github/ PULL_REQUEST_TEMPLATE/ feature.md bugfix.md documentation.md hotfix.md ``` ## üìä Template Benefits ### For Authors - **Structured thinking**: Ensures all aspects are considered - **Complete information**: Provides reviewers with necessary context - **Consistent format**: Makes PRs easier to read and review - **Quality assurance**: Built-in checklists prevent oversights ### For Reviewers - **Clear context**: Understand the purpose and scope - **Testing guidance**: Know what to test and verify - **Risk assessment**: Identify potential issues early - **Efficient review**: Focus on the most important aspects ### For Teams - **Knowledge sharing**: Document decisions and reasoning - **Process improvement**: Identify common issues and patterns - **Quality metrics**: Track completion of checklists - **Onboarding**: Help new team members understand expectations --- _This template is designed to improve code review quality and team communication. Adapt it to your team's specific needs and workflow._ ",
    "./updates/index.md": "--- layout: default title: 'Project Updates' description: 'Latest project developments, releases, and announcements' permalink: /project/updates/ --- # üì∞ Project Updates Latest project developments, release notes, and team announcements for Idling.app. ## üöÄ Recent Releases ### v1.2.0 - Documentation Overhaul (Current) **Release Date**: {{ site.time | date: \"%B %d, %Y\" }} Major documentation restructuring and dead link fixes: #### ‚ú® Features - **Documentation Audit**: Complete audit and fix of all documentation links - **Path Restructuring**: Reorganized documentation paths for better navigation - **Missing Docs**: Created missing project management and commit guidelines - **Link Validation**: Implemented automated link checking #### üîß Improvements - Fixed all dead links in root documentation - Updated paths to point to existing comprehensive documentation - Created project management documentation structure - Added conventional commit guidelines - Improved navigation structure #### üìö Documentation Updates - Updated `DOCS/index.md` with correct paths - Created `DOCS/project/` documentation section - Added commit guidelines with examples - Restructured quick links table --- ### v1.1.0 - UI Enhancements **Release Date**: December 2024 Major UI improvements and component library expansion: #### ‚ú® Features - **Aside Flexibility**: Aside components can now expand to 80vh while maintaining minimum height - **Improved Scrolling**: Enhanced scrollbar visibility and behavior - **Component Library**: Expanded reusable component collection - **Design System**: Refined color palette and typography #### üîß Improvements - Better responsive design across all screen sizes - Improved accessibility compliance - Enhanced performance optimization - Streamlined development workflow --- ### v1.0.0 - Initial Release **Release Date**: November 2024 First major release of Idling.app platform: #### ‚ú® Core Features - **User Authentication**: Complete authentication system with JWT - **Content Management**: Post creation, editing, and management - **Real-time Features**: Live updates and notifications - **Rich Text Editor**: Advanced text editing with smart features - **Database System**: Comprehensive migration and seeding system - **API Documentation**: Complete OpenAPI/Swagger documentation #### üèóÔ∏è Infrastructure - **Next.js 14**: Modern React framework with App Router - **PostgreSQL**: Robust database with optimized queries - **Docker**: Containerized development and deployment - **TypeScript**: Full type safety across the application - **Testing**: Comprehensive test suite with Playwright and Jest ## üìÖ Development Milestones ### Q1 2025 - Planned Features #### üéØ Upcoming Features - **Advanced Search**: Enhanced search capabilities with filters - **User Preferences**: Customizable user settings and themes - **Mobile App**: React Native mobile application - **Analytics Dashboard**: User engagement and performance metrics - **API Rate Limiting**: Enhanced security and performance controls #### üîß Technical Improvements - **Performance Optimization**: Further speed improvements - **Security Enhancements**: Additional security measures - **Accessibility**: WCAG 2.1 AA compliance - **Internationalization**: Multi-language support - **Progressive Web App**: PWA features and offline support ### Q4 2024 - Completed ‚úÖ #### ‚úÖ Achievements - **Documentation System**: Complete Jekyll-based documentation - **Component Library**: Reusable UI component system - **Testing Infrastructure**: E2E and unit testing setup - **CI/CD Pipeline**: Automated testing and deployment - **Security Implementation**: Authentication and authorization - **Performance Optimization**: Core Web Vitals optimization ## üéØ Project Goals ### Short-term (Next 3 months) - [ ] Complete advanced search implementation - [ ] Enhance mobile responsiveness - [ ] Implement user preference system - [ ] Add comprehensive analytics - [ ] Improve documentation coverage ### Medium-term (Next 6 months) - [ ] Launch mobile application - [ ] Implement real-time collaboration features - [ ] Add advanced admin dashboard - [ ] Enhance security measures - [ ] Expand API capabilities ### Long-term (Next 12 months) - [ ] Scale to handle 100k+ users - [ ] Implement advanced AI features - [ ] Launch enterprise features - [ ] Open source community tools - [ ] International market expansion ## üìä Project Statistics ### Development Metrics - **Total Commits**: 500+ commits - **Contributors**: 8 active contributors - **Code Coverage**: 85% test coverage - **Documentation**: 90% documentation coverage - **Performance**: 95+ Lighthouse score ### Feature Metrics - **Components**: 50+ reusable components - **API Endpoints**: 30+ documented endpoints - **Database Tables**: 15 optimized tables - **Test Cases**: 200+ automated tests - **Documentation Pages**: 100+ documentation pages ## üîó Release Resources ### Documentation - **[Changelog](https://github.com/Underwood-Inc/idling.app__UI/blob/main/CHANGELOG.md)** - Detailed change log - **[Migration Guide](../dev/database/)** - Database migration instructions - **[Deployment Guide](../docs/deployment/)** - Production deployment steps - **[API Documentation](../src/app/api/)** - Complete API reference ### Development - **[Contributing Guide](../community/contributing/)** - How to contribute - **[Development Setup](../docs/getting-started/)** - Local development setup - **[Testing Guide](../dev/testing/)** - Testing strategies and tools - **[Code Standards](../community/standards/)** - Development standards ## üì¨ Stay Updated ### Communication Channels - **GitHub Releases**: [github.com/Underwood-Inc/idling.app\_\_UI/releases](https://github.com/Underwood-Inc/idling.app__UI/releases) - **Discord Community**: [Join our Discord](https://discord.gg/idling-app) - **GitHub Discussions**: [github.com/Underwood-Inc/idling.app\_\_UI/discussions](https://github.com/Underwood-Inc/idling.app__UI/discussions) - **Twitter Updates**: [@idling_app](https://twitter.com/idling_app) ### Release Schedule - **Major Releases**: Quarterly (every 3 months) - **Minor Releases**: Monthly feature updates - **Patch Releases**: Bi-weekly bug fixes and improvements - **Security Updates**: As needed (immediate) --- _Project updates are published regularly. Subscribe to our GitHub releases for notifications. Last updated: {{ site.time | date: \"%B %d, %Y\" }}_ "
  }
}
