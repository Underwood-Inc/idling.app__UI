#!/usr/bin/env python3
"""
Update centralized documentation coverage badges across the entire codebase
"""

import re
import os
import sys
import argparse
from datetime import datetime
from typing import Optional


class CentralizedBadgeUpdater:
    """Updates documentation coverage badges across README, Jekyll docs, and centralized files"""
    
    def __init__(self, badge_url: str, overall_coverage: int, doc_coverage: int, docstring_coverage: int):
        self.badge_url = badge_url
        self.overall_coverage = overall_coverage
        self.doc_coverage = doc_coverage
        self.docstring_coverage = docstring_coverage
        self.timestamp = datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S UTC')
        
    def update_centralized_badge_file(self) -> bool:
        """Update the centralized badge markdown file"""
        try:
            # Ensure badges directory exists
            os.makedirs('jekyll/badges', exist_ok=True)
            
            # Create the centralized badge content
            content = f"""<!-- This file is auto-generated by GitHub Actions - DO NOT EDIT MANUALLY -->
<!-- Documentation Coverage Badge - Updated: {self.timestamp} -->

[![Documentation Coverage]({self.badge_url})](https://underwood-inc.github.io/idling.app__UI/)

<!-- Badge URL for reference: {self.badge_url} -->
<!-- Coverage: {self.overall_coverage}% | Files: {self.doc_coverage}% | Docstrings: {self.docstring_coverage}% -->
"""
            
            with open('jekyll/badges/documentation-coverage.md', 'w') as f:
                f.write(content)
                
            print(f"✅ Updated centralized badge file: {self.overall_coverage}% coverage")
            return True
            
        except Exception as e:
            print(f"❌ Failed to update centralized badge file: {e}")
            return False
    
    def update_readme_badge(self) -> bool:
        """Update documentation coverage badge in README.md"""
        try:
            if not os.path.exists('README.md'):
                print("⚠️  README.md not found, skipping")
                return False
                
            with open('README.md', 'r') as f:
                content = f.read()
            
            # Pattern to match documentation coverage badge
            doc_badge_pattern = r'\[!\[Documentation Coverage\][^]]*\]\([^)]*\)'
            
            # New badge markdown
            new_badge = f'[![Documentation Coverage]({self.badge_url})](https://underwood-inc.github.io/idling.app__UI/)'
            
            if re.search(doc_badge_pattern, content):
                # Replace existing badge
                content = re.sub(doc_badge_pattern, new_badge, content)
                print("✅ Updated existing documentation coverage badge in README.md")
            else:
                # Add badge after ## Code Analysis header if it exists
                if '## Code Analysis' in content:
                    content = content.replace(
                        '## Code Analysis\n\n![React]',
                        f'## Code Analysis\n\n![React](https://img.shields.io/badge/React-19.0.0--alpha-61DAFB?style=flat&logo=react&logoColor=white)\n{new_badge}\n[![Quality Gate Status]'
                    )
                    # Fix the line that got broken
                    content = content.replace(
                        f'{new_badge}\n[![Quality Gate Status]',
                        f'{new_badge}\n'
                    )
                    print("✅ Added documentation coverage badge to README.md")
                else:
                    print("⚠️  Could not find ## Code Analysis section in README.md")
                    return False
            
            with open('README.md', 'w') as f:
                f.write(content)
                
            return True
            
        except Exception as e:
            print(f"❌ Failed to update README.md badge: {e}")
            return False
    
    def update_jekyll_badge(self) -> bool:
        """Update documentation coverage badge in Jekyll header"""
        try:
            header_file = 'jekyll/_includes/header.html'
            if not os.path.exists(header_file):
                print("⚠️  Jekyll header file not found, skipping")
                return False
                
            with open(header_file, 'r') as f:
                content = f.read()
            
            # More robust pattern to match the complete documentation coverage badge structure
            # This matches the anchor tag wrapping the img tag with flexible whitespace
            doc_badge_pattern = r'<a href="https://underwood-inc\.github\.io/idling\.app__UI/" target="_blank" rel="noopener">\s*<img src="[^"]*Documentation%20Coverage[^"]*" alt="Documentation Coverage" />\s*</a>'
            
            # New badge HTML with proper formatting to match existing structure
            new_badge_html = f'''<a href="https://underwood-inc.github.io/idling.app__UI/" target="_blank" rel="noopener">
            <img src="{self.badge_url}" alt="Documentation Coverage" />
          </a>'''
            
            # Store original content for comparison
            original_content = content
            replacement_made = False
            
            if re.search(doc_badge_pattern, content, re.MULTILINE | re.DOTALL):
                # Replace existing badge with proper multiline matching
                print("🔍 Found complete anchor + img pattern, attempting replacement...")
                content = re.sub(doc_badge_pattern, new_badge_html, content, flags=re.MULTILINE | re.DOTALL)
                replacement_made = True
                print("✅ Updated existing documentation coverage badge in Jekyll header")
            else:
                print("❌ Complete anchor + img pattern not found, trying fallback...")
                # Fallback: Try to find just the img tag pattern as a more lenient approach
                img_only_pattern = r'<img src="[^"]*Documentation%20Coverage[^"]*" alt="Documentation Coverage" />'
                if re.search(img_only_pattern, content):
                    print("🔍 Found img-only pattern, attempting replacement...")
                    # Replace just the img tag but preserve surrounding anchor structure
                    new_img_tag = f'<img src="{self.badge_url}" alt="Documentation Coverage" />'
                    content = re.sub(img_only_pattern, new_img_tag, content)
                    replacement_made = True
                    print("✅ Updated documentation coverage badge img tag in Jekyll header")
                else:
                    print("❌ Img-only pattern not found, trying to add new badge...")
                    # Try to add it after React badge as fallback
                    react_badge_pattern = r'(<img src="[^"]*React[^"]*" alt="React Version" />)'
                    if re.search(react_badge_pattern, content):
                        print("🔍 Found React badge, adding documentation badge after it...")
                        replacement = f'\\1\n          <a href="https://underwood-inc.github.io/idling.app__UI/" target="_blank" rel="noopener">\n            <img src="{self.badge_url}" alt="Documentation Coverage" />\n          </a>'
                        content = re.sub(react_badge_pattern, replacement, content)
                        replacement_made = True
                        print("✅ Added documentation coverage badge to Jekyll header after React badge")
                    else:
                        print("⚠️  Could not find React badge or existing documentation badge in Jekyll header")
                        print("🔍 Debug: Searching for documentation badge patterns...")
                        # Debug: Show what we're actually looking for
                        if "Documentation Coverage" in content:
                            print("✅ Found 'Documentation Coverage' text in header")
                            print("📋 Context around Documentation Coverage:")
                            lines = content.split('\n')
                            for i, line in enumerate(lines):
                                if "Documentation Coverage" in line:
                                    start = max(0, i-2)
                                    end = min(len(lines), i+3)
                                    for j in range(start, end):
                                        marker = ">>> " if j == i else "    "
                                        print(f"{marker}{j+1:3}: {lines[j]}")
                        else:
                            print("❌ No 'Documentation Coverage' text found in header")
                        return False
            
            # Verify the replacement was successful
            if replacement_made:
                if content != original_content:
                    print("🔍 Verifying replacement was successful...")
                    if self.badge_url in content:
                        print(f"✅ Confirmed: New badge URL is present in content")
                        print(f"🎯 Badge URL: {self.badge_url}")
                        
                        # Show the updated badge section for verification
                        lines = content.split('\n')
                        for i, line in enumerate(lines):
                            if self.badge_url in line:
                                start = max(0, i-2)
                                end = min(len(lines), i+3)
                                print("📋 Updated badge section:")
                                for j in range(start, end):
                                    marker = ">>> " if j == i else "    "
                                    print(f"{marker}{j+1:3}: {lines[j]}")
                                break
                    else:
                        print("❌ ERROR: Badge URL not found in updated content!")
                        print("🔍 This suggests the replacement failed silently")
                        return False
                else:
                    print("❌ ERROR: Content unchanged despite replacement attempt!")
                    return False
            
            with open(header_file, 'w') as f:
                f.write(content)
                
            return True
            
        except Exception as e:
            print(f"❌ Failed to update Jekyll header badge: {e}")
            return False
    
    def update_jekyll_include_badge(self) -> bool:
        """Update documentation coverage badge in Jekyll include file"""
        try:
            include_file = 'jekyll/_includes/documentation-coverage-badge.html'
            if not os.path.exists(include_file):
                print("⚠️  Jekyll include file not found, skipping")
                return False
                
            # Create the Jekyll include content
            content = f"""<!-- Documentation Coverage Badge Include - Auto-updated by GitHub Actions -->
<a href="https://underwood-inc.github.io/idling.app__UI/" target="_blank" rel="noopener" title="Documentation Coverage">
  <img src="{self.badge_url}" alt="Documentation Coverage" />
</a>"""
            
            with open(include_file, 'w') as f:
                f.write(content)
                
            print("✅ Updated Jekyll include badge file")
            return True
            
        except Exception as e:
            print(f"❌ Failed to update Jekyll include badge: {e}")
            return False

    def update_all_badges(self) -> bool:
        """Update all badge locations"""
        success = True
        
        print(f"🎨 Updating documentation coverage badges: {self.overall_coverage}%")
        print(f"   Files: {self.doc_coverage}% | Docstrings: {self.docstring_coverage}%")
        print()
        
        # Update centralized badge file
        if not self.update_centralized_badge_file():
            success = False
        
        # Update README.md
        if not self.update_readme_badge():
            success = False
            
        # Update Jekyll header
        if not self.update_jekyll_badge():
            success = False
            
        # Update Jekyll include file
        if not self.update_jekyll_include_badge():
            success = False
        
        if success:
            print(f"\n🎉 Successfully updated all documentation coverage badges!")
        else:
            print(f"\n⚠️  Some badge updates failed, check output above")
            
        return success


def main():
    parser = argparse.ArgumentParser(description='Update centralized documentation coverage badges')
    parser.add_argument('--badge-url', required=True, help='Badge URL from shields.io')
    parser.add_argument('--overall-coverage', type=int, required=True, help='Overall coverage percentage')
    parser.add_argument('--doc-coverage', type=int, required=True, help='Documentation files coverage percentage')
    parser.add_argument('--docstring-coverage', type=int, required=True, help='Python docstring coverage percentage')
    
    args = parser.parse_args()
    
    updater = CentralizedBadgeUpdater(
        badge_url=args.badge_url,
        overall_coverage=args.overall_coverage,
        doc_coverage=args.doc_coverage,
        docstring_coverage=args.docstring_coverage
    )
    
    success = updater.update_all_badges()
    sys.exit(0 if success else 1)


if __name__ == '__main__':
    main() 