#!/bin/bash

# Manual Performance Setup for Production
# Run these commands step by step on your production database

echo "ðŸš€ Manual Performance Optimization Setup"
echo "Run each command individually and check for errors"
echo ""

# Database connection info
DB_HOST="127.0.0.1"
DB_PORT="5432"
DB_NAME="mydatabase"
DB_USER="idler"

echo "Database: ${DB_NAME} on ${DB_HOST}:${DB_PORT} as ${DB_USER}"
echo ""

echo "========================================="
echo "STEP 1: Enable trigram extension"
echo "========================================="
echo "psql -h ${DB_HOST} -p ${DB_PORT} -U ${DB_USER} -d ${DB_NAME} -c \"CREATE EXTENSION IF NOT EXISTS pg_trgm;\""
echo ""

echo "========================================="
echo "STEP 2: Create trigram indexes (CRITICAL)"
echo "========================================="
echo "# Author search optimization (ILIKE '%username%')"
echo "psql -h ${DB_HOST} -p ${DB_PORT} -U ${DB_USER} -d ${DB_NAME} -c \"CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_submissions_author_trgm ON submissions USING GIN (author gin_trgm_ops) WHERE author IS NOT NULL;\""
echo ""
echo "# Title search optimization (ILIKE '%title%')"
echo "psql -h ${DB_HOST} -p ${DB_PORT} -U ${DB_USER} -d ${DB_NAME} -c \"CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_submissions_title_trgm ON submissions USING GIN (submission_title gin_trgm_ops) WHERE submission_title IS NOT NULL;\""
echo ""

echo "========================================="
echo "STEP 3: Core performance indexes"
echo "========================================="
echo "# Fast pagination (datetime + id)"
echo "psql -h ${DB_HOST} -p ${DB_PORT} -U ${DB_USER} -d ${DB_NAME} -c \"CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_submissions_datetime_id ON submissions (submission_datetime DESC, submission_id);\""
echo ""
echo "# Author + date filtering"
echo "psql -h ${DB_HOST} -p ${DB_PORT} -U ${DB_USER} -d ${DB_NAME} -c \"CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_submissions_author_datetime_fast ON submissions (author, submission_datetime DESC) WHERE author IS NOT NULL;\""
echo ""
echo "# Tag filtering (GIN array index)"
echo "psql -h ${DB_HOST} -p ${DB_PORT} -U ${DB_USER} -d ${DB_NAME} -c \"CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_submissions_tags_array ON submissions USING GIN (tags) WHERE tags IS NOT NULL AND array_length(tags, 1) > 0;\""
echo ""

echo "========================================="
echo "STEP 4: Thread and hierarchy indexes"
echo "========================================="
echo "# Thread hierarchy optimization"
echo "psql -h ${DB_HOST} -p ${DB_PORT} -U ${DB_USER} -d ${DB_NAME} -c \"CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_submissions_thread_optimized ON submissions (thread_parent_id, submission_datetime DESC) WHERE thread_parent_id IS NOT NULL;\""
echo ""
echo "# Main posts only (exclude replies)"
echo "psql -h ${DB_HOST} -p ${DB_PORT} -U ${DB_USER} -d ${DB_NAME} -c \"CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_submissions_main_posts_only ON submissions (submission_datetime DESC, submission_id) WHERE thread_parent_id IS NULL;\""
echo ""

echo "========================================="
echo "STEP 5: User activity optimization"
echo "========================================="
echo "# Author activity (if author_id column exists)"
echo "psql -h ${DB_HOST} -p ${DB_PORT} -U ${DB_USER} -d ${DB_NAME} -c \"CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_submissions_author_activity ON submissions (author_id, submission_datetime DESC) WHERE author_id IS NOT NULL;\""
echo ""

echo "========================================="
echo "STEP 6: Materialized view indexes (if views exist)"
echo "========================================="
echo "# Check if user_submission_stats exists first:"
echo "psql -h ${DB_HOST} -p ${DB_PORT} -U ${DB_USER} -d ${DB_NAME} -c \"SELECT EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'user_submission_stats');\""
echo ""
echo "# If it exists, add these indexes:"
echo "psql -h ${DB_HOST} -p ${DB_PORT} -U ${DB_USER} -d ${DB_NAME} -c \"CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_user_stats_combined_search ON user_submission_stats (LOWER(author), submission_count DESC);\""
echo "psql -h ${DB_HOST} -p ${DB_PORT} -U ${DB_USER} -d ${DB_NAME} -c \"CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_user_stats_author_prefix ON user_submission_stats (author text_pattern_ops);\""
echo ""

echo "========================================="
echo "STEP 7: Update statistics"
echo "========================================="
echo "psql -h ${DB_HOST} -p ${DB_PORT} -U ${DB_USER} -d ${DB_NAME} -c \"ANALYZE submissions;\""
echo ""

echo "========================================="
echo "STEP 8: Test performance"
echo "========================================="
echo "# Test author search performance"
echo "psql -h ${DB_HOST} -p ${DB_PORT} -U ${DB_USER} -d ${DB_NAME} -c \"EXPLAIN ANALYZE SELECT submission_id, author, submission_title FROM submissions WHERE author ILIKE '%test%' LIMIT 10;\""
echo ""

echo "========================================="
echo "STEP 9: Verify indexes were created"
echo "========================================="
echo "psql -h ${DB_HOST} -p ${DB_PORT} -U ${DB_USER} -d ${DB_NAME} -c \"SELECT indexname, tablename FROM pg_indexes WHERE tablename = 'submissions' AND indexname LIKE 'idx_submissions_%' ORDER BY indexname;\""
echo ""

echo "========================================="
echo "NOTES:"
echo "========================================="
echo "1. Run STEP 1 and STEP 2 first - these are the most critical for performance"
echo "2. CONCURRENTLY means no downtime, but indexes take time to build"
echo "3. Monitor disk space - indexes will use additional storage"
echo "4. If any command fails, check the error and continue with next ones"
echo "5. The trigram indexes (STEP 2) will give you the biggest performance boost"
echo "" 