name: 📚 Documentation Coverage (PR)

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: write
  pull-requests: write
  checks: write
  statuses: write

jobs:
  documentation-coverage:
    name: Documentation Coverage Check
    runs-on: ubuntu-latest

    # Don't cancel other workflows
    concurrency:
      group: docs-coverage-${{ github.event.pull_request.number }}
      cancel-in-progress: false

    steps:
      - name: 🛒 Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          ref: ${{ github.head_ref }}

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: 📦 Install Python dependencies
        run: |
          pip install interrogate pydocstyle

      - name: 🐍 Check Python docstring coverage
        id: interrogate
        run: |
          # Run interrogate and capture output
          if interrogate --fail-under=85 --verbose=2 src/ > interrogate_output.txt 2>&1; then
            echo "interrogate_passed=true" >> $GITHUB_OUTPUT
          else
            echo "interrogate_passed=false" >> $GITHUB_OUTPUT
          fi

          # Extract docstring coverage percentage
          DOCSTRING_COVERAGE=$(grep -oP 'TOTAL.*?(\K\d+(?=\.\d+%))' interrogate_output.txt || echo "0")
          echo "docstring_coverage=${DOCSTRING_COVERAGE}" >> $GITHUB_OUTPUT
        continue-on-error: true

      - name: 📚 Check documentation files coverage
        id: docs-coverage
        run: |
          # Comprehensive documentation coverage check
          total_files=0
          documented_files=0
          missing_files=()
          pr_files=()
          pr_missing_files=()

          # Get list of changed files in this PR
          git fetch origin ${{ github.base_ref }}
          changed_files=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | grep -E '\.(ts|tsx|js|jsx)$' | grep '^src/' || true)

          # Check ALL TypeScript/JavaScript files in src/
          echo "## 📊 Full Codebase Documentation Coverage" > coverage_report.md
          echo "" >> coverage_report.md

          for file in $(find src/ -name "*.ts" -o -name "*.tsx" -o -name "*.js" -o -name "*.jsx" 2>/dev/null || true); do
            if [ -f "$file" ]; then
              total_files=$((total_files + 1))
              
              # Convert src/path/file.ts to DOCS/src/path/file.md (properly handle extensions)
              doc_file="DOCS/${file%.*}.md"
              
              if [ -f "$doc_file" ]; then
                documented_files=$((documented_files + 1))
              else
                missing_files+=("$file")
              fi
              
              # Check if this file is in the PR
              if echo "$changed_files" | grep -q "^$file$"; then
                pr_files+=("$file")
                if [ ! -f "$doc_file" ]; then
                  pr_missing_files+=("$file")
                fi
              fi
            fi
          done

          # Calculate coverage
          if [ $total_files -eq 0 ]; then
            DOC_COVERAGE=100
          else
            DOC_COVERAGE=$((documented_files * 100 / total_files))
          fi

          echo "doc_coverage=${DOC_COVERAGE}" >> $GITHUB_OUTPUT
          echo "total_files=${total_files}" >> $GITHUB_OUTPUT
          echo "documented_files=${documented_files}" >> $GITHUB_OUTPUT
          echo "pr_files_count=${#pr_files[@]}" >> $GITHUB_OUTPUT
          echo "pr_missing_count=${#pr_missing_files[@]}" >> $GITHUB_OUTPUT

          if [ $DOC_COVERAGE -ge 85 ]; then
            echo "docs_coverage_passed=true" >> $GITHUB_OUTPUT
          else
            echo "docs_coverage_passed=false" >> $GITHUB_OUTPUT
          fi

          # Generate detailed reports with table formatting
          echo "### 📋 Missing Documentation Files (${#missing_files[@]} total)" >> coverage_report.md
          echo "" >> coverage_report.md
          if [ ${#missing_files[@]} -gt 0 ]; then
            echo "| Source File | Required Documentation |" >> coverage_report.md
            echo "|-------------|------------------------|" >> coverage_report.md
            printf '%s\n' "${missing_files[@]}" | while read -r line; do
              src_file="$line"
              # Fix the extension handling - only add .md once
              doc_file="DOCS/${src_file%.*}.md"
              echo "| \`${src_file}\` | \`${doc_file}\` |" >> coverage_report.md
            done
          else
            echo "✅ All source files have documentation!" >> coverage_report.md
          fi
          echo "" >> coverage_report.md

          # Generate PR-specific report with table formatting
          echo "**Files changed in this PR:** ${#pr_files[@]}" > pr_coverage_report.md
          echo "**Missing documentation:** ${#pr_missing_files[@]}" >> pr_coverage_report.md
          echo "" >> pr_coverage_report.md

          if [ ${#pr_missing_files[@]} -gt 0 ]; then
            echo "### 📝 Files in this PR that need documentation:" >> pr_coverage_report.md
            echo "" >> pr_coverage_report.md
            echo "| Source File | Required Documentation |" >> pr_coverage_report.md
            echo "|-------------|------------------------|" >> pr_coverage_report.md
            printf '%s\n' "${pr_missing_files[@]}" | while read -r line; do
              src_file="$line"
              # Fix the extension handling - only add .md once
              doc_file="DOCS/${src_file%.*}.md"
              echo "| \`${src_file}\` | \`${doc_file}\` |" >> pr_coverage_report.md
            done
            echo "" >> pr_coverage_report.md
            echo "💡 **Tip**: Create these documentation files to improve coverage!" >> pr_coverage_report.md
          else
            if [ ${#pr_files[@]} -gt 0 ]; then
              echo "✅ **All files in this PR have documentation!**" >> pr_coverage_report.md
            else
              echo "ℹ️ **No source files were changed in this PR.**" >> pr_coverage_report.md
            fi
          fi
        continue-on-error: true

      - name: 🎨 Generate documentation coverage badge
        id: generate-badge
        run: |
          # Get coverage percentage
          DOC_COVERAGE="${{ steps.docs-coverage.outputs.doc_coverage }}"
          DOCSTRING_COVERAGE="${{ steps.interrogate.outputs.docstring_coverage }}"

          # Calculate overall documentation coverage (weighted average)
          OVERALL_COVERAGE=$(python -c "print(int(($DOC_COVERAGE * 0.6) + ($DOCSTRING_COVERAGE * 0.4)))")
          echo "overall_coverage=${OVERALL_COVERAGE}" >> $GITHUB_OUTPUT

          # Determine badge color based on coverage
          if [ "$OVERALL_COVERAGE" -ge 90 ]; then
            COLOR="brightgreen"
          elif [ "$OVERALL_COVERAGE" -ge 75 ]; then
            COLOR="green"
          elif [ "$OVERALL_COVERAGE" -ge 60 ]; then
            COLOR="yellow"
          elif [ "$OVERALL_COVERAGE" -ge 40 ]; then
            COLOR="orange"
          else
            COLOR="red"
          fi

          # Generate badge URL
          BADGE_URL="https://img.shields.io/badge/Documentation%20Coverage-${OVERALL_COVERAGE}%25-${COLOR}?style=flat&logo=gitbook&logoColor=white"
          echo "badge_url=${BADGE_URL}" >> $GITHUB_OUTPUT

          echo "Generated documentation coverage badge: ${OVERALL_COVERAGE}%"

      - name: 📝 Update badges in PR files
        run: |
          echo "📝 Updating documentation coverage badges in PR files..."

          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          BADGE_URL="${{ steps.generate-badge.outputs.badge_url }}"

          # Simple and safe badge replacement
          echo "🔧 Updating README.md..."
          if grep -q "<!-- DOCUMENTATION_COVERAGE_BADGE_PLACEHOLDER -->" README.md; then
            # Replace placeholder with complete badge
            sed -i "s|<!-- DOCUMENTATION_COVERAGE_BADGE_PLACEHOLDER -->|[![Documentation Coverage](${BADGE_URL})](https://underwood-inc.github.io/idling.app__UI/)|" README.md
            echo "✅ Updated README.md badge"
          else
            echo "⚠️ No placeholder found in README.md"
          fi

          echo "🎨 Updating Jekyll header..."
          if grep -q "<!-- DOCUMENTATION_COVERAGE_BADGE_PLACEHOLDER -->" DOCS/_includes/header.html; then
            # Replace placeholder with complete badge
            sed -i "s|<!-- DOCUMENTATION_COVERAGE_BADGE_PLACEHOLDER -->|<img src=\"${BADGE_URL}\" alt=\"Documentation Coverage\" />|" DOCS/_includes/header.html
            echo "✅ Updated Jekyll header badge"
          else
            echo "⚠️ No placeholder found in Jekyll header"
          fi

          # Commit changes if any
          if ! git diff --quiet README.md DOCS/_includes/header.html; then
            echo "📝 Committing badge updates..."
            git add README.md DOCS/_includes/header.html
            git commit -m "docs: update documentation coverage badge - ${{ steps.generate-badge.outputs.overall_coverage }}%"
            git push origin ${{ github.head_ref }}
            echo "✅ Badge updates committed to PR"
          else
            echo "📝 No badge changes to commit"
          fi

      - name: 📋 Update PR description with badge
        uses: actions/github-script@v7
        with:
          script: |
            const badgeUrl = '${{ steps.generate-badge.outputs.badge_url }}';
            const overallCoverage = '${{ steps.generate-badge.outputs.overall_coverage }}';
            const docCoverage = '${{ steps.docs-coverage.outputs.doc_coverage }}';
            const docstringCoverage = '${{ steps.interrogate.outputs.docstring_coverage }}';

            // Get current PR
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });

            let body = pr.body || '';

            // Create documentation coverage section
            const overallStatus = parseInt(overallCoverage) >= 85 ? '✅' : '❌';
            const docStatus = parseInt(docCoverage) >= 85 ? '✅' : '❌';
            const docstringStatus = parseInt(docstringCoverage) >= 85 ? '✅' : '❌';

            const docSection = '## 📚 Documentation Coverage Status\n\n' +
              '![Documentation Coverage](' + badgeUrl + ')\n\n' +
              '| Metric | Coverage | Status |\n' +
              '|--------|----------|--------|\n' +
              '| Overall | ' + overallCoverage + '% | ' + overallStatus + ' |\n' +
              '| Documentation Files | ' + docCoverage + '% | ' + docStatus + ' |\n' +
              '| Python Docstrings | ' + docstringCoverage + '% | ' + docstringStatus + ' |\n\n' +
              '*Updated automatically by Documentation Coverage workflow*\n\n' +
              '---\n\n';

            // Remove existing documentation section if present
            body = body.replace(/## 📚 Documentation Coverage Status[\s\S]*?---\s*\n\n?/g, '');

            // Add new section at the top
            body = docSection + body;

            // Update PR description
            await github.rest.pulls.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
              body: body
            });

            console.log('✅ Updated PR description with documentation coverage badge');

      - name: 💬 Comment on PR with detailed results
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            const interrogatePassed = '${{ steps.interrogate.outputs.interrogate_passed }}' === 'true';
            const docsCoveragePassed = '${{ steps.docs-coverage.outputs.docs_coverage_passed }}' === 'true';
            const badgeUrl = '${{ steps.generate-badge.outputs.badge_url }}';

            const overallStatus = interrogatePassed && docsCoveragePassed ? '✅' : '❌';

            let comment = `## ${overallStatus} Documentation Coverage Report\n\n`;
            comment += `![Documentation Coverage](${badgeUrl})\n\n`;
            comment += `| Check | Status | Coverage |\n`;
            comment += `|-------|--------|---------|\n`;
            comment += `| Python Docstrings | ${interrogatePassed ? '✅' : '❌'} | ${{ steps.interrogate.outputs.docstring_coverage }}% |\n`;
            comment += `| Documentation Files | ${docsCoveragePassed ? '✅' : '❌'} | ${{ steps.docs-coverage.outputs.doc_coverage }}% |\n\n`;
            comment += `**Overall Coverage: ${{ steps.generate-badge.outputs.overall_coverage }}%**\n\n`;

            // Add PR-specific documentation status
            try {
              if (fs.existsSync('pr_coverage_report.md')) {
                const prReportContent = fs.readFileSync('pr_coverage_report.md', 'utf8');
                comment += `<details>\n<summary>🔍 This PR's Documentation Status</summary>\n\n`;
                comment += prReportContent + '\n';
                comment += `</details>\n\n`;
              }
            } catch (error) {
              console.log('Error reading PR coverage report:', error);
            }

            // Add detailed reports in collapsible sections if there are issues
            if (!interrogatePassed) {
              comment += `<details>\n<summary>🐍 Python Docstring Coverage Details</summary>\n\n`;
              
              try {
                if (fs.existsSync('interrogate_output.txt')) {
                  const interrogateOutput = fs.readFileSync('interrogate_output.txt', 'utf8');
                  comment += '```\n' + interrogateOutput + '\n```\n';
                } else {
                  comment += 'No detailed interrogate output available.\n';
                }
              } catch (error) {
                comment += 'Error reading interrogate output.\n';
              }
              
              comment += `\n</details>\n\n`;
            }

            // Add full codebase documentation status
            if (!docsCoveragePassed) {
              comment += `<details>\n<summary>📚 Full Codebase Documentation Coverage</summary>\n\n`;
              
              try {
                if (fs.existsSync('coverage_report.md')) {
                  const fullReportContent = fs.readFileSync('coverage_report.md', 'utf8');
                  comment += fullReportContent + '\n';
                } else {
                  comment += `**Overall:** ${{ steps.docs-coverage.outputs.documented_files }} of ${{ steps.docs-coverage.outputs.total_files }} files documented\n\n`;
                  comment += `Some source files are missing corresponding documentation files. `;
                  comment += `Please create documentation files in the \`DOCS/\` directory following the same structure as your source files.\n\n`;
                  comment += `**Expected Documentation Structure:**\n`;
                  comment += `- For \`src/components/Button.tsx\` → create \`DOCS/src/components/Button.md\`\n`;
                  comment += `- For \`src/utils/helpers.ts\` → create \`DOCS/src/utils/helpers.md\`\n`;
                }
              } catch (error) {
                comment += 'Error reading full coverage report.\n';
              }
              
              comment += `</details>\n\n`;
            }

            comment += `---\n*This comment was automatically generated by the Documentation Coverage workflow.*`;

            // Post comment
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: 📊 Set final status
        if: always()
        run: |
          echo "📊 Final Documentation Coverage Status Check"
          echo "============================================="
          echo "Python Docstrings: ${{ steps.interrogate.outputs.docstring_coverage }}% (passed: ${{ steps.interrogate.outputs.interrogate_passed }})"
          echo "Documentation Files: ${{ steps.docs-coverage.outputs.doc_coverage }}% (passed: ${{ steps.docs-coverage.outputs.docs_coverage_passed }})"
          echo "Overall Coverage: ${{ steps.generate-badge.outputs.overall_coverage }}%"
          echo ""

          # Always report status, but don't fail the workflow
          if [[ "${{ steps.interrogate.outputs.interrogate_passed }}" == "true" && "${{ steps.docs-coverage.outputs.docs_coverage_passed }}" == "true" ]]; then
            echo "✅ Documentation coverage meets requirements"
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "⚠️ Documentation coverage below threshold (informational only)"
            echo "💡 This does not block PR merging - it's for awareness"
            echo "🎯 Target: 85% coverage for both Python docstrings and documentation files"
            echo "status=success" >> $GITHUB_OUTPUT
          fi

          # Always exit successfully to not block other checks
          exit 0
