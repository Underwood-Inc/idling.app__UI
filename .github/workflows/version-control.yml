name: Version Bump and Changelog

on:
  workflow_dispatch: # Add this trigger to allow manual dispatch
    inputs:
      head_ref:
        description: 'The head ref of the pull request'
        required: false
      base_ref:
        description: 'The base ref of the pull request'
        required: false
      event_name:
        description: 'The name of the event that triggered the workflow'
        required: true
      pr_number:
        description: 'The pull request number'
        required: false

jobs:
  version-bump:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Install dependencies
        run: npm install -g yarn && yarn

      - name: Configure Git
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com

      - name: Get last processed commit
        id: last-commit
        run: |
          LAST_PROCESSED_COMMIT=$(cat .last_processed_commit 2>/dev/null || echo "")
          echo "::set-output name=last_commit::$LAST_PROCESSED_COMMIT"

      - name: Update version and changelog
        run: |
          LAST_PROCESSED_COMMIT=${{ steps.last-commit.outputs.last_commit }}
          if [ -z "$LAST_PROCESSED_COMMIT" ]; then
            LAST_PROCESSED_COMMIT=$(git rev-list --max-parents=0 HEAD)
          fi

          if [ "${{ github.event.inputs.event_name }}" == "pull_request" ]; then
            BASE_SHA=$(git merge-base origin/${{ github.event.inputs.base_ref }} HEAD)
            HEAD_SHA=$(git rev-parse HEAD)
            if [ -z "$BASE_SHA" ] || [ -z "$HEAD_SHA" ]; then
              echo "BASE_SHA or HEAD_SHA is not set. Exiting."
              exit 1
            fi
            COMMITS=$(git log ${BASE_SHA}..${HEAD_SHA} --pretty=format:"%s" | sort -u)
          else
            COMMITS=$(git log ${LAST_PROCESSED_COMMIT}..HEAD --pretty=format:"%s" | sort -u)
          fi

          CHANGELOG_UPDATED=false
          SQUASH_COMMIT_MSG=""
          VERSION_UPDATED=false
          while IFS= read -r commit; do
            if ! grep -q "$commit" CHANGELOG.md; then
              NEW_VERSION=""
              if [[ $commit == feat:* ]]; then
                NEW_VERSION=$(npm version minor --no-git-tag-version)
              else
                NEW_VERSION=$(npm version patch --no-git-tag-version)
              fi

              if [[ $commit == feat:* ]]; then
                echo "## [${NEW_VERSION}] - $(date +'%Y-%m-%d')" >> CHANGELOG.md
                echo "" >> CHANGELOG.md
                echo "* ${commit}" >> CHANGELOG.md
                echo "" >> CHANGELOG.md

                SQUASH_COMMIT_MSG="${SQUASH_COMMIT_MSG}${commit}\n"
                CHANGELOG_UPDATED=true
              fi

              # Commit changes immediately
              git add package.json
              if [ "$CHANGELOG_UPDATED" = true ]; then
                git add CHANGELOG.md
              fi
              git commit -m "Bump version to ${NEW_VERSION} and update changelog"
              VERSION_UPDATED=true
            fi
          done <<< "$COMMITS"

          if [ "$VERSION_UPDATED" = true ]; then
            # Squash all commits into one
            git reset --soft HEAD~$(git rev-list --count HEAD ^origin/main)
            git commit --amend -m "Bump version and update changelog:

            ${SQUASH_COMMIT_MSG}"
            echo "Changes detected. Proceeding with push."
          else
            echo "No new unique commits. Exiting."
            exit 0
          fi

      - name: Pull latest changes
        if: github.event.inputs.event_name == 'pull_request'
        run: |
          git pull origin ${{ github.event.inputs.head_ref }}

      - name: Push changes to PR
        if: github.event.inputs.event_name == 'pull_request'
        run: |
          git push origin HEAD:${{ github.event.inputs.head_ref }}
          if [ $? -ne 0 ]; then
            echo "Failed to push changes to PR. Exiting with error."
            exit 1
          fi
          echo "Successfully pushed changes to PR."

      - name: Push changes to main
        if: github.event.inputs.event_name == 'push'
        run: |
          git push --follow-tags
          if [ $? -ne 0 ]; then
            echo "Failed to push changes. Exiting with error."
            exit 1
          fi
          echo "Successfully pushed changes."

      - name: Verify pushed changes
        if: github.event.inputs.event_name == 'push'
        run: |
          git fetch origin
          LOCAL_SHA=$(git rev-parse HEAD)
          REMOTE_SHA=$(git rev-parse origin/main)
          if [ "$LOCAL_SHA" != "$REMOTE_SHA" ]; then
            echo "Local and remote HEADs do not match. Push may have failed."
            exit 1
          fi
          echo "Verified: Local and remote HEADs match."

      - name: Save last processed commit
        if: always()
        run: |
          echo $(git rev-parse HEAD) > .last_processed_commit
          git add .last_processed_commit
          git commit -m "Update last processed commit"
          git push origin HEAD:${{ github.event.inputs.head_ref }}

      - name: Emit job completion
        if: always()
        run: echo "Job completed"
