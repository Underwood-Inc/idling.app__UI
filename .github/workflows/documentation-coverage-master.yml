name: 📚 Documentation Coverage (Master)

on:
  push:
    branches: [master]

permissions:
  contents: write
  issues: write

jobs:
  documentation-coverage-master:
    name: Update Documentation Coverage (Master)
    runs-on: ubuntu-latest

    steps:
      - name: 🔄 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Need full history for proper analysis
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: 📦 Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install interrogate docstr-coverage pydocstyle requests

      - name: 🔍 Check Python docstring coverage with interrogate
        id: interrogate
        run: |
          # Run interrogate and capture output
          if interrogate --fail-under=0 --quiet src/ > interrogate_output.txt 2>&1; then
            echo "interrogate_passed=true" >> $GITHUB_OUTPUT
          else
            echo "interrogate_passed=false" >> $GITHUB_OUTPUT
          fi

          # Extract docstring coverage percentage
          DOCSTRING_COVERAGE=$(grep -oP 'TOTAL.*?(\K\d+(?=\.\d+%))' interrogate_output.txt || echo "0")
          echo "docstring_coverage=${DOCSTRING_COVERAGE}" >> $GITHUB_OUTPUT
        continue-on-error: true

      - name: 🔍 Check documentation file coverage
        id: docs-coverage
        run: |
          # Make scripts executable
          chmod +x scripts/check-docs-coverage.py

          # Run documentation coverage check and capture percentage
          if python scripts/check-docs-coverage.py --fail-under=0 --format=json --output=docs-coverage.json; then
            echo "docs_coverage_passed=true" >> $GITHUB_OUTPUT
          else
            echo "docs_coverage_passed=false" >> $GITHUB_OUTPUT
          fi

          # Extract documentation coverage percentage
          if [ -f docs-coverage.json ]; then
            DOC_COVERAGE=$(python -c "import json; data=json.load(open('docs-coverage.json')); print(int(data['coverage_percentage']))")
            echo "doc_coverage=${DOC_COVERAGE}" >> $GITHUB_OUTPUT
          else
            echo "doc_coverage=0" >> $GITHUB_OUTPUT
          fi
        continue-on-error: true

      - name: 🎨 Generate documentation coverage badge
        id: generate-badge
        run: |
          # Create badges directory
          mkdir -p DOCS/badges/

          # Get coverage percentage
          DOC_COVERAGE="${{ steps.docs-coverage.outputs.doc_coverage }}"
          DOCSTRING_COVERAGE="${{ steps.interrogate.outputs.docstring_coverage }}"

          # Calculate overall documentation coverage (weighted average)
          OVERALL_COVERAGE=$(python -c "print(int(($DOC_COVERAGE * 0.6) + ($DOCSTRING_COVERAGE * 0.4)))")
          echo "overall_coverage=${OVERALL_COVERAGE}" >> $GITHUB_OUTPUT

          # Determine badge color based on coverage
          if [ "$OVERALL_COVERAGE" -ge 90 ]; then
            COLOR="brightgreen"
          elif [ "$OVERALL_COVERAGE" -ge 75 ]; then
            COLOR="green"
          elif [ "$OVERALL_COVERAGE" -ge 60 ]; then
            COLOR="yellow"
          elif [ "$OVERALL_COVERAGE" -ge 40 ]; then
            COLOR="orange"
          else
            COLOR="red"
          fi

          # Generate badge URL
          BADGE_URL="https://img.shields.io/badge/Documentation%20Coverage-${OVERALL_COVERAGE}%25-${COLOR}?style=flat&logo=gitbook&logoColor=white"
          echo "badge_url=${BADGE_URL}" >> $GITHUB_OUTPUT

          # Get current timestamp
          TIMESTAMP=$(date -u '+%Y-%m-%d %H:%M:%S UTC')

          # Update centralized badge markdown file
          cat > DOCS/badges/documentation-coverage.md << EOF
          <!-- This file is auto-generated by GitHub Actions - DO NOT EDIT MANUALLY -->
          <!-- Documentation Coverage Badge - Updated: ${TIMESTAMP} -->

          [![Documentation Coverage](${BADGE_URL})](https://underwood-inc.github.io/idling.app__UI/)

          <!-- Badge URL for reference: ${BADGE_URL} -->
          <!-- Coverage: ${OVERALL_COVERAGE}% | Files: ${DOC_COVERAGE}% | Docstrings: ${DOCSTRING_COVERAGE}% -->
          EOF

          echo "Generated documentation coverage badge: ${OVERALL_COVERAGE}%"

      - name: 📝 Update all badges using centralized system
        run: |
          # Make the centralized badge update script executable
          chmod +x scripts/update-centralized-badges.py

          # Run the centralized badge update script
          python scripts/update-centralized-badges.py \
            --badge-url="${{ steps.generate-badge.outputs.badge_url }}" \
            --overall-coverage="${{ steps.generate-badge.outputs.overall_coverage }}" \
            --doc-coverage="${{ steps.docs-coverage.outputs.doc_coverage }}" \
            --docstring-coverage="${{ steps.interrogate.outputs.docstring_coverage }}"

      - name: 🚨 Create issue for missing documentation
        if: |
          steps.interrogate.outputs.interrogate_passed == 'false' || 
          steps.docs-coverage.outputs.docs_coverage_passed == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            // Check if an issue already exists
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['documentation'],
              state: 'open'
            });

            const existingIssue = issues.data.find(issue => 
              issue.title.includes('Documentation Coverage Below Threshold')
            );

            if (existingIssue) {
              console.log('Documentation coverage issue already exists:', existingIssue.html_url);
              return;
            }

            const badgeUrl = '${{ steps.generate-badge.outputs.badge_url }}';

            const issueBody = `## 📚 Documentation Coverage Below Threshold

            ![Documentation Coverage](${badgeUrl})

            The automated documentation coverage check has detected that our documentation coverage has fallen below the required threshold.

            ### Current Status
            - **Python Docstrings**: ${{ steps.interrogate.outputs.interrogate_passed == 'true' && '✅ Passing' || '❌ Failing' }} (${{ steps.interrogate.outputs.docstring_coverage }}%)
            - **Documentation Files**: ${{ steps.docs-coverage.outputs.docs_coverage_passed == 'true' && '✅ Passing' || '❌ Failing' }} (${{ steps.docs-coverage.outputs.doc_coverage }}%)
            - **Overall Coverage**: ${{ steps.generate-badge.outputs.overall_coverage }}%

            ### Action Required
            Please review the missing documentation and add the necessary files or docstrings. You can use the following commands to check coverage locally:

            \`\`\`bash
            # Check Python docstring coverage
            pip install interrogate
            interrogate --verbose=2 src/

            # Check documentation file coverage
            python scripts/check-docs-coverage.py

            # Generate documentation stubs
            python scripts/check-docs-coverage.py --generate-stubs
            \`\`\`

            ### Auto-generated Documentation Stubs
            If documentation stubs were generated, they can be found in the \`DOCS/\` directory with \`status: draft\` frontmatter. Please review and complete these files.

            ---
            *This issue was automatically created by the Documentation Coverage workflow.*`;

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '📚 Documentation Coverage Below Threshold',
              body: issueBody,
              labels: ['documentation', 'automated', 'priority:medium']
            });

      - name: 💾 Commit badge updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          if git diff --quiet DOCS/badges/documentation-coverage.md README.md DOCS/_includes/header.html DOCS/_includes/documentation-coverage-badge.html; then
            echo "📝 No changes to documentation coverage badges"
          else
            echo "📝 Committing documentation coverage badge updates..."
            git add DOCS/badges/documentation-coverage.md README.md DOCS/_includes/header.html DOCS/_includes/documentation-coverage-badge.html
            git commit -m "docs: update documentation coverage badges - ${{ steps.generate-badge.outputs.overall_coverage }}% overall coverage

            - Documentation Files: ${{ steps.docs-coverage.outputs.doc_coverage }}%
            - Python Docstrings: ${{ steps.interrogate.outputs.docstring_coverage }}%
            - Overall Coverage: ${{ steps.generate-badge.outputs.overall_coverage }}%

            Updated: README.md, Jekyll header, and centralized badge file

            [skip ci]"
            git push
            echo "✅ Successfully updated all documentation coverage badges"
          fi
