name: 📊 Feature Debrief Report

on:
  push:
    branches: [ main, master ]
  pull_request:
    types: [ closed ]
    branches: [ main, master ]

jobs:
  generate-debrief:
    if: github.event_name == 'push' || (github.event.pull_request.merged == true)
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      pull-requests: write
      
    steps:
    - name: 🔄 Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'yarn'
        
    - name: 🔧 Install dependencies
      run: yarn install --frozen-lockfile
        
    - name: 📊 Generate PR-specific debrief report
      if: github.event_name == 'pull_request'
      env:
        PR_NUMBER: ${{ github.event.pull_request.number }}
        PR_TITLE: ${{ github.event.pull_request.title }}
        PR_BASE_SHA: ${{ github.event.pull_request.base.sha }}
        PR_HEAD_SHA: ${{ github.event.pull_request.head.sha }}
        PR_AUTHOR: ${{ github.event.pull_request.user.login }}
        PR_URL: ${{ github.event.pull_request.html_url }}
      run: |
        echo "🔍 Analyzing ALL commits in PR #$PR_NUMBER"
        
        # Create inline PR analysis script
        cat > analyze-pr.js << 'SCRIPT_EOF'
        const { execSync } = require('child_process');
        const fs = require('fs');
        
        const prNumber = process.env.PR_NUMBER;
        const prTitle = process.env.PR_TITLE;
        const baseSha = process.env.PR_BASE_SHA;
        const headSha = process.env.PR_HEAD_SHA;
        const prAuthor = process.env.PR_AUTHOR;
        const prUrl = process.env.PR_URL;
        
        console.log(`🔍 Analyzing PR #${prNumber}: ${prTitle}`);
        
        // Get ALL commits from the PR
        const gitCmd = `git log --oneline --pretty=format:"%h|%ad|%s|%an" --date=short ${baseSha}..${headSha}`;
        
        try {
          const output = execSync(gitCmd, { encoding: 'utf8' });
          const commits = output.split('\n').filter(line => line.trim()).map(line => {
            const cleanLine = line.replace(/^"/, '').replace(/"$/, '');
            const [hash, date, subject, author] = cleanLine.split('|');
            return { hash, date, subject, author };
          });
          
          console.log(`✅ Found ${commits.length} commits in PR`);
          
          if (commits.length === 0) {
            console.log('⚠️ No commits found in PR range');
            process.exit(0);
          }
          
          // Analyze commit types
          const commitsByType = {};
          const commitsByAuthor = {};
          
          commits.forEach(commit => {
            const match = commit.subject.match(/^(\w+)(\(.+\))?:/);
            const type = match ? match[1].toLowerCase() : 'other';
            commitsByType[type] = (commitsByType[type] || 0) + 1;
            commitsByAuthor[commit.author] = (commitsByAuthor[commit.author] || 0) + 1;
          });
          
          // Generate report
          const now = new Date();
          const report = `# 📊 PR Feature Debrief Report
        ## Pull Request #${prNumber} Analysis
        
        **PR:** [#${prNumber}](${prUrl})  
        **Title:** ${prTitle}  
        **Author:** ${prAuthor}  
        **Total Commits:** ${commits.length}
        
        ## Executive Summary
        
        This pull request contains **${commits.length} commits**:
        
        ### Commit Types
        ${Object.entries(commitsByType).map(([type, count]) => {
          const percentage = ((count / commits.length) * 100).toFixed(1);
          return `- **${type}**: ${count} commits (${percentage}%)`;
        }).join('\n')}
        
        ### Contributors
        ${Object.entries(commitsByAuthor).map(([author, count]) => {
          const percentage = ((count / commits.length) * 100).toFixed(1);
          return `- **${author}**: ${count} commits (${percentage}%)`;
        }).join('\n')}
        
        ## All Commits
        
        ${commits.map(commit => {
          const match = commit.subject.match(/^(\w+)(\(.+\))?:/);
          const type = match ? match[1] : 'other';
          return `- \`${commit.hash}\` **[${type}]** ${commit.subject} *(${commit.author}, ${commit.date})*`;
        }).join('\n')}
        `;
          
          // Save report
          if (!fs.existsSync('reports')) {
            fs.mkdirSync('reports', { recursive: true });
          }
          
          const filename = `pr-${prNumber}-debrief.md`;
          fs.writeFileSync(`reports/${filename}`, report);
          
          console.log(`✅ Report saved: reports/${filename}`);
          
          // Save summary for PR comment
          const summary = `This pull request contains **${commits.length} commits**:
        
        ${Object.entries(commitsByType).map(([type, count]) => {
          const percentage = ((count / commits.length) * 100).toFixed(1);
          return `- **${type}**: ${count} commits (${percentage}%)`;
        }).join('\n')}`;
          
          fs.writeFileSync('pr-summary.txt', summary);
          
        } catch (error) {
          console.error('❌ Error analyzing PR:', error.message);
          process.exit(1);
        }
        SCRIPT_EOF
        
        node analyze-pr.js
        
    - name: 📊 Generate weekly debrief report  
      if: github.event_name == 'push'
      run: |
        echo "📈 Generating weekly development summary"
        mkdir -p reports
        echo "Weekly debrief placeholder" > reports/weekly-debrief.md
        
    - name: 📤 Upload debrief reports
      uses: actions/upload-artifact@v4
      with:
        name: feature-debrief-reports-${{ github.run_number }}
        path: reports/
        retention-days: 30
        
    - name: 💬 Comment on PR with debrief
      if: github.event_name == 'pull_request' && github.event.pull_request.merged == true
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          try {
            const summary = fs.readFileSync('pr-summary.txt', 'utf8');
            
            const comment = `## 📊 Feature Debrief Report - PR #${{ github.event.pull_request.number }}
            
            ${summary}
            
            📄 **Full Report**: [Download from Actions Artifacts](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            
            ---
            *Generated automatically by Feature Debrief Bot* 🤖`;
            
            await github.rest.issues.createComment({
              issue_number: ${{ github.event.pull_request.number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
            
            console.log('✅ Posted debrief comment to PR');
          } catch (error) {
            console.log('⚠️ Could not post PR comment:', error.message);
          }
