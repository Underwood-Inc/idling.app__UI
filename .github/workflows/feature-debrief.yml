name: 📊 Feature Debrief Report

on:
  pull_request:
    types: [closed]
    branches: [main, master]
  push:
    branches: [main, master]
  workflow_dispatch:
    inputs:
      report_type:
        description: 'Report type to generate'
        required: true
        default: 'detailed'
        type: choice
        options:
          - standard
          - detailed
          - ultra
          - all
      format:
        description: 'Output format'
        required: true
        default: 'all'
        type: choice
        options:
          - md
          - html
          - txt
          - all
      days:
        description: 'Number of days to analyze'
        required: false
        default: '30'
        type: string

jobs:
  generate-debrief:
    runs-on: ubuntu-latest
    if: >
      (github.event_name == 'pull_request' && github.event.pull_request.merged == true) ||
      (github.event_name == 'push') ||
      (github.event_name == 'workflow_dispatch')

    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: 🔄 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: 🔧 Enable Corepack
        run: |
          corepack enable
          corepack install

      - name: 🔧 Install dependencies
        run: pnpm install

      - name: 📊 Generate comprehensive debrief report (PR)
        if: github.event_name == 'pull_request'
        env:
          PR_NUMBER: ${{ github.event.pull_request.number }}
          PR_TITLE: ${{ github.event.pull_request.title }}
          PR_BASE_SHA: ${{ github.event.pull_request.base.sha }}
          PR_HEAD_SHA: ${{ github.event.pull_request.head.sha }}
          PR_AUTHOR: ${{ github.event.pull_request.user.login }}
          PR_URL: ${{ github.event.pull_request.html_url }}
        run: |
          echo "🔍 Generating ultra-detailed debrief for merged PR #$PR_NUMBER"
          pnpm debrief --pr --report-type ultra --format all

          # Create PR summary for comment
          if [ -f "reports/"*"/pr-$PR_NUMBER-debrief-ultra.md" ]; then
            echo "Creating PR summary from ultra report..."
            find reports/ -name "pr-$PR_NUMBER-debrief-ultra.md" -exec head -30 {} \; | grep -E "^\*\*|^-|^##" | head -15 > pr-summary.txt
            echo "" >> pr-summary.txt
            echo "📄 **Full comprehensive report suite available in artifacts**" >> pr-summary.txt
          fi

      - name: 📊 Generate comprehensive debrief report (Push to master)
        if: github.event_name == 'push'
        run: |
          echo "🔍 Generating comprehensive debrief for new commits to ${{ github.ref_name }}"

          # Get commits since last successful run or last 24 hours
          SINCE_DATE=$(date -d '24 hours ago' --iso-8601)
          echo "Analyzing commits since: $SINCE_DATE"

          # Generate ultra-detailed report for recent commits
          pnpm debrief --days 1 --report-type ultra --format all

          echo "✅ Generated comprehensive debrief for recent commits"

      - name: 📊 Generate custom debrief report (Manual)
        if: github.event_name == 'workflow_dispatch'
        run: |
          echo "🔍 Generating custom debrief report"
          echo "Report Type: ${{ github.event.inputs.report_type }}"
          echo "Format: ${{ github.event.inputs.format }}"
          echo "Days: ${{ github.event.inputs.days }}"

          pnpm debrief --days ${{ github.event.inputs.days }} --report-type ${{ github.event.inputs.report_type }} --format ${{ github.event.inputs.format }}

      - name: 📤 Upload debrief reports
        uses: actions/upload-artifact@v4
        with:
          name: feature-debrief-reports-${{ github.run_number }}
          path: reports/
          retention-days: 30

      - name: 💬 Comment on PR with debrief
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            try {
              const summary = fs.readFileSync('pr-summary.txt', 'utf8');
              
              const comment = `## 📊 Feature Debrief Report - PR #${{ github.event.pull_request.number }}
              
              ${summary}
              
              📄 **Full Report**: [Download from Actions Artifacts](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
              
              ---
              *Generated automatically by Feature Debrief Bot* 🤖`;
              
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
              
              console.log('✅ Posted debrief comment to PR');
            } catch (error) {
              console.log('⚠️ Could not post PR comment:', error.message);
            }
