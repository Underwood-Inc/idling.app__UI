{
  "openapi": "3.0.0",
  "info": {
    "title": "Idling.app API",
    "version": "0.338.7",
    "description": "Complete API documentation for Idling.app - a modern social platform",
    "contact": {
      "name": "Idling.app Development Team",
      "url": "https://github.com/Underwood-Inc/idling.app__UI"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "servers": [
    {
      "url": "http://localhost:3000",
      "description": "Development server (Next.js)"
    },
    {
      "url": "https://idling.app",
      "description": "Production server"
    }
  ],
  "components": {
    "securitySchemes": {
      "NextAuth": {
        "type": "apiKey",
        "in": "cookie",
        "name": "next-auth.session-token",
        "description": "NextAuth session cookie"
      },
      "AdminRole": {
        "type": "apiKey",
        "in": "header",
        "name": "X-Admin-Role",
        "description": "Admin role verification"
      }
    },
    "schemas": {
      "Error": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "Error message"
          },
          "details": {
            "type": "string",
            "description": "Additional error details"
          }
        },
        "required": [
          "error"
        ]
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "User ID"
          },
          "username": {
            "type": "string",
            "description": "Username"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "User email"
          },
          "role": {
            "type": "string",
            "enum": [
              "user",
              "admin",
              "moderator"
            ],
            "description": "User role"
          }
        }
      },
      "EmojiResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "Emoji ID"
          },
          "emoji_id": {
            "type": "string",
            "description": "Emoji identifier"
          },
          "unicode_codepoint": {
            "type": "string",
            "description": "Unicode codepoint"
          },
          "unicode_char": {
            "type": "string",
            "description": "Unicode character"
          },
          "name": {
            "type": "string",
            "description": "Emoji name"
          },
          "description": {
            "type": "string",
            "description": "Emoji description"
          },
          "category": {
            "type": "object",
            "properties": {
              "id": {
                "type": "number"
              },
              "name": {
                "type": "string"
              },
              "display_name": {
                "type": "string"
              }
            }
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Emoji tags"
          },
          "aliases": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Emoji aliases"
          },
          "keywords": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Emoji keywords"
          },
          "is_custom": {
            "type": "boolean",
            "description": "Whether this is a custom emoji"
          },
          "custom_image_url": {
            "type": "string",
            "description": "URL for custom emoji image"
          },
          "usage_count": {
            "type": "number",
            "description": "Usage count for this emoji"
          },
          "version_min": {
            "type": "string",
            "description": "Minimum OS version required"
          },
          "is_approved": {
            "type": "boolean",
            "description": "Whether custom emoji is approved"
          },
          "is_personal": {
            "type": "boolean",
            "description": "Whether emoji is personal/private"
          }
        }
      },
      "EmojiListResponse": {
        "type": "object",
        "properties": {
          "emojis": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmojiResponse"
            },
            "description": "List of emojis"
          },
          "categories": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "number"
                },
                "name": {
                  "type": "string"
                },
                "display_name": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "emoji_count": {
                  "type": "number"
                }
              }
            },
            "description": "Available emoji categories"
          },
          "os_info": {
            "type": "object",
            "properties": {
              "os": {
                "type": "string"
              },
              "version": {
                "type": "string"
              },
              "is_supported": {
                "type": "boolean"
              },
              "emoji_support": {
                "type": "object",
                "properties": {
                  "supports_unicode": {
                    "type": "boolean"
                  },
                  "supports_custom": {
                    "type": "boolean"
                  },
                  "max_emoji_version": {
                    "type": "string"
                  },
                  "recommended_format": {
                    "type": "string"
                  }
                }
              }
            },
            "description": "Operating system information"
          },
          "total_count": {
            "type": "number",
            "description": "Total number of emojis"
          },
          "page": {
            "type": "number",
            "description": "Current page number"
          },
          "per_page": {
            "type": "number",
            "description": "Number of emojis per page"
          }
        }
      },
      "CustomAlert": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "Alert ID"
          },
          "title": {
            "type": "string",
            "description": "Alert title"
          },
          "message": {
            "type": "string",
            "description": "Alert message"
          },
          "details": {
            "type": "string",
            "description": "Additional alert details"
          },
          "alert_type": {
            "type": "string",
            "description": "Type of alert (info, warning, error, success)"
          },
          "priority": {
            "type": "number",
            "description": "Alert priority (higher numbers = higher priority)"
          },
          "icon": {
            "type": "string",
            "description": "Icon name for the alert"
          },
          "dismissible": {
            "type": "boolean",
            "description": "Whether the alert can be dismissed"
          },
          "persistent": {
            "type": "boolean",
            "description": "Whether the alert persists across sessions"
          },
          "expires_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the alert expires"
          },
          "actions": {
            "type": "object",
            "description": "Available actions for the alert"
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata for the alert"
          }
        }
      },
      "AdminUser": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "User ID"
          },
          "name": {
            "type": "string",
            "nullable": true,
            "description": "User name"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "User email"
          },
          "image": {
            "type": "string",
            "nullable": true,
            "description": "User avatar URL"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Account creation date"
          },
          "profile_public": {
            "type": "boolean",
            "description": "Whether profile is public"
          },
          "bio": {
            "type": "string",
            "description": "User bio"
          },
          "location": {
            "type": "string",
            "description": "User location"
          },
          "last_login": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Last login date"
          },
          "login_count": {
            "type": "number",
            "description": "Number of logins"
          },
          "is_active": {
            "type": "boolean",
            "description": "Whether user is active"
          },
          "admin_notes": {
            "type": "string",
            "nullable": true,
            "description": "Admin notes about user"
          },
          "provider_name": {
            "type": "string",
            "nullable": true,
            "description": "Auth provider name"
          },
          "provider_email": {
            "type": "string",
            "nullable": true,
            "description": "Auth provider email"
          },
          "provider_verified": {
            "type": "boolean",
            "description": "Whether provider email is verified"
          },
          "provider_last_used": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Last provider usage"
          },
          "role_count": {
            "type": "number",
            "description": "Number of roles assigned"
          },
          "role_names": {
            "type": "string",
            "nullable": true,
            "description": "Comma-separated role names"
          },
          "has_admin": {
            "type": "boolean",
            "description": "Whether user has admin role"
          },
          "has_moderator": {
            "type": "boolean",
            "description": "Whether user has moderator role"
          },
          "subscription_count": {
            "type": "number",
            "description": "Number of subscriptions"
          },
          "active_subscriptions": {
            "type": "number",
            "description": "Number of active subscriptions"
          },
          "subscription_names": {
            "type": "string",
            "nullable": true,
            "description": "Comma-separated subscription names"
          },
          "has_active_subscription": {
            "type": "boolean",
            "description": "Whether user has active subscription"
          },
          "is_timed_out": {
            "type": "boolean",
            "description": "Whether user is currently timed out"
          },
          "timeout_count": {
            "type": "number",
            "description": "Number of timeouts"
          },
          "active_timeout_reason": {
            "type": "string",
            "nullable": true,
            "description": "Reason for current timeout"
          },
          "timeout_expires": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "When current timeout expires"
          },
          "active_timeout_id": {
            "type": "number",
            "nullable": true,
            "description": "ID of active timeout"
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Authentication",
      "description": "User authentication and session management"
    },
    {
      "name": "Users",
      "description": "User profile and account management"
    },
    {
      "name": "Admin",
      "description": "Administrative operations (admin only)"
    },
    {
      "name": "Emojis",
      "description": "Emoji browsing and management"
    },
    {
      "name": "Upload",
      "description": "File upload operations"
    },
    {
      "name": "Images",
      "description": "Dynamic image generation"
    },
    {
      "name": "Alerts",
      "description": "System alerts and notifications"
    },
    {
      "name": "System",
      "description": "System information and metadata"
    },
    {
      "name": "Documentation",
      "description": "API documentation endpoints"
    }
  ],
  "paths": {
    "/api/admin/permissions": {
      "get": {
        "summary": "Get permissions with search, filtering, and pagination",
        "description": "Retrieve a comprehensive list of permissions with advanced filtering, search, and pagination capabilities. Includes usage statistics and role associations.",
        "tags": [
          "Admin"
        ],
        "security": [
          {
            "NextAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search term to filter permissions by name, display_name, or description"
          },
          {
            "in": "query",
            "name": "category",
            "schema": {
              "type": "string"
            },
            "description": "Filter permissions by category"
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string",
              "enum": [
                "all",
                "active",
                "disabled",
                "archived"
              ],
              "default": "all"
            },
            "description": "Filter permissions by status"
          },
          {
            "in": "query",
            "name": "risk_level",
            "schema": {
              "type": "string",
              "enum": [
                "all",
                "low",
                "medium",
                "high",
                "critical"
              ],
              "default": "all"
            },
            "description": "Filter permissions by risk level"
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "type": "string",
              "enum": [
                "name",
                "display_name",
                "category",
                "created_at",
                "updated_at",
                "usage_count",
                "sort_order"
              ],
              "default": "sort_order"
            },
            "description": "Field to sort by"
          },
          {
            "in": "query",
            "name": "sort_order",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            },
            "description": "Sort order direction"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            },
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            },
            "description": "Number of permissions per page"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved permissions with pagination data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "overview": {
                      "type": "object"
                    },
                    "permissions": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "page": {
                          "type": "integer"
                        },
                        "limit": {
                          "type": "integer"
                        },
                        "total": {
                          "type": "integer"
                        },
                        "totalPages": {
                          "type": "integer"
                        },
                        "hasNext": {
                          "type": "boolean"
                        },
                        "hasPrev": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": null
              }
            }
          },
          "403": {
            "description": "Insufficient permissions - requires ADMIN.PERMISSIONS_VIEW permission",
            "content": {
              "application/json": {
                "schema": null
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": null
              }
            }
          }
        },
        "operationId": "getAdminpermissions"
      },
      "post": {
        "summary": "Create a new permission",
        "description": "Create a new permission with specified name, display name, category, and other properties",
        "tags": [
          "Admin"
        ],
        "security": [
          {
            "NextAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "pattern": "^[a-z0-9._-]+$",
                    "minLength": 1,
                    "maxLength": 100,
                    "description": "Unique permission name (lowercase, alphanumeric, dots, underscores, hyphens)"
                  },
                  "display_name": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 200,
                    "description": "Human-readable display name"
                  },
                  "description": {
                    "type": "string",
                    "description": "Optional description of the permission"
                  },
                  "category": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 50,
                    "description": "Permission category"
                  },
                  "is_inheritable": {
                    "type": "boolean",
                    "default": false,
                    "description": "Whether this permission can be inherited"
                  },
                  "risk_level": {
                    "type": "string",
                    "enum": [
                      "low",
                      "medium",
                      "high",
                      "critical"
                    ],
                    "default": "low",
                    "description": "Risk level associated with this permission"
                  },
                  "dependencies": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "default": [],
                    "description": "List of permission names this permission depends on"
                  },
                  "metadata": {
                    "type": "object",
                    "default": {},
                    "description": "Additional metadata for the permission"
                  },
                  "reason": {
                    "type": "string",
                    "description": "Optional reason for creating this permission"
                  }
                },
                "required": [
                  "name",
                  "display_name",
                  "category"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Permission created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "permission": {
                      "type": "object"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data or validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": null
              }
            }
          },
          "403": {
            "description": "Insufficient permissions - requires ADMIN.PERMISSIONS_CREATE permission",
            "content": {
              "application/json": {
                "schema": null
              }
            }
          },
          "409": {
            "description": "Permission with this name already exists",
            "content": {
              "application/json": {
                "schema": null
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": null
              }
            }
          }
        },
        "operationId": "postAdminpermissions"
      }
    },
    "/api/admin/roles": {
      "get": {
        "summary": "Get available roles for assignment",
        "description": "Retrieve a list of available roles that can be assigned to users. Excludes protected roles that can only be assigned via database.",
        "tags": [
          "Admin"
        ],
        "security": [
          {
            "NextAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved available roles",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": null
              }
            }
          },
          "403": {
            "description": "Insufficient permissions - requires ADMIN.USERS_MANAGE permission",
            "content": {
              "application/json": {
                "schema": null
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": null
              }
            }
          }
        },
        "operationId": "getAdminroles"
      }
    },
    "/api/admin/users": {
      "get": {
        "summary": "Get users for admin management",
        "description": "Retrieve a paginated list of users with comprehensive information for admin management",
        "tags": [
          "Admin"
        ],
        "security": [
          {
            "NextAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "default": 20,
              "maximum": 100
            },
            "description": "Number of users per page"
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search term to filter users by name, email, or provider"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "users": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/AdminUser"
                      }
                    },
                    "currentPage": {
                      "type": "integer"
                    },
                    "totalPages": {
                      "type": "integer"
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "page": {
                          "type": "integer"
                        },
                        "limit": {
                          "type": "integer"
                        },
                        "total": {
                          "type": "integer"
                        },
                        "totalPages": {
                          "type": "integer"
                        },
                        "hasNext": {
                          "type": "boolean"
                        },
                        "hasPrev": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid query parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions (admin required)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "operationId": "getAdminusers"
      }
    },
    "/api/alerts/active": {
      "get": {
        "summary": "Get active alerts for current user",
        "description": "Fetches active custom alerts for the current user based on targeting rules and user permissions",
        "tags": [
          "Alerts"
        ],
        "security": [
          {
            "NextAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved active alerts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CustomAlert"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Failed to fetch alerts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "operationId": "getAlertsactive"
      }
    },
    "/api/alerts/dismiss": {
      "post": {
        "summary": "Dismiss an alert for the current user",
        "description": "Dismisses a custom alert for the authenticated user and updates analytics",
        "tags": [
          "Alerts"
        ],
        "security": [
          {
            "NextAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "alertId": {
                    "type": "number",
                    "description": "ID of the alert to dismiss",
                    "example": 123
                  },
                  "userId": {
                    "type": "number",
                    "description": "ID of the user dismissing the alert (must match authenticated user)",
                    "example": 456
                  }
                },
                "required": [
                  "alertId",
                  "userId"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Alert dismissed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Invalid request data"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      },
                      "description": "Validation error details"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized (user can only dismiss their own alerts)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Alert not found or not dismissible",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "Failed to dismiss alert",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "operationId": "postAlertsdismiss"
      }
    },
    "/api/analytics/dashboard": {
      "get": {
        "summary": "Get comprehensive analytics dashboard data",
        "description": "Retrieve detailed analytics data including sessions, page views, geographic data, device information,\nVPN usage, heatmap data, and subscription analytics for the admin dashboard.\n",
        "tags": [
          "Analytics"
        ],
        "security": [
          {
            "NextAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "dateRange",
            "schema": {
              "type": "string",
              "enum": [
                "7d",
                "30d",
                "90d",
                "1y"
              ],
              "default": "30d"
            },
            "description": "Date range for analytics data"
          },
          {
            "in": "query",
            "name": "metrics",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "sessions",
                  "pageviews",
                  "clicks",
                  "users",
                  "geographic",
                  "devices",
                  "vpn",
                  "heatmap",
                  "subscriptions"
                ]
              }
            },
            "description": "Specific metrics to include in the response"
          },
          {
            "in": "query",
            "name": "granularity",
            "schema": {
              "type": "string",
              "enum": [
                "hourly",
                "daily",
                "weekly",
                "monthly"
              ],
              "default": "daily"
            },
            "description": "Time granularity for time-series data"
          },
          {
            "in": "query",
            "name": "timezone",
            "schema": {
              "type": "string",
              "default": "UTC"
            },
            "description": "Timezone for time-based calculations"
          },
          {
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string"
            },
            "description": "Filter analytics by specific country code"
          },
          {
            "in": "query",
            "name": "device_type",
            "schema": {
              "type": "string",
              "enum": [
                "desktop",
                "mobile",
                "tablet"
              ]
            },
            "description": "Filter analytics by device type"
          },
          {
            "in": "query",
            "name": "include_vpn",
            "schema": {
              "type": "boolean",
              "default": true
            },
            "description": "Include VPN/proxy traffic in analytics"
          },
          {
            "in": "query",
            "name": "format",
            "schema": {
              "type": "string",
              "enum": [
                "json",
                "csv"
              ],
              "default": "json"
            },
            "description": "Response format"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved analytics dashboard data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Invalid query parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions - requires admin access",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "operationId": "getAnalyticsdashboard"
      }
    },
    "/api/auth/unlink-account": {
      "delete": {
        "summary": "Unlink an authentication provider account",
        "description": "Removes a linked authentication provider account from the user's profile.\nUsers must have at least one authentication method remaining.\n",
        "tags": [
          "Authentication"
        ],
        "security": [
          {
            "NextAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "providerId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the provider account to unlink"
          }
        ],
        "responses": {
          "200": {
            "description": "Account unlinked successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Account unlinked successfully"
                    },
                    "provider": {
                      "type": "string",
                      "example": "google",
                      "description": "The provider that was unlinked"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request or cannot unlink the only authentication method",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Cannot unlink the only authentication method"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Account not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Account not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "operationId": "deleteAuthunlinkaccount"
      }
    },
    "/api/emojis": {
      "get": {
        "summary": "Get emojis by OS and category",
        "description": "Fetches OS-specific emojis with optional filtering by category and search terms",
        "tags": [
          "Emojis"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "category",
            "schema": {
              "type": "string"
            },
            "description": "Filter by emoji category (e.g., 'smileys', 'animals')"
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search term to filter emojis by name"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "type": "integer",
              "default": 50,
              "maximum": 100
            },
            "description": "Number of emojis per page"
          },
          {
            "in": "query",
            "name": "include_custom",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "description": "Include custom user-uploaded emojis"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved emojis",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmojiListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "operationId": "getEmojis"
      },
      "post": {
        "summary": "Upload custom emoji",
        "description": "Upload a custom emoji image for the authenticated user",
        "tags": [
          "Emojis"
        ],
        "security": [
          {
            "NextAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary",
                    "description": "Emoji image file (PNG, JPG, GIF)"
                  },
                  "name": {
                    "type": "string",
                    "description": "Name for the custom emoji"
                  },
                  "category": {
                    "type": "string",
                    "description": "Category for the emoji"
                  }
                },
                "required": [
                  "file",
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Emoji uploaded successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "emoji": {
                      "$ref": "#/components/schemas/EmojiResponse"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid file or parameters"
          },
          "401": {
            "description": "Authentication required"
          },
          "413": {
            "description": "File too large"
          },
          "500": {
            "description": "Upload failed"
          }
        },
        "operationId": "postEmojis"
      },
      "put": {
        "summary": "Track emoji usage",
        "description": "Track usage statistics for an emoji",
        "tags": [
          "Emojis"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "emoji_id": {
                    "type": "string",
                    "description": "ID of the emoji being used"
                  },
                  "emoji_type": {
                    "type": "string",
                    "enum": [
                      "windows",
                      "mac",
                      "custom"
                    ],
                    "description": "Type of emoji being tracked"
                  }
                },
                "required": [
                  "emoji_id",
                  "emoji_type"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Usage tracked successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "500": {
            "description": "Tracking failed"
          }
        },
        "operationId": "putEmojis"
      }
    },
    "/api/emojis/usage": {
      "post": {
        "summary": "Track emoji usage statistics",
        "description": "Records usage statistics for emojis to track popularity and usage patterns",
        "tags": [
          "Emojis"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "emoji_id": {
                    "type": "string",
                    "description": "ID of the emoji being used",
                    "example": "1f600"
                  },
                  "emoji_type": {
                    "type": "string",
                    "enum": [
                      "windows",
                      "mac",
                      "custom"
                    ],
                    "description": "Type of emoji being tracked",
                    "example": "windows"
                  }
                },
                "required": [
                  "emoji_id",
                  "emoji_type"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Usage tracked successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Emoji usage tracked successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Missing required fields: emoji_id and emoji_type"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Failed to track usage",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "operationId": "postEmojisusage"
      }
    },
    "/api/openapi": {
      "get": {
        "summary": "OpenAPI specification",
        "description": "Returns the OpenAPI 3.0 specification for the Idling.app API",
        "tags": [
          "Documentation"
        ],
        "responses": {
          "200": {
            "description": "OpenAPI specification",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "operationId": "getOpenapi"
      }
    },
    "/api/profile/id/{id}": {
      "get": {
        "summary": "Get user profile by ID",
        "description": "Retrieve a user's public profile information by their database ID",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9]+$"
            },
            "description": "Database ID of the user",
            "example": "123"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved user profile",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "User database ID"
                    },
                    "username": {
                      "type": "string",
                      "description": "Username"
                    },
                    "display_name": {
                      "type": "string",
                      "description": "Display name"
                    },
                    "avatar_url": {
                      "type": "string",
                      "description": "Avatar image URL"
                    },
                    "bio": {
                      "type": "string",
                      "description": "User bio"
                    },
                    "created_at": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Account creation date"
                    },
                    "profile_visibility": {
                      "type": "string",
                      "enum": [
                        "public",
                        "private",
                        "friends"
                      ],
                      "description": "Profile visibility setting"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID format or missing ID",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Invalid profile identifier. Only database IDs are supported."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found or profile is private",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "operationId": "getProfileidByid"
      }
    },
    "/api/swagger": {
      "get": {
        "summary": "Swagger UI HTML page",
        "description": "Serves the interactive Swagger UI documentation interface",
        "tags": [
          "Documentation"
        ],
        "responses": {
          "200": {
            "description": "Swagger UI HTML page",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "operationId": "getSwagger"
      }
    },
    "/api/upload/image": {
      "post": {
        "summary": "Upload an image file",
        "description": "Upload an image file to the server with validation and security checks",
        "tags": [
          "Upload"
        ],
        "security": [
          {
            "NextAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary",
                    "description": "Image file to upload (JPG, PNG, GIF, WebP)"
                  }
                },
                "required": [
                  "file"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "File uploaded successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "url": {
                      "type": "string",
                      "description": "Public URL of the uploaded image",
                      "example": "/uploads/images/1640995200000-a1b2c3d4.jpg"
                    },
                    "filename": {
                      "type": "string",
                      "description": "Generated filename",
                      "example": "1640995200000-a1b2c3d4.jpg"
                    },
                    "size": {
                      "type": "number",
                      "description": "File size in bytes",
                      "example": 204800
                    },
                    "type": {
                      "type": "string",
                      "description": "MIME type of the uploaded file",
                      "example": "image/jpeg"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid file or validation error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "File validation failed"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      },
                      "description": "Validation error details"
                    },
                    "allowedTypes": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Allowed MIME types"
                    },
                    "maxSize": {
                      "type": "number",
                      "description": "Maximum file size in bytes"
                    },
                    "maxSizeMB": {
                      "type": "number",
                      "description": "Maximum file size in MB"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "413": {
            "description": "File too large",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "File too large"
                    },
                    "maxSize": {
                      "type": "number"
                    },
                    "maxSizeMB": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Upload failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "operationId": "postUploadimage"
      },
      "get": {
        "summary": "Method not allowed",
        "description": "GET requests are not supported for file uploads",
        "tags": [
          "Upload"
        ],
        "responses": {
          "405": {
            "description": "Method not allowed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "operationId": "getUploadimage"
      }
    },
    "/api/version": {
      "get": {
        "summary": "Get application version",
        "description": "Returns the current version of the idling.app application",
        "tags": [
          "System"
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved version information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "version": {
                      "type": "string",
                      "description": "The current application version",
                      "example": "0.338.7"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "operationId": "getVersion"
      }
    }
  }
}